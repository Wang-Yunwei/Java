package com.mdsd.cloud.controller.dji.dto;// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dji.proto

public final class DjiProtoBuf {
  private DjiProtoBuf() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * 指令编号枚举
   * </pre>
   *
   * Protobuf enum {@code CommandEnum}
   */
  public enum CommandEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 心跳
     * </pre>
     *
     * <code>M0_HEARTBEAT = 0;</code>
     */
    M0_HEARTBEAT(0),
    /**
     * <pre>
     * 无人机信息
     * </pre>
     *
     * <code>M1_AIRCRAFT = 1;</code>
     */
    M1_AIRCRAFT(1),
    /**
     * <pre>
     * 飞控订阅
     * </pre>
     *
     * <code>M2_FC_SUBSCRIPTION = 2;</code>
     */
    M2_FC_SUBSCRIPTION(2),
    /**
     * <pre>
     * 相机管理
     * </pre>
     *
     * <code>M3_CAMERA_MANAGER = 3;</code>
     */
    M3_CAMERA_MANAGER(3),
    /**
     * <pre>
     * 云台管理
     * </pre>
     *
     * <code>M4_GIMBAL_MANAGER = 4;</code>
     */
    M4_GIMBAL_MANAGER(4),
    /**
     * <pre>
     * 电源管理
     * </pre>
     *
     * <code>M5_POWER_MANAGEMENT = 5;</code>
     */
    M5_POWER_MANAGEMENT(5),
    /**
     * <pre>
     * 飞行控制
     * </pre>
     *
     * <code>M6_FLIGHT_CONTROLLER = 6;</code>
     */
    M6_FLIGHT_CONTROLLER(6),
    /**
     * <pre>
     * 自定义控件
     * </pre>
     *
     * <code>M7_WIDGET = 7;</code>
     */
    M7_WIDGET(7),
    /**
     * <pre>
     * HMS功能
     * </pre>
     *
     * <code>M8_HMS = 8;</code>
     */
    M8_HMS(8),
    /**
     * <pre>
     * 时间同步
     * </pre>
     *
     * <code>M9_TIME_SYNC = 9;</code>
     */
    M9_TIME_SYNC(9),
    /**
     * <pre>
     * 数据传输
     * </pre>
     *
     * <code>M10_DATA_TRANSMISSION = 10;</code>
     */
    M10_DATA_TRANSMISSION(10),
    /**
     * <pre>
     * x-port控制
     * </pre>
     *
     * <code>M11_XPORT = 12;</code>
     */
    M11_XPORT(12),
    /**
     * <pre>
     * 本地升级
     * </pre>
     *
     * <code>M12_UPGRADE = 13;</code>
     */
    M12_UPGRADE(13),
    /**
     * <pre>
     * 获取灰度感知图
     * </pre>
     *
     * <code>M13_PERCEPTION = 14;</code>
     */
    M13_PERCEPTION(14),
    /**
     * <pre>
     * 获取相机码流
     * </pre>
     *
     * <code>M14_LIVE_VIEW = 15;</code>
     */
    M14_LIVE_VIEW(15),
    /**
     * <pre>
     * 航点
     * </pre>
     *
     * <code>M15_WAYPOINT_V2 = 16;</code>
     */
    M15_WAYPOINT_V2(16),
    /**
     * <pre>
     * 精准定位
     * </pre>
     *
     * <code>M16_POSITIONING = 17;</code>
     */
    M16_POSITIONING(17),
    /**
     * <pre>
     * SDK 互联互通
     * </pre>
     *
     * <code>M17_MOP_CHANNEL = 18;</code>
     */
    M17_MOP_CHANNEL(18),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 心跳
     * </pre>
     *
     * <code>M0_HEARTBEAT = 0;</code>
     */
    public static final int M0_HEARTBEAT_VALUE = 0;
    /**
     * <pre>
     * 无人机信息
     * </pre>
     *
     * <code>M1_AIRCRAFT = 1;</code>
     */
    public static final int M1_AIRCRAFT_VALUE = 1;
    /**
     * <pre>
     * 飞控订阅
     * </pre>
     *
     * <code>M2_FC_SUBSCRIPTION = 2;</code>
     */
    public static final int M2_FC_SUBSCRIPTION_VALUE = 2;
    /**
     * <pre>
     * 相机管理
     * </pre>
     *
     * <code>M3_CAMERA_MANAGER = 3;</code>
     */
    public static final int M3_CAMERA_MANAGER_VALUE = 3;
    /**
     * <pre>
     * 云台管理
     * </pre>
     *
     * <code>M4_GIMBAL_MANAGER = 4;</code>
     */
    public static final int M4_GIMBAL_MANAGER_VALUE = 4;
    /**
     * <pre>
     * 电源管理
     * </pre>
     *
     * <code>M5_POWER_MANAGEMENT = 5;</code>
     */
    public static final int M5_POWER_MANAGEMENT_VALUE = 5;
    /**
     * <pre>
     * 飞行控制
     * </pre>
     *
     * <code>M6_FLIGHT_CONTROLLER = 6;</code>
     */
    public static final int M6_FLIGHT_CONTROLLER_VALUE = 6;
    /**
     * <pre>
     * 自定义控件
     * </pre>
     *
     * <code>M7_WIDGET = 7;</code>
     */
    public static final int M7_WIDGET_VALUE = 7;
    /**
     * <pre>
     * HMS功能
     * </pre>
     *
     * <code>M8_HMS = 8;</code>
     */
    public static final int M8_HMS_VALUE = 8;
    /**
     * <pre>
     * 时间同步
     * </pre>
     *
     * <code>M9_TIME_SYNC = 9;</code>
     */
    public static final int M9_TIME_SYNC_VALUE = 9;
    /**
     * <pre>
     * 数据传输
     * </pre>
     *
     * <code>M10_DATA_TRANSMISSION = 10;</code>
     */
    public static final int M10_DATA_TRANSMISSION_VALUE = 10;
    /**
     * <pre>
     * x-port控制
     * </pre>
     *
     * <code>M11_XPORT = 12;</code>
     */
    public static final int M11_XPORT_VALUE = 12;
    /**
     * <pre>
     * 本地升级
     * </pre>
     *
     * <code>M12_UPGRADE = 13;</code>
     */
    public static final int M12_UPGRADE_VALUE = 13;
    /**
     * <pre>
     * 获取灰度感知图
     * </pre>
     *
     * <code>M13_PERCEPTION = 14;</code>
     */
    public static final int M13_PERCEPTION_VALUE = 14;
    /**
     * <pre>
     * 获取相机码流
     * </pre>
     *
     * <code>M14_LIVE_VIEW = 15;</code>
     */
    public static final int M14_LIVE_VIEW_VALUE = 15;
    /**
     * <pre>
     * 航点
     * </pre>
     *
     * <code>M15_WAYPOINT_V2 = 16;</code>
     */
    public static final int M15_WAYPOINT_V2_VALUE = 16;
    /**
     * <pre>
     * 精准定位
     * </pre>
     *
     * <code>M16_POSITIONING = 17;</code>
     */
    public static final int M16_POSITIONING_VALUE = 17;
    /**
     * <pre>
     * SDK 互联互通
     * </pre>
     *
     * <code>M17_MOP_CHANNEL = 18;</code>
     */
    public static final int M17_MOP_CHANNEL_VALUE = 18;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static CommandEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CommandEnum forNumber(int value) {
      switch (value) {
        case 0: return M0_HEARTBEAT;
        case 1: return M1_AIRCRAFT;
        case 2: return M2_FC_SUBSCRIPTION;
        case 3: return M3_CAMERA_MANAGER;
        case 4: return M4_GIMBAL_MANAGER;
        case 5: return M5_POWER_MANAGEMENT;
        case 6: return M6_FLIGHT_CONTROLLER;
        case 7: return M7_WIDGET;
        case 8: return M8_HMS;
        case 9: return M9_TIME_SYNC;
        case 10: return M10_DATA_TRANSMISSION;
        case 12: return M11_XPORT;
        case 13: return M12_UPGRADE;
        case 14: return M13_PERCEPTION;
        case 15: return M14_LIVE_VIEW;
        case 16: return M15_WAYPOINT_V2;
        case 17: return M16_POSITIONING;
        case 18: return M17_MOP_CHANNEL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CommandEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CommandEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CommandEnum>() {
            public CommandEnum findValueByNumber(int number) {
              return CommandEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return DjiProtoBuf.getDescriptor().getEnumTypes().get(0);
    }

    private static final CommandEnum[] VALUES = values();

    public static CommandEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CommandEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:CommandEnum)
  }

  /**
   * <pre>
   * 动作编号枚举
   * </pre>
   *
   * Protobuf enum {@code ActiveEnum}
   */
  public enum ActiveEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOW = 0;</code>
     */
    UNKNOW(0),
    /**
     * <pre>
     * 释放消息订阅功能
     * </pre>
     *
     * <code>M2_F0_DEINIT = 512;</code>
     */
    M2_F0_DEINIT(512),
    /**
     * <pre>
     * 初始化消息订阅功能
     * </pre>
     *
     * <code>M2_F1_INIT = 513;</code>
     */
    M2_F1_INIT(513),
    /**
     * <pre>
     * 姿态四元数(最大 200Hz)
     * </pre>
     *
     * <code>M2_F2_QUATERNION = 514;</code>
     */
    M2_F2_QUATERNION(514),
    /**
     * <pre>
     * 相对地面加速度(最大 200Hz)
     * </pre>
     *
     * <code>M2_F3_ACCELERATION_GROUND = 515;</code>
     */
    M2_F3_ACCELERATION_GROUND(515),
    /**
     * <pre>
     * 相对机体加速度(最大 200Hz)
     * </pre>
     *
     * <code>M2_F4_ACCELERATION_BODY = 516;</code>
     */
    M2_F4_ACCELERATION_BODY(516),
    /**
     * <pre>
     * 原始加速度(最大 400Hz)
     * </pre>
     *
     * <code>M2_F5_ACCELERATION_RAW = 517;</code>
     */
    M2_F5_ACCELERATION_RAW(517),
    /**
     * <pre>
     * 速度(最大 200Hz)
     * </pre>
     *
     * <code>M2_F6_VELOCITY = 518;</code>
     */
    M2_F6_VELOCITY(518),
    /**
     * <pre>
     * 融合角速度(最大 200Hz)
     * </pre>
     *
     * <code>M2_F7_ANGULAR_RATE_FUSIONED = 519;</code>
     */
    M2_F7_ANGULAR_RATE_FUSIONED(519),
    /**
     * <pre>
     * 原始角速度(最大 400Hz)
     * </pre>
     *
     * <code>M2_F8_ANGULAR_RATE_RAW = 520;</code>
     */
    M2_F8_ANGULAR_RATE_RAW(520),
    /**
     * <pre>
     * 融合高度(最大 200Hz)
     * </pre>
     *
     * <code>M2_F9_ALTITUDE_FUSED = 521;</code>
     */
    M2_F9_ALTITUDE_FUSED(521),
    /**
     * <pre>
     * 气压计高度(最大 200Hz)
     * </pre>
     *
     * <code>M2_F10_ALTITUDE_BAROMETER = 522;</code>
     */
    M2_F10_ALTITUDE_BAROMETER(522),
    /**
     * <pre>
     * Home 点高度(最大 1Hz)
     * </pre>
     *
     * <code>M2_F11_ALTITUDE_OF_HOMEPOINT = 523;</code>
     */
    M2_F11_ALTITUDE_OF_HOMEPOINT(523),
    /**
     * <pre>
     * 融合相对地面高度(最大 100Hz)
     * </pre>
     *
     * <code>M2_F12_HEIGHT_FUSION = 524;</code>
     */
    M2_F12_HEIGHT_FUSION(524),
    /**
     * <pre>
     * 相对地面高度(最大 200Hz)
     * </pre>
     *
     * <code>M2_F13_HEIGHT_RELATIVE = 525;</code>
     */
    M2_F13_HEIGHT_RELATIVE(525),
    /**
     * <pre>
     * 融合位置坐标(最大 200Hz)
     * </pre>
     *
     * <code>M2_F14_POSITION_FUSED = 526;</code>
     */
    M2_F14_POSITION_FUSED(526),
    /**
     * <pre>
     * GPS 日期,年月日(最大 5Hz)
     * </pre>
     *
     * <code>M2_F15_GPS_DATE = 527;</code>
     */
    M2_F15_GPS_DATE(527),
    /**
     * <pre>
     * GPS 时间,时分秒(最大 5Hz)
     * </pre>
     *
     * <code>M2_F16_GPS_TIME = 528;</code>
     */
    M2_F16_GPS_TIME(528),
    /**
     * <pre>
     * GPS 位置(最大 5Hz)
     * </pre>
     *
     * <code>M2_F17_GPS_POSITION = 529;</code>
     */
    M2_F17_GPS_POSITION(529),
    /**
     * <pre>
     * GPS 速度(最大 5Hz)
     * </pre>
     *
     * <code>M2_F18_GPS_VELOCITY = 530;</code>
     */
    M2_F18_GPS_VELOCITY(530),
    /**
     * <pre>
     * GPS 信息(最大 5Hz)
     * </pre>
     *
     * <code>M2_F19_GPS_DETAILS = 531;</code>
     */
    M2_F19_GPS_DETAILS(531),
    /**
     * <pre>
     * GPS 信号强度(最大 50Hz)
     * </pre>
     *
     * <code>M2_F20_GPS_SIGNAL_LEVEL = 532;</code>
     */
    M2_F20_GPS_SIGNAL_LEVEL(532),
    /**
     * <pre>
     * RTK 位置(最大 5Hz)
     * </pre>
     *
     * <code>M2_F21_RTK_POSITION = 533;</code>
     */
    M2_F21_RTK_POSITION(533),
    /**
     * <pre>
     * RTK 速度(最大 5Hz)
     * </pre>
     *
     * <code>M2_F22_RTK_VELOCITY = 534;</code>
     */
    M2_F22_RTK_VELOCITY(534),
    /**
     * <pre>
     * RTK 航向角(最大 5Hz)
     * </pre>
     *
     * <code>M2_F23_RTK_YAW = 535;</code>
     */
    M2_F23_RTK_YAW(535),
    /**
     * <pre>
     * RTK 位置信息(最大 5Hz)
     * </pre>
     *
     * <code>M2_F24_RTK_POSITION_INFO = 536;</code>
     */
    M2_F24_RTK_POSITION_INFO(536),
    /**
     * <pre>
     * RTK 航向信息(最大 5Hz)
     * </pre>
     *
     * <code>M2_F25_RTK_YAW_INFO = 537;</code>
     */
    M2_F25_RTK_YAW_INFO(537),
    /**
     * <pre>
     * 指南针信息(最大 100Hz)
     * </pre>
     *
     * <code>M2_F26_COMPASS = 538;</code>
     */
    M2_F26_COMPASS(538),
    /**
     * <pre>
     * 遥控摇杆信息(最大 50Hz)
     * </pre>
     *
     * <code>M2_F27_RC = 539;</code>
     */
    M2_F27_RC(539),
    /**
     * <pre>
     * 云台角度(最大 50Hz)
     * </pre>
     *
     * <code>M2_F28_GIMBAL_ANGLES = 540;</code>
     */
    M2_F28_GIMBAL_ANGLES(540),
    /**
     * <pre>
     * 云台状态(最大 50Hz)
     * </pre>
     *
     * <code>M2_F29_GIMBAL_STATUS = 541;</code>
     */
    M2_F29_GIMBAL_STATUS(541),
    /**
     * <pre>
     * 飞行状态(最大 50Hz)
     * </pre>
     *
     * <code>M2_F30_STATUS_FLIGHT = 542;</code>
     */
    M2_F30_STATUS_FLIGHT(542),
    /**
     * <pre>
     * 飞行模式状态(最大 50Hz)
     * </pre>
     *
     * <code>M2_F31_STATUS_DISPLAYMODE = 543;</code>
     */
    M2_F31_STATUS_DISPLAYMODE(543),
    /**
     * <pre>
     * 起落架状态(最大 50Hz)
     * </pre>
     *
     * <code>M2_F32_STATUS_LANDINGGEAR = 544;</code>
     */
    M2_F32_STATUS_LANDINGGEAR(544),
    /**
     * <pre>
     * 电机启动错误码(最大 50Hz)
     * </pre>
     *
     * <code>M2_F33_STATUS_MOTOR_START_ERROR = 545;</code>
     */
    M2_F33_STATUS_MOTOR_START_ERROR(545),
    /**
     * <pre>
     * 电池信息(最大 50Hz)
     * </pre>
     *
     * <code>M2_F34_BATTERY_INFO = 546;</code>
     */
    M2_F34_BATTERY_INFO(546),
    /**
     * <pre>
     * 设备控制信息(最大 50Hz)
     * </pre>
     *
     * <code>M2_F35_CONTROL_DEVICE = 547;</code>
     */
    M2_F35_CONTROL_DEVICE(547),
    /**
     * <pre>
     * 硬件时钟同步(400Hz)
     * </pre>
     *
     * <code>M2_F36_HARD_SYNC = 548;</code>
     */
    M2_F36_HARD_SYNC(548),
    /**
     * <pre>
     * GPS 控制等级(最大 50Hz)
     * </pre>
     *
     * <code>M2_F37_GPS_CONTROL_LEVEL = 549;</code>
     */
    M2_F37_GPS_CONTROL_LEVEL(549),
    /**
     * <pre>
     * 带标记遥控遥感信息(最大 50Hz)
     * </pre>
     *
     * <code>M2_F38_RC_WITH_FLAG_DATA = 550;</code>
     */
    M2_F38_RC_WITH_FLAG_DATA(550),
    /**
     * <pre>
     * 电调数据(最大 50Hz)
     * </pre>
     *
     * <code>M2_F39_ESC_DATA = 551;</code>
     */
    M2_F39_ESC_DATA(551),
    /**
     * <pre>
     * RTK 连接状态(最大 50Hz)
     * </pre>
     *
     * <code>M2_F40_RTK_CONNECT_STATUS = 552;</code>
     */
    M2_F40_RTK_CONNECT_STATUS(552),
    /**
     * <pre>
     * 云台控制模式(最大 50Hz)
     * </pre>
     *
     * <code>M2_F41_GIMBAL_CONTROL_MODE = 553;</code>
     */
    M2_F41_GIMBAL_CONTROL_MODE(553),
    /**
     * <pre>
     * 飞行异常信息(最大 50Hz)
     * </pre>
     *
     * <code>M2_F42_FLIGHT_ANOMALY = 554;</code>
     */
    M2_F42_FLIGHT_ANOMALY(554),
    /**
     * <pre>
     * 笛卡尔坐标位置(200Hz)
     * </pre>
     *
     * <code>M2_F43_POSITION_VO = 555;</code>
     */
    M2_F43_POSITION_VO(555),
    /**
     * <pre>
     * 避障数据(最大 100Hz)
     * </pre>
     *
     * <code>M2_F44_AVOID_DATA = 556;</code>
     */
    M2_F44_AVOID_DATA(556),
    /**
     * <pre>
     * 返航点设置状态(最大 50Hz)
     * </pre>
     *
     * <code>M2_F45_HOME_POINT_SET_STATUS = 557;</code>
     */
    M2_F45_HOME_POINT_SET_STATUS(557),
    /**
     * <pre>
     * 返航点信息(最大 50Hz)
     * </pre>
     *
     * <code>M2_F46_HOME_POINT_INFO = 558;</code>
     */
    M2_F46_HOME_POINT_INFO(558),
    /**
     * <pre>
     * 三云台信息,适用M300 RTK与M350 RTK上下三个云台的信息(最大 50Hz)
     * </pre>
     *
     * <code>M2_F47_THREE_GIMBAL_DATA = 559;</code>
     */
    M2_F47_THREE_GIMBAL_DATA(559),
    /**
     * <pre>
     * 1号电池信息(最大 50Hz)
     * </pre>
     *
     * <code>M2_F48_BATTERY_SINGLE_INFO_INDEX1 = 560;</code>
     */
    M2_F48_BATTERY_SINGLE_INFO_INDEX1(560),
    /**
     * <pre>
     * 2号电池信息(最大 50Hz)
     * </pre>
     *
     * <code>M2_F49_BATTERY_SINGLE_INFO_INDEX2 = 561;</code>
     */
    M2_F49_BATTERY_SINGLE_INFO_INDEX2(561),
    /**
     * <pre>
     * 反初始化摄像头管理模块
     * </pre>
     *
     * <code>M3_F0_DEINIT = 768;</code>
     */
    M3_F0_DEINIT(768),
    /**
     * <pre>
     * 初始化摄像头管理模块
     * </pre>
     *
     * <code>M3_F1_INIT = 769;</code>
     */
    M3_F1_INIT(769),
    /**
     * <pre>
     * 获取选定挂载位置的相机类型
     * </pre>
     *
     * <code>M3_F2_GET_CAMERA_TYPE = 770;</code>
     */
    M3_F2_GET_CAMERA_TYPE(770),
    /**
     * <pre>
     * 获取选定挂载位置的相机固件版本
     * </pre>
     *
     * <code>M3_F3_GET_FIRMWARE_VERSION = 771;</code>
     */
    M3_F3_GET_FIRMWARE_VERSION(771),
    /**
     * <pre>
     * 获取相机连接状态
     * </pre>
     *
     * <code>M3_F4_GET_CAMERA_CONNECT_STATUS = 772;</code>
     */
    M3_F4_GET_CAMERA_CONNECT_STATUS(772),
    /**
     * <pre>
     * 设置选定挂载位置相机的工作模式
     * </pre>
     *
     * <code>M3_F5_SET_MODE = 773;</code>
     */
    M3_F5_SET_MODE(773),
    /**
     * <pre>
     * 获取选定安装位置摄像头的工作模式
     * </pre>
     *
     * <code>M3_F6_GET_MODE = 774;</code>
     */
    M3_F6_GET_MODE(774),
    /**
     * <pre>
     * 设置选定挂载位置相机的拍照模式
     * </pre>
     *
     * <code>M3_F7_SET_SHOOT_PHOTO_MODE = 775;</code>
     */
    M3_F7_SET_SHOOT_PHOTO_MODE(775),
    /**
     * <pre>
     * 获取选定挂载位置相机的拍照模式
     * </pre>
     *
     * <code>M3_F8_GET_SHOOT_PHOTO_MODE = 776;</code>
     */
    M3_F8_GET_SHOOT_PHOTO_MODE(776),
    /**
     * <pre>
     * 开始拍照
     * </pre>
     *
     * <code>M3_F9_START_SHOOT_PHOTO = 777;</code>
     */
    M3_F9_START_SHOOT_PHOTO(777),
    /**
     * <pre>
     * 拍照过程中停止拍照
     * </pre>
     *
     * <code>M3_F10_STOP_SHOOT_PHOTO = 778;</code>
     */
    M3_F10_STOP_SHOOT_PHOTO(778),
    /**
     * <pre>
     * 获取相机拍摄状态
     * </pre>
     *
     * <code>M3_F11_GET_CAPTURING_STATE = 779;</code>
     */
    M3_F11_GET_CAPTURING_STATE(779),
    /**
     * <pre>
     * 在连拍模式下设置连拍张数(H20/H20T不支持)
     * </pre>
     *
     * <code>M3_F12_SET_PHOTO_BURST_COUNT = 780;</code>
     */
    M3_F12_SET_PHOTO_BURST_COUNT(780),
    /**
     * <pre>
     * 设置间隔拍摄模式的参数
     * </pre>
     *
     * <code>M3_F13_SET_PHOTO_TIME_INTERVAL_SETTINGS = 781;</code>
     */
    M3_F13_SET_PHOTO_TIME_INTERVAL_SETTINGS(781),
    /**
     * <pre>
     * 获取间隔拍摄模式的参数
     * </pre>
     *
     * <code>M3_F14_GET_PHOTO_TIME_INTERVAL_SETTINGS = 782;</code>
     */
    M3_F14_GET_PHOTO_TIME_INTERVAL_SETTINGS(782),
    /**
     * <pre>
     * 获取间隔拍摄的剩余时间
     * </pre>
     *
     * <code>M3_F15_GET_INTERVAL_SHOOTING_REMAIN_TIME = 783;</code>
     */
    M3_F15_GET_INTERVAL_SHOOTING_REMAIN_TIME(783),
    /**
     * <pre>
     * 设置选定相机挂载位置的相机对焦模式
     * </pre>
     *
     * <code>M3_F16_SET_FOCUS_MODE = 784;</code>
     */
    M3_F16_SET_FOCUS_MODE(784),
    /**
     * <pre>
     * 获取选定相机挂载位置的对焦模式
     * </pre>
     *
     * <code>M3_F17_GET_FOCUS_MODE = 785;</code>
     */
    M3_F17_GET_FOCUS_MODE(785),
    /**
     * <pre>
     * 设置选定相机挂载位置的对焦点
     * </pre>
     *
     * <code>M3_F18_SET_FOCUS_TARGET = 786;</code>
     */
    M3_F18_SET_FOCUS_TARGET(786),
    /**
     * <pre>
     * 获取选定相机挂载位置的对焦点
     * </pre>
     *
     * <code>M3_F19_GET_FOCUS_TARGET = 787;</code>
     */
    M3_F19_GET_FOCUS_TARGET(787),
    /**
     * <pre>
     * 开启选定挂载位置相机的持续光学变焦
     * </pre>
     *
     * <code>M3_F20_START_CONTINUOUS_OPTICAL_ZOOM = 788;</code>
     */
    M3_F20_START_CONTINUOUS_OPTICAL_ZOOM(788),
    /**
     * <pre>
     * 停止选定挂载位置相机的持续光学变焦
     * </pre>
     *
     * <code>M3_F21_STOP_CONTINUOUS_OPTICAL_ZOOM = 789;</code>
     */
    M3_F21_STOP_CONTINUOUS_OPTICAL_ZOOM(789),
    /**
     * <pre>
     * 设置选定挂载位置相机的光学变焦参数
     * </pre>
     *
     * <code>M3_F22_SET_OPTICAL_ZOOM_PARAM = 790;</code>
     */
    M3_F22_SET_OPTICAL_ZOOM_PARAM(790),
    /**
     * <pre>
     * 获取选定挂载位置相机的光学变焦参数
     * </pre>
     *
     * <code>M3_F23_GET_OPTICAL_ZOOM_PARAM = 791;</code>
     */
    M3_F23_GET_OPTICAL_ZOOM_PARAM(791),
    /**
     * <pre>
     * 设置指定挂载位置相机的红外变焦参数
     * </pre>
     *
     * <code>M3_F24_SET_INFRARED_ZOOM_PARAM = 792;</code>
     */
    M3_F24_SET_INFRARED_ZOOM_PARAM(792),
    /**
     * <pre>
     * 启用或禁用指定挂载位置相机的点击变焦功能
     * </pre>
     *
     * <code>M3_F25_SET_TAP_ZOOM_ENABLED = 793;</code>
     */
    M3_F25_SET_TAP_ZOOM_ENABLED(793),
    /**
     * <pre>
     * 获取指定挂载位置相机的点击变焦状态
     * </pre>
     *
     * <code>M3_F26_GET_TAP_ZOOM_ENABLED = 794;</code>
     */
    M3_F26_GET_TAP_ZOOM_ENABLED(794),
    /**
     * <pre>
     * 设置指定挂载位置相机的点击变焦倍数
     * </pre>
     *
     * <code>M3_F27_SET_TAP_ZOOM_MULTIPLIER = 795;</code>
     */
    M3_F27_SET_TAP_ZOOM_MULTIPLIER(795),
    /**
     * <pre>
     * 获取指定挂载位置相机的点击变焦倍数
     * </pre>
     *
     * <code>M3_F28_GET_TAP_ZOOM_MULTIPLIER = 796;</code>
     */
    M3_F28_GET_TAP_ZOOM_MULTIPLIER(796),
    /**
     * <pre>
     * 设置指定挂载位置相机的点击变焦点
     * </pre>
     *
     * <code>M3_F29_TAP_ZOOM_AT_TARGET = 797;</code>
     */
    M3_F29_TAP_ZOOM_AT_TARGET(797),
    /**
     * <pre>
     * 获取相机焦距环的值范围
     * </pre>
     *
     * <code>M3_F30_GET_FOCUS_RING_RANGE = 798;</code>
     */
    M3_F30_GET_FOCUS_RING_RANGE(798),
    /**
     * <pre>
     * 设置相机焦距环的值
     * </pre>
     *
     * <code>M3_F31_SET_FOCUS_RING_VALUE = 799;</code>
     */
    M3_F31_SET_FOCUS_RING_VALUE(799),
    /**
     * <pre>
     * 获取相机焦距环的值
     * </pre>
     *
     * <code>M3_F32_GET_FOCUS_RING_VALUE = 800;</code>
     */
    M3_F32_GET_FOCUS_RING_VALUE(800),
    /**
     * <pre>
     * 设置选定的挂载位置相机的曝光模式
     * </pre>
     *
     * <code>M3_F33_SET_EXPOSURE_MODE = 801;</code>
     */
    M3_F33_SET_EXPOSURE_MODE(801),
    /**
     * <pre>
     * 获取选定的挂载位置相机的曝光模式
     * </pre>
     *
     * <code>M3_F34_GET_EXPOSURE_MODE = 802;</code>
     */
    M3_F34_GET_EXPOSURE_MODE(802),
    /**
     * <pre>
     * 设置选定的挂载位置相机的 ISO 值
     * </pre>
     *
     * <code>M3_F35_SET_ISO = 803;</code>
     */
    M3_F35_SET_ISO(803),
    /**
     * <pre>
     * 获取选定的挂载位置相机的 ISO 值
     * </pre>
     *
     * <code>M3_F36_GET_ISO = 804;</code>
     */
    M3_F36_GET_ISO(804),
    /**
     * <pre>
     * 设置选定的挂载位置相机的光圈值
     * </pre>
     *
     * <code>M3_F37_SET_APERTURE = 805;</code>
     */
    M3_F37_SET_APERTURE(805),
    /**
     * <pre>
     * 获取选定的挂载位置相机的光圈值
     * </pre>
     *
     * <code>M3_F38_GET_APERTURE = 806;</code>
     */
    M3_F38_GET_APERTURE(806),
    /**
     * <pre>
     * 设置指定挂载位置相机的快门速度
     * </pre>
     *
     * <code>M3_F39_SET_SHUTTER_SPEED = 807;</code>
     */
    M3_F39_SET_SHUTTER_SPEED(807),
    /**
     * <pre>
     * 获取指定挂载位置相机的快门速度
     * </pre>
     *
     * <code>M3_F40_GET_SHUTTER_SPEED = 808;</code>
     */
    M3_F40_GET_SHUTTER_SPEED(808),
    /**
     * <pre>
     * 设置指定挂载位置相机的曝光补偿
     * </pre>
     *
     * <code>M3_F41_SET_EXPOSURE_COMPENSATION = 809;</code>
     */
    M3_F41_SET_EXPOSURE_COMPENSATION(809),
    /**
     * <pre>
     * 获取指定挂载位置相机的曝光补偿
     * </pre>
     *
     * <code>M3_F42_GET_EXPOSURE_COMPENSATION = 810;</code>
     */
    M3_F42_GET_EXPOSURE_COMPENSATION(810),
    /**
     * <pre>
     * 设置自动曝光锁定
     * </pre>
     *
     * <code>M3_F43_SET_AE_LOCK_ENABLED = 811;</code>
     */
    M3_F43_SET_AE_LOCK_ENABLED(811),
    /**
     * <pre>
     * 获取自动曝光锁定状态
     * </pre>
     *
     * <code>M3_F44_GET_AE_LOCK_ENABLED = 812;</code>
     */
    M3_F44_GET_AE_LOCK_ENABLED(812),
    /**
     * <pre>
     * 重置相机设置
     * </pre>
     *
     * <code>M3_F45_RESET_CAMERA_SETTINGS = 813;</code>
     */
    M3_F45_RESET_CAMERA_SETTINGS(813),
    /**
     * <pre>
     * 选定挂载位置相机开始录像
     * </pre>
     *
     * <code>M3_F46_START_RECORD_VIDEO = 814;</code>
     */
    M3_F46_START_RECORD_VIDEO(814),
    /**
     * <pre>
     * 选定挂载位置相机停止录像
     * </pre>
     *
     * <code>M3_F47_STOP_RECORD_VIDEO = 815;</code>
     */
    M3_F47_STOP_RECORD_VIDEO(815),
    /**
     * <pre>
     * 获取相机录像状态
     * </pre>
     *
     * <code>M3_F48_GET_RECORDING_STATE = 816;</code>
     */
    M3_F48_GET_RECORDING_STATE(816),
    /**
     * <pre>
     * 获取录像时长
     * </pre>
     *
     * <code>M3_F49_GET_RECORDING_TIME = 817;</code>
     */
    M3_F49_GET_RECORDING_TIME(817),
    /**
     * <pre>
     * 获取相机流媒体数据源范围
     * </pre>
     *
     * <code>M3_F50_GET_STREAM_SOURCE_RANGE = 818;</code>
     */
    M3_F50_GET_STREAM_SOURCE_RANGE(818),
    /**
     * <pre>
     * 选择相机流媒体数据源
     * </pre>
     *
     * <code>M3_F51_SET_STREAM_SOURCE = 819;</code>
     */
    M3_F51_SET_STREAM_SOURCE(819),
    /**
     * <pre>
     * 获取照片存储格式范围
     * </pre>
     *
     * <code>M3_F52_GET_PHOTO_STORAGE_FORMAT_RANGE = 820;</code>
     */
    M3_F52_GET_PHOTO_STORAGE_FORMAT_RANGE(820),
    /**
     * <pre>
     * 设置照片存储格式
     * </pre>
     *
     * <code>M3_F53_SET_PHOTO_FORMAT = 821;</code>
     */
    M3_F53_SET_PHOTO_FORMAT(821),
    /**
     * <pre>
     * 获取照片存储格式
     * </pre>
     *
     * <code>M3_F54_GET_PHOTO_FORMAT = 822;</code>
     */
    M3_F54_GET_PHOTO_FORMAT(822),
    /**
     * <pre>
     * 获取视频存储格式范围
     * </pre>
     *
     * <code>M3_F55_GET_VIDEO_FORMAT_RANGE = 823;</code>
     */
    M3_F55_GET_VIDEO_FORMAT_RANGE(823),
    /**
     * <pre>
     * 设置视频存储格式
     * </pre>
     *
     * <code>M3_F56_SET_VIDEO_STORAGE_FORMAT = 824;</code>
     */
    M3_F56_SET_VIDEO_STORAGE_FORMAT(824),
    /**
     * <pre>
     * 获取视频存储格式
     * </pre>
     *
     * <code>M3_F57_GET_VIDEO_STORAGE_FORMAT = 825;</code>
     */
    M3_F57_GET_VIDEO_STORAGE_FORMAT(825),
    /**
     * <pre>
     * 获取照片比例范围
     * </pre>
     *
     * <code>M3_F58_GET_PHOTO_RATIO_RANGE = 826;</code>
     */
    M3_F58_GET_PHOTO_RATIO_RANGE(826),
    /**
     * <pre>
     * 设置照片比例
     * </pre>
     *
     * <code>M3_F59_SET_PHOTO_RATIO = 827;</code>
     */
    M3_F59_SET_PHOTO_RATIO(827),
    /**
     * <pre>
     * 获取照片比例
     * </pre>
     *
     * <code>M3_F60_GET_PHOTO_RATIO = 828;</code>
     */
    M3_F60_GET_PHOTO_RATIO(828),
    /**
     * <pre>
     * 获取视频分辨率和帧率
     * </pre>
     *
     * <code>M3_F61_GET_VIDEO_RESOLUTION_FRAME_RATE = 829;</code>
     */
    M3_F61_GET_VIDEO_RESOLUTION_FRAME_RATE(829),
    /**
     * <pre>
     * 获取夜景模式范围
     * </pre>
     *
     * <code>M3_F62_GET_NIGHT_SCENE_MODE_RANGE = 830;</code>
     */
    M3_F62_GET_NIGHT_SCENE_MODE_RANGE(830),
    /**
     * <pre>
     * 设置夜景模式
     * </pre>
     *
     * <code>M3_F63_SET_NIGHT_SCENE_MODE = 831;</code>
     */
    M3_F63_SET_NIGHT_SCENE_MODE(831),
    /**
     * <pre>
     * 获取夜景模式
     * </pre>
     *
     * <code>M3_F64_GET_NIGHT_SCENE_MODE = 832;</code>
     */
    M3_F64_GET_NIGHT_SCENE_MODE(832),
    /**
     * <pre>
     * 获取拍摄或录像时流媒体数据源的存储范围
     * </pre>
     *
     * <code>M3_F65_GET_STREAM_STORAGE_RANGE = 833;</code>
     */
    M3_F65_GET_STREAM_STORAGE_RANGE(833),
    /**
     * <pre>
     * 选择要存储的拍摄或录像流
     * </pre>
     *
     * <code>M3_F66_SET_CAPTURE_RECORDING_STREAMS = 834;</code>
     */
    M3_F66_SET_CAPTURE_RECORDING_STREAMS(834),
    /**
     * <pre>
     * 获取要存储的拍摄或录像流
     * </pre>
     *
     * <code>M3_F67_GET_CAPTURE_RECORDING_STREAMS = 835;</code>
     */
    M3_F67_GET_CAPTURE_RECORDING_STREAMS(835),
    /**
     * <pre>
     * 启用/禁用同步分屏缩放功能
     * </pre>
     *
     * <code>M3_F68_SET_SYNCHRONIZED_SPLIT_SCREEN_ZOOM_ENABLED = 836;</code>
     */
    M3_F68_SET_SYNCHRONIZED_SPLIT_SCREEN_ZOOM_ENABLED(836),
    /**
     * <pre>
     * 设置目录或文件的后缀名
     * </pre>
     *
     * <code>M3_F69_SET_CUSTOM_EXPAND_NAME = 837;</code>
     */
    M3_F69_SET_CUSTOM_EXPAND_NAME(837),
    /**
     * <pre>
     * 获取最近目录或文件名的自定义后缀
     * </pre>
     *
     * <code>M3_F70_GET_CUSTOM_EXPAND_NAME = 838;</code>
     */
    M3_F70_GET_CUSTOM_EXPAND_NAME(838),
    /**
     * <pre>
     * 下载选定的相机媒体文件列表
     * </pre>
     *
     * <code>M3_F71_DOWNLOAD_FILE_LIST = 839;</code>
     */
    M3_F71_DOWNLOAD_FILE_LIST(839),
    /**
     * <pre>
     * 分块下载选定的相机媒体文件列表
     * </pre>
     *
     * <code>M3_F72_DOWNLOAD_FILE_LIST_BY_SLICES = 840;</code>
     */
    M3_F72_DOWNLOAD_FILE_LIST_BY_SLICES(840),
    /**
     * <pre>
     * 注册选定相机下载文件数据的回调
     * </pre>
     *
     * <code>M3_F73_REG_DOWNLOAD_FILE_DATA_CALLBACK = 841;</code>
     */
    M3_F73_REG_DOWNLOAD_FILE_DATA_CALLBACK(841),
    /**
     * <pre>
     * 通过文件索引下载选定的相机媒体文件
     * </pre>
     *
     * <code>M3_F74_DOWNLOAD_FILE_BY_INDEX = 842;</code>
     */
    M3_F74_DOWNLOAD_FILE_BY_INDEX(842),
    /**
     * <pre>
     * 通过文件索引和文件类型下载选定的相机媒体文件(仅支持L2相机)
     * </pre>
     *
     * <code>M3_F75_DOWNLOAD_SUB_FILE_BY_INDEX_AND_SUB_TYPE = 843;</code>
     */
    M3_F75_DOWNLOAD_SUB_FILE_BY_INDEX_AND_SUB_TYPE(843),
    /**
     * <pre>
     * 下载媒体文件前获取媒体文件下载权限
     * </pre>
     *
     * <code>M3_F76_OBTAIN_DOWNLOADER_RIGHTS = 844;</code>
     */
    M3_F76_OBTAIN_DOWNLOADER_RIGHTS(844),
    /**
     * <pre>
     * 下载媒体文件后释放媒体文件下载权限
     * </pre>
     *
     * <code>M3_F77_RELEASE_DOWNLOADER_RIGHTS = 845;</code>
     */
    M3_F77_RELEASE_DOWNLOADER_RIGHTS(845),
    /**
     * <pre>
     * 格式化 SD 卡
     * </pre>
     *
     * <code>M3_F78_FORMAT_STORAGE = 846;</code>
     */
    M3_F78_FORMAT_STORAGE(846),
    /**
     * <pre>
     * 获取 SD 卡的存储信息
     * </pre>
     *
     * <code>M3_F79_GET_STORAGE_INFO = 847;</code>
     */
    M3_F79_GET_STORAGE_INFO(847),
    /**
     * <pre>
     * 通过文件索引删除选定的相机媒体文件
     * </pre>
     *
     * <code>M3_F80_DELETE_FILE_BY_INDEX = 848;</code>
     */
    M3_F80_DELETE_FILE_BY_INDEX(848),
    /**
     * <pre>
     * 获取选定挂载位置的相机激光测距信息
     * </pre>
     *
     * <code>M3_F81_GET_LASER_RANGING_INFO = 849;</code>
     */
    M3_F81_GET_LASER_RANGING_INFO(849),
    /**
     * <pre>
     * 设置选定挂载位置的相机点温度坐标
     * </pre>
     *
     * <code>M3_F82_SET_POINT_THERMOMETRY_COORDINATE = 850;</code>
     */
    M3_F82_SET_POINT_THERMOMETRY_COORDINATE(850),
    /**
     * <pre>
     * 获取点温度结果
     * </pre>
     *
     * <code>M3_F83_GET_POINT_THERMOMETRY_DATA = 851;</code>
     */
    M3_F83_GET_POINT_THERMOMETRY_DATA(851),
    /**
     * <pre>
     * 设置选定挂载位置的相机区域温度坐标
     * </pre>
     *
     * <code>M3_F84_SET_AREA_THERMOMETRY_COORDINATE = 852;</code>
     */
    M3_F84_SET_AREA_THERMOMETRY_COORDINATE(852),
    /**
     * <pre>
     * 获取区域温度结果
     * </pre>
     *
     * <code>M3_F85_GET_AREA_THERMOMETRY_DATA = 853;</code>
     */
    M3_F85_GET_AREA_THERMOMETRY_DATA(853),
    /**
     * <pre>
     * 设置 FFC 模式
     * </pre>
     *
     * <code>M3_F86_SET_FFC_MODE = 854;</code>
     */
    M3_F86_SET_FFC_MODE(854),
    /**
     * <pre>
     * 触发一次 FFC
     * </pre>
     *
     * <code>M3_F87_TRIGGER_FFC = 855;</code>
     */
    M3_F87_TRIGGER_FFC(855),
    /**
     * <pre>
     * 设置红外相机增益模式
     * </pre>
     *
     * <code>M3_F88_SET_INFRARED_CAMERA_GAIN_MODE = 856;</code>
     */
    M3_F88_SET_INFRARED_CAMERA_GAIN_MODE(856),
    /**
     * <pre>
     * 获取红外相机的温度范围
     * </pre>
     *
     * <code>M3_F89_GET_INFRARED_CAMERA_GAIN_MODE_TEMPERATURE_RANGE = 857;</code>
     */
    M3_F89_GET_INFRARED_CAMERA_GAIN_MODE_TEMPERATURE_RANGE(857),
    /**
     * <pre>
     * 设置相机测光模式
     * </pre>
     *
     * <code>M3_F90_SET_METERING_MODE = 858;</code>
     */
    M3_F90_SET_METERING_MODE(858),
    /**
     * <pre>
     * 获取相机测光模式
     * </pre>
     *
     * <code>M3_F91_GET_METERING_MODE = 859;</code>
     */
    M3_F91_GET_METERING_MODE(859),
    /**
     * <pre>
     * 获取测光点范围
     * </pre>
     *
     * <code>M3_F92_GET_METERING_POINT_REGION_RANGE = 860;</code>
     */
    M3_F92_GET_METERING_POINT_REGION_RANGE(860),
    /**
     * <pre>
     * 设置测光点
     * </pre>
     *
     * <code>M3_F93_SET_METERING_POINT = 861;</code>
     */
    M3_F93_SET_METERING_POINT(861),
    /**
     * <pre>
     * 获取当前测光点
     * </pre>
     *
     * <code>M3_F94_GET_METERING_POINT = 862;</code>
     */
    M3_F94_GET_METERING_POINT(862),
    /**
     * <pre>
     * 开启当前相机挂载位置的点云录制(仅支持L2相机)
     * </pre>
     *
     * <code>M3_F95_START_RECORD_POINT_CLOUD = 863;</code>
     */
    M3_F95_START_RECORD_POINT_CLOUD(863),
    /**
     * <pre>
     * 停止当前相机挂载位置的点云录制(仅支持L2相机)
     * </pre>
     *
     * <code>M3_F96_STOP_RECORD_POINT_CLOUD = 864;</code>
     */
    M3_F96_STOP_RECORD_POINT_CLOUD(864),
    /**
     * <pre>
     * 反初始化云台管理模块
     * </pre>
     *
     * <code>M4_F0_DEINIT = 1024;</code>
     */
    M4_F0_DEINIT(1024),
    /**
     * <pre>
     * 初始化云台管理模块
     * </pre>
     *
     * <code>M4_F1_INIT = 1025;</code>
     */
    M4_F1_INIT(1025),
    /**
     * <pre>
     * 设置云台工作模式
     * </pre>
     *
     * <code>M4_F2_SET_MODE = 1026;</code>
     */
    M4_F2_SET_MODE(1026),
    /**
     * <pre>
     * 重置云台的俯仰和偏航角
     * </pre>
     *
     * <code>M4_F3_RESET = 1027;</code>
     */
    M4_F3_RESET(1027),
    /**
     * <pre>
     * 旋转云台角度
     * </pre>
     *
     * <code>M4_F4_ROTATE = 1028;</code>
     */
    M4_F4_ROTATE(1028),
    /**
     * <pre>
     * 启用或禁用云台俯仰限位扩展
     * </pre>
     *
     * <code>M4_F5_SET_PITCH_RANGE_EXTENSION_ENABLED = 1029;</code>
     */
    M4_F5_SET_PITCH_RANGE_EXTENSION_ENABLED(1029),
    /**
     * <pre>
     * 设置云台控制器的最大速度百分比
     * </pre>
     *
     * <code>M4_F6_SET_CONTROLLER_MAX_SPEED_PERCENTAGE = 1030;</code>
     */
    M4_F6_SET_CONTROLLER_MAX_SPEED_PERCENTAGE(1030),
    /**
     * <pre>
     * 设置云台控制器的平滑因子
     * </pre>
     *
     * <code>M4_F7_SET_CONTROLLER_SMOOTH_FACTOR = 1031;</code>
     */
    M4_F7_SET_CONTROLLER_SMOOTH_FACTOR(1031),
    /**
     * <pre>
     * 恢复云台的出厂设置
     * </pre>
     *
     * <code>M4_F8_RESTORE_FACTORY_SETTINGS = 1032;</code>
     */
    M4_F8_RESTORE_FACTORY_SETTINGS(1032),
    /**
     * <pre>
     * 反初始化电源管理模块
     * </pre>
     *
     * <code>M5_F1_DEINIT = 1280;</code>
     */
    M5_F1_DEINIT(1280),
    /**
     * <pre>
     * 初始化电源管理模块
     * </pre>
     *
     * <code>M5_F1_INIT = 1281;</code>
     */
    M5_F1_INIT(1281),
    /**
     * <pre>
     * 在阻塞模式下从飞机施加高功率
     * </pre>
     *
     * <code>M5_F2_APPLY_HIGH_POWER_SYNC = 1282;</code>
     */
    M5_F2_APPLY_HIGH_POWER_SYNC(1282),
    /**
     * <pre>
     * 用于设置高功率应用引脚的电平状态的注册回调函数
     * </pre>
     *
     * <code>M5_F3_REG_WRITE_HIGH_POWER_APPLY_PIN_CALLBACK = 1283;</code>
     */
    M5_F3_REG_WRITE_HIGH_POWER_APPLY_PIN_CALLBACK(1283),
    /**
     * <pre>
     * 用于通知payload飞机即将关机并获取payload是否准备好关机状态的注册回调函数
     * </pre>
     *
     * <code>M5_F4_REG_POWER_OFF_NOTIFICATION_CALLBACK = 1284;</code>
     */
    M5_F4_REG_POWER_OFF_NOTIFICATION_CALLBACK(1284),
    /**
     * <pre>
     * 反初始化飞行控制模块
     * </pre>
     *
     * <code>M6_F0_DEINIT = 1536;</code>
     */
    M6_F0_DEINIT(1536),
    /**
     * <pre>
     * 初始化飞行控制模块
     * </pre>
     *
     * <code>M6_F1_INIT = 1537;</code>
     */
    M6_F1_INIT(1537),
    /**
     * <pre>
     * 启用/禁用 RTK 位置功能
     * </pre>
     *
     * <code>M6_F2_SET_TRK_POSITION_ENABLE = 1538;</code>
     */
    M6_F2_SET_TRK_POSITION_ENABLE(1538),
    /**
     * <pre>
     * 获取 RTK 启用状态
     * </pre>
     *
     * <code>M6_F3_GET_TRK_POSITION_ENABLE = 1539;</code>
     */
    M6_F3_GET_TRK_POSITION_ENABLE(1539),
    /**
     * <pre>
     * 设置失联动作
     * </pre>
     *
     * <code>M6_F4_SET_RC_LOST_ACTION = 1540;</code>
     */
    M6_F4_SET_RC_LOST_ACTION(1540),
    /**
     * <pre>
     * 获取遥控器失联动作(悬停/降落/返回)
     * </pre>
     *
     * <code>M6_F5_GET_RC_LOST_ACTION = 1541;</code>
     */
    M6_F5_GET_RC_LOST_ACTION(1541),
    /**
     * <pre>
     * 启用/禁用水平视觉障碍物避让(前、后、左、右)
     * </pre>
     *
     * <code>M6_F6_SET_HORIZONTAL_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1542;</code>
     */
    M6_F6_SET_HORIZONTAL_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS(1542),
    /**
     * <pre>
     * 获取水平视觉障碍物避让(前、后、左、右)的开关状态
     * </pre>
     *
     * <code>M6_F7_GET_HORIZONTAL_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1543;</code>
     */
    M6_F7_GET_HORIZONTAL_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS(1543),
    /**
     * <pre>
     * 开启/关闭水平雷达避障功能
     * </pre>
     *
     * <code>M6_F8_SET_HORIZONTAL_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1544;</code>
     */
    M6_F8_SET_HORIZONTAL_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS(1544),
    /**
     * <pre>
     * 获取水平雷达避障功能的状态
     * </pre>
     *
     * <code>M6_F9_GET_HORIZONTAL_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1545;</code>
     */
    M6_F9_GET_HORIZONTAL_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS(1545),
    /**
     * <pre>
     * 开启/关闭上视避障功能
     * </pre>
     *
     * <code>M6_F10_SET_UPWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1546;</code>
     */
    M6_F10_SET_UPWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS(1546),
    /**
     * <pre>
     * 获取上视避障功能的状态
     * </pre>
     *
     * <code>M6_F11_GET_UPWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1547;</code>
     */
    M6_F11_GET_UPWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS(1547),
    /**
     * <pre>
     * 开启/关闭向上雷达避障功能
     * </pre>
     *
     * <code>M6_F12_SET_UPWARDS_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1548;</code>
     */
    M6_F12_SET_UPWARDS_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS(1548),
    /**
     * <pre>
     * 获取向上雷达避障功能的状态
     * </pre>
     *
     * <code>M6_F13_GET_UPWARDS_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1549;</code>
     */
    M6_F13_GET_UPWARDS_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS(1549),
    /**
     * <pre>
     * 开启/关闭向下视觉避障功能
     * </pre>
     *
     * <code>M6_F14_SET_DOWNWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1550;</code>
     */
    M6_F14_SET_DOWNWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS(1550),
    /**
     * <pre>
     * 获取向下视觉避障功能的状态
     * </pre>
     *
     * <code>M6_F15_GET_DOWNWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1551;</code>
     */
    M6_F15_GET_DOWNWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS(1551),
    /**
     * <pre>
     * 紧急制动飞行
     * </pre>
     *
     * <code>M6_F16_ARREST_FLYING = 1552;</code>
     */
    M6_F16_ARREST_FLYING(1552),
    /**
     * <pre>
     * 退出紧急制动状态
     * </pre>
     *
     * <code>M6_F17_CANCEL_ARREST_FLYING = 1553;</code>
     */
    M6_F17_CANCEL_ARREST_FLYING(1553),
    /**
     * <pre>
     * 无人机在地面时启动电机
     * </pre>
     *
     * <code>M6_F18_TURN_ON_MOTORS = 1554;</code>
     */
    M6_F18_TURN_ON_MOTORS(1554),
    /**
     * <pre>
     * 无人机在地面时关闭电机
     * </pre>
     *
     * <code>M6_F19_TURN_OFF_MOTORS = 1555;</code>
     */
    M6_F19_TURN_OFF_MOTORS(1555),
    /**
     * <pre>
     * 在任何情况下紧急停止电机
     * </pre>
     *
     * <code>M6_F20_EMERGENCY_STOP_OFF = 1556;</code>
     */
    M6_F20_EMERGENCY_STOP_OFF(1556),
    /**
     * <pre>
     * 当无人机在地面时请求起飞
     * </pre>
     *
     * <code>M6_F21_START_TASK_OFF = 1557;</code>
     */
    M6_F21_START_TASK_OFF(1557),
    /**
     * <pre>
     * 当无人机在空中时请求降落
     * </pre>
     *
     * <code>M6_F22_START_LANDING = 1558;</code>
     */
    M6_F22_START_LANDING(1558),
    /**
     * <pre>
     * 当无人机正在降落时请求取消降落
     * </pre>
     *
     * <code>M6_F23_CANCEL_LANDING = 1559;</code>
     */
    M6_F23_CANCEL_LANDING(1559),
    /**
     * <pre>
     * 当无人机距离地面0.7米时确认着陆
     * </pre>
     *
     * <code>M6_F24_START_CONFIRM_LANDING = 1560;</code>
     */
    M6_F24_START_CONFIRM_LANDING(1560),
    /**
     * <pre>
     * 在任何情况下都强制着陆
     * </pre>
     *
     * <code>M6_F25_START_FORCE_LANDING = 1561;</code>
     */
    M6_F25_START_FORCE_LANDING(1561),
    /**
     * <pre>
     * 设置自定义 GPS（非 RTK）的 home 点位置
     * </pre>
     *
     * <code>M6_F26_SET_HOME_LOCATION_USING_GPS_COORDINATES = 1562;</code>
     */
    M6_F26_SET_HOME_LOCATION_USING_GPS_COORDINATES(1562),
    /**
     * <pre>
     * 使用当前飞机的 GPS（非 RTK）位置设置 home 点位置
     * </pre>
     *
     * <code>M6_F27_SET_HOME_LOCATION_USING_CURRENT_AIRCRAFT_LOCATION = 1563;</code>
     */
    M6_F27_SET_HOME_LOCATION_USING_CURRENT_AIRCRAFT_LOCATION(1563),
    /**
     * <pre>
     * 设置返航高度
     * </pre>
     *
     * <code>M6_F28_SET_GO_HOME_ALTITUDE = 1564;</code>
     */
    M6_F28_SET_GO_HOME_ALTITUDE(1564),
    /**
     * <pre>
     * 获取返航高度
     * </pre>
     *
     * <code>M6_F29_GET_GO_HOME_ALTITUDE = 1565;</code>
     */
    M6_F29_GET_GO_HOME_ALTITUDE(1565),
    /**
     * <pre>
     * 获取国家码
     * </pre>
     *
     * <code>M6_F30_GET_COUNTRY_CODE = 1566;</code>
     */
    M6_F30_GET_COUNTRY_CODE(1566),
    /**
     * <pre>
     * 当无人机在空中时，请求返航动作
     * </pre>
     *
     * <code>M6_F31_START_GO_HOME = 1567;</code>
     */
    M6_F31_START_GO_HOME(1567),
    /**
     * <pre>
     * 在无人机返航时，请求取消返航动作
     * </pre>
     *
     * <code>M6_F32_CANCEL_GO_HOME = 1568;</code>
     */
    M6_F32_CANCEL_GO_HOME(1568),
    /**
     * <pre>
     * 获取无人机的摇杆控制权限
     * </pre>
     *
     * <code>M6_F33_OBTAIN_JOYSTICK_CTRL_AUTHORITY = 1569;</code>
     */
    M6_F33_OBTAIN_JOYSTICK_CTRL_AUTHORITY(1569),
    /**
     * <pre>
     * 释放无人机摇杆控制权限
     * </pre>
     *
     * <code>M6_F34_RELEASE_JOYSTICK_CTRL_AUTHORITY = 1570;</code>
     */
    M6_F34_RELEASE_JOYSTICK_CTRL_AUTHORITY(1570),
    /**
     * <pre>
     * 使用回调函数订阅摇杆控制权限切换事件
     * </pre>
     *
     * <code>M6_F35_REG_JOYSTICK_CTRL_AUTHORITY_EVENT_CALLBACK = 1571;</code>
     */
    M6_F35_REG_JOYSTICK_CTRL_AUTHORITY_EVENT_CALLBACK(1571),
    /**
     * <pre>
     * 请求执行摇杆动作
     * </pre>
     *
     * <code>M6_F36_EXECUTE_JOYSTICK_ACTION = 1572;</code>
     */
    M6_F36_EXECUTE_JOYSTICK_ACTION(1572),
    /**
     * <pre>
     * 请求紧急制动动作
     * </pre>
     *
     * <code>M6_F37_EXECUTE_EMERGENCY_BRAKE_ACTION = 1573;</code>
     */
    M6_F37_EXECUTE_EMERGENCY_BRAKE_ACTION(1573),
    /**
     * <pre>
     * 请求取消紧急制动动作
     * </pre>
     *
     * <code>M6_F38_CANCEL_EMERGENCY_BRAKE_ACTION = 1574;</code>
     */
    M6_F38_CANCEL_EMERGENCY_BRAKE_ACTION(1574),
    /**
     * <pre>
     * 获取飞机的通用信息
     * </pre>
     *
     * <code>M6_F39_GET_GENERA_INFO = 1575;</code>
     */
    M6_F39_GET_GENERA_INFO(1575),
    /**
     * <pre>
     * 启动/禁用失联动作状态
     * </pre>
     *
     * <code>M6_F40_SET_RC_LOST_ACTION_ENABLE_STATUS = 1576;</code>
     */
    M6_F40_SET_RC_LOST_ACTION_ENABLE_STATUS(1576),
    /**
     * <pre>
     * 获取失联动作状态
     * </pre>
     *
     * <code>M6_F41_GET_ENABEL_RC_LOST_ACTION_STATUS = 1577;</code>
     */
    M6_F41_GET_ENABEL_RC_LOST_ACTION_STATUS(1577),
    /**
     * <pre>
     * 注册回调函数触发 FTS 事件
     * </pre>
     *
     * <code>M6_F42_REG_TRIGGER_FTS_EVENT_CALLBACK = 1578;</code>
     */
    M6_F42_REG_TRIGGER_FTS_EVENT_CALLBACK(1578),
    /**
     * <pre>
     * 初始化自定义控件模块
     * </pre>
     *
     * <code>M7_F1_INIT = 1793;</code>
     */
    M7_F1_INIT(1793),
    /**
     * <pre>
     * 注册配置文件默认的路径
     * </pre>
     *
     * <code>M7_F2_REG_DEFAULT_UI_CONFIG_BY_DIR_PATH = 1794;</code>
     */
    M7_F2_REG_DEFAULT_UI_CONFIG_BY_DIR_PATH(1794),
    /**
     * <pre>
     * 注册配置文件的路径
     * </pre>
     *
     * <code>M7_F3_REG_UI_CONFIG_BY_DIR_PATH = 1795;</code>
     */
    M7_F3_REG_UI_CONFIG_BY_DIR_PATH(1795),
    /**
     * <pre>
     * 注册二进制配置文件默认的路径
     * </pre>
     *
     * <code>M7_F4_REG_DEFAULT_UI_BY_BINARY_ARRAY = 1796;</code>
     */
    M7_F4_REG_DEFAULT_UI_BY_BINARY_ARRAY(1796),
    /**
     * <pre>
     * 注册控件配置信息
     * </pre>
     *
     * <code>M7_F5_REG_UI_CONFIG_BY_BINARY_ARRAY = 1797;</code>
     */
    M7_F5_REG_UI_CONFIG_BY_BINARY_ARRAY(1797),
    /**
     * <pre>
     * 注册处理函数列表
     * </pre>
     *
     * <code>M7_F6_REG_HANDLER_LIST = 1798;</code>
     */
    M7_F6_REG_HANDLER_LIST(1798),
    /**
     * <pre>
     * 向移动端App的浮窗发送消息
     * </pre>
     *
     * <code>M7_F7_FLOATION_WINDOW_SHOW_MESSAGE = 1799;</code>
     */
    M7_F7_FLOATION_WINDOW_SHOW_MESSAGE(1799),
    /**
     * <pre>
     * 获取信息发送通道的状态
     * </pre>
     *
     * <code>M7_F8_GET_CHANNELL_STATE = 1800;</code>
     */
    M7_F8_GET_CHANNELL_STATE(1800),
    /**
     * <pre>
     * 获取扬声器状态
     * </pre>
     *
     * <code>M7_F9_GET_SPEAKER_STATE = 1801;</code>
     */
    M7_F9_GET_SPEAKER_STATE(1801),
    /**
     * <pre>
     * 设置扬声器工作模式
     * </pre>
     *
     * <code>M7_F10_SET_WORK_MODE = 1802;</code>
     */
    M7_F10_SET_WORK_MODE(1802),
    /**
     * <pre>
     * 开始播放
     * </pre>
     *
     * <code>M7_F11_START_PLAY = 1803;</code>
     */
    M7_F11_START_PLAY(1803),
    /**
     * <pre>
     * 停止播放
     * </pre>
     *
     * <code>M7_F12_STOP_PLAY = 1804;</code>
     */
    M7_F12_STOP_PLAY(1804),
    /**
     * <pre>
     * 设置播放模式
     * </pre>
     *
     * <code>M7_F13_SET_PLAY_MODE = 1805;</code>
     */
    M7_F13_SET_PLAY_MODE(1805),
    /**
     * <pre>
     * 设置音量
     * </pre>
     *
     * <code>M7_F14_SET_VOLUME = 1806;</code>
     */
    M7_F14_SET_VOLUME(1806),
    /**
     * <pre>
     * 接收文本信息
     * </pre>
     *
     * <code>M7_F15_RECEIVE_TTS_DATA = 1807;</code>
     */
    M7_F15_RECEIVE_TTS_DATA(1807),
    /**
     * <pre>
     * 接收音频信息
     * </pre>
     *
     * <code>M7_F16_RECEIVE_AUDIO_DATA = 1808;</code>
     */
    M7_F16_RECEIVE_AUDIO_DATA(1808),
    /**
     * <pre>
     * 反初始化 M8 模块
     * </pre>
     *
     * <code>M8_F0_DEINIT = 2048;</code>
     */
    M8_F0_DEINIT(2048),
    /**
     * <pre>
     * 初始化 M8 模块
     * </pre>
     *
     * <code>M8_F1_INIT = 2049;</code>
     */
    M8_F1_INIT(2049),
    /**
     * <pre>
     * 注册回调以获取 M8 信息
     * </pre>
     *
     * <code>M8_F2_REG_M8_INFO_CALLBACK = 2050;</code>
     */
    M8_F2_REG_M8_INFO_CALLBACK(2050),
    /**
     * <pre>
     * 初始化时间同步功能模块
     * </pre>
     *
     * <code>M9_F1_INIT = 2305;</code>
     */
    M9_F1_INIT(2305),
    /**
     * <pre>
     * 获取最新的时间戳
     * </pre>
     *
     * <code>M9_F2_REG_GET_NEWEST_PPS_TRIGGER_TIME_CALLBACK = 2306;</code>
     */
    M9_F2_REG_GET_NEWEST_PPS_TRIGGER_TIME_CALLBACK(2306),
    /**
     * <pre>
     * 时间转换
     * </pre>
     *
     * <code>M9_F3_TRANSFER_TO_AIRCRAFT_TIME = 2307;</code>
     */
    M9_F3_TRANSFER_TO_AIRCRAFT_TIME(2307),
    /**
     * <pre>
     * 反初始化低速数据通道模块
     * </pre>
     *
     * <code>M10_F0_DEINIT = 2560;</code>
     */
    M10_F0_DEINIT(2560),
    /**
     * <pre>
     * 初始化低速数据通道模块
     * </pre>
     *
     * <code>M10_F1_INIT = 2561;</code>
     */
    M10_F1_INIT(2561),
    /**
     * <pre>
     * 发送数据
     * </pre>
     *
     * <code>M10_F2_SEND_DATA = 2562;</code>
     */
    M10_F2_SEND_DATA(2562),
    /**
     * <pre>
     * 发送数据状态
     * </pre>
     *
     * <code>M10_F3_GET_SEND_DATA = 2563;</code>
     */
    M10_F3_GET_SEND_DATA(2563),
    /**
     * <pre>
     * 注册返回数据回调函数
     * </pre>
     *
     * <code>M10_F4_REG_RECV_DATA_CALLBACK = 2564;</code>
     */
    M10_F4_REG_RECV_DATA_CALLBACK(2564),
    /**
     * <pre>
     * 设置带宽比例
     * </pre>
     *
     * <code>M10_F5_SET_BAND_WIDTH_PROPORTION = 2818;</code>
     */
    M10_F5_SET_BAND_WIDTH_PROPORTION(2818),
    /**
     * <pre>
     * 获取数据流远程地址
     * </pre>
     *
     * <code>M10_F6_GET_DATA_STREAM_REMOTE_ADDRESS = 2819;</code>
     */
    M10_F6_GET_DATA_STREAM_REMOTE_ADDRESS(2819),
    /**
     * <pre>
     * 发送数据流数据
     * </pre>
     *
     * <code>M10_F7_SEND_DATA_STREAM_DATA = 2820;</code>
     */
    M10_F7_SEND_DATA_STREAM_DATA(2820),
    /**
     * <pre>
     * 获取数据流状态
     * </pre>
     *
     * <code>M10_F8_GET_DATA_STREAM_STATE = 2821;</code>
     */
    M10_F8_GET_DATA_STREAM_STATE(2821),
    /**
     * <pre>
     * 反初始化X-Port
     * </pre>
     *
     * <code>M11_F0_DEINIT = 3072;</code>
     */
    M11_F0_DEINIT(3072),
    /**
     * <pre>
     * 初始化X-Port
     * </pre>
     *
     * <code>M11_F1_INIT = 3073;</code>
     */
    M11_F1_INIT(3073),
    /**
     * <pre>
     * 接收X-Port 状态
     * </pre>
     *
     * <code>M11_F2_REG_RECEIVE_SYSTEM_STATE_CALLBACK = 3074;</code>
     */
    M11_F2_REG_RECEIVE_SYSTEM_STATE_CALLBACK(3074),
    /**
     * <pre>
     * 获取X-Port 姿态角
     * </pre>
     *
     * <code>M11_F3_REG_RECEIVE_ATTITUDE_INFORMATION_CALLBACK = 3075;</code>
     */
    M11_F3_REG_RECEIVE_ATTITUDE_INFORMATION_CALLBACK(3075),
    /**
     * <pre>
     * 设置X-Port 的模式
     * </pre>
     *
     * <code>M11_F4_SET_GIMBAL_MODE_SYNC = 3076;</code>
     */
    M11_F4_SET_GIMBAL_MODE_SYNC(3076),
    /**
     * <pre>
     * 转动X-Port
     * </pre>
     *
     * <code>M11_F5_ROTATE_SYNC = 3077;</code>
     */
    M11_F5_ROTATE_SYNC(3077),
    /**
     * <pre>
     * 释放X-Port 的控制权限
     * </pre>
     *
     * <code>M11_F6_RELEASE_CONTROL_PERMISSION_SYNC = 3078;</code>
     */
    M11_F6_RELEASE_CONTROL_PERMISSION_SYNC(3078),
    /**
     * <pre>
     * X-Port 复位
     * </pre>
     *
     * <code>M11_F7_RESET_SYNC = 3079;</code>
     */
    M11_F7_RESET_SYNC(3079),
    /**
     * <pre>
     * 设置X-Port 限位角
     * </pre>
     *
     * <code>M11_F8_SET_LIMIT_ANGLE_SYNC = 3080;</code>
     */
    M11_F8_SET_LIMIT_ANGLE_SYNC(3080),
    /**
     * <pre>
     * 获取X-Port 的限位角
     * </pre>
     *
     * <code>M11_F9_GET_LIMIT_ANGLE_SYNC = 3081;</code>
     */
    M11_F9_GET_LIMIT_ANGLE_SYNC(3081),
    /**
     * <pre>
     * 设置X-Port 云台速度转换系数
     * </pre>
     *
     * <code>M11_F10_SET_SPEED_CONVERSION_FACTOR = 3082;</code>
     */
    M11_F10_SET_SPEED_CONVERSION_FACTOR(3082),
    /**
     * <pre>
     * 初始化升级模块
     * </pre>
     *
     * <code>M12_F1_INIT = 3329;</code>
     */
    M12_F1_INIT(3329),
    /**
     * <pre>
     * 启动本地升级模块
     * </pre>
     *
     * <code>M12_F2_ENABLE_LOCAL_UPGRADE = 3330;</code>
     */
    M12_F2_ENABLE_LOCAL_UPGRADE(3330),
    /**
     * <pre>
     * 注册升级过程的处理程序
     * </pre>
     *
     * <code>M12_F3_REG_HANDLER = 3331;</code>
     */
    M12_F3_REG_HANDLER(3331),
    /**
     * <pre>
     * 推送升级状态
     * </pre>
     *
     * <code>M12_F4_PUSH_UPGRADE_STATE = 3332;</code>
     */
    M12_F4_PUSH_UPGRADE_STATE(3332),
    /**
     * <pre>
     * 反初始化感知模块
     * </pre>
     *
     * <code>M13_F0_DEINIT = 3584;</code>
     */
    M13_F0_DEINIT(3584),
    /**
     * <pre>
     * 初始化感知模块
     * </pre>
     *
     * <code>M13_F1_INIT = 3585;</code>
     */
    M13_F1_INIT(3585),
    /**
     * <pre>
     * 订阅两个立体相机在同一方向的原始图像
     * </pre>
     *
     * <code>M13_F2_SUBSCRIBE_PERCEPTION_IMAGE = 3586;</code>
     */
    M13_F2_SUBSCRIBE_PERCEPTION_IMAGE(3586),
    /**
     * <pre>
     * 取消订阅同一方向的两个立体摄像机的原始图像
     * </pre>
     *
     * <code>M13_F3_UNSUBSCRIBE_PERCEPTION_IMAGE = 3587;</code>
     */
    M13_F3_UNSUBSCRIBE_PERCEPTION_IMAGE(3587),
    /**
     * <pre>
     * 获取所有立体摄像机的内部和外部参数
     * </pre>
     *
     * <code>M13_F4_GET_STEREO_CAMERA_PARAMETERS = 3588;</code>
     */
    M13_F4_GET_STEREO_CAMERA_PARAMETERS(3588),
    /**
     * <pre>
     * 反初始化码流
     * </pre>
     *
     * <code>M14_F0_DEINIT = 3840;</code>
     */
    M14_F0_DEINIT(3840),
    /**
     * <pre>
     * 初始化码流
     * </pre>
     *
     * <code>M14_F1_INIT = 3841;</code>
     */
    M14_F1_INIT(3841),
    /**
     * <pre>
     * 按选定位置启动 FPV 或摄像机 H264 流
     * </pre>
     *
     * <code>M14_F2_START_H264_STREAM = 3842;</code>
     */
    M14_F2_START_H264_STREAM(3842),
    /**
     * <pre>
     * 按选定位置关闭 FPV 或摄像机 H264 流
     * </pre>
     *
     * <code>M14_F3_STOP_H264_STREAM = 3843;</code>
     */
    M14_F3_STOP_H264_STREAM(3843),
    /**
     * <pre>
     * 反初始化航点 V2模块
     * </pre>
     *
     * <code>M15_F0_DEINIT = 4096;</code>
     */
    M15_F0_DEINIT(4096),
    /**
     * <pre>
     * 初始化航点 V2模块
     * </pre>
     *
     * <code>M15_F1_INIT = 4097;</code>
     */
    M15_F1_INIT(4097),
    /**
     * <pre>
     * 初始化任务模块设置
     * </pre>
     *
     * <code>M15_F2_UPLOAD_MISSION = 4098;</code>
     */
    M15_F2_UPLOAD_MISSION(4098),
    /**
     * <pre>
     * 开始任务
     * </pre>
     *
     * <code>M15_F3_START = 4099;</code>
     */
    M15_F3_START(4099),
    /**
     * <pre>
     * 停止任务
     * </pre>
     *
     * <code>M15_F4_STOP = 4100;</code>
     */
    M15_F4_STOP(4100),
    /**
     * <pre>
     * 暂停任务
     * </pre>
     *
     * <code>M15_F5_PAUSE = 4101;</code>
     */
    M15_F5_PAUSE(4101),
    /**
     * <pre>
     * 恢复任务
     * </pre>
     *
     * <code>M15_F6_RESUME = 4102;</code>
     */
    M15_F6_RESUME(4102),
    /**
     * <pre>
     * 从飞控获取全局巡航速度设置
     * </pre>
     *
     * <code>M15_F7_GET_GLOBAL_CRUISE_SPEED = 4103;</code>
     */
    M15_F7_GET_GLOBAL_CRUISE_SPEED(4103),
    /**
     * <pre>
     * 将全局巡航速度设置为飞控
     * </pre>
     *
     * <code>M15_F8_SET_GLOBAL_CRUISE_SPEED = 4104;</code>
     */
    M15_F8_SET_GLOBAL_CRUISE_SPEED(4104),
    /**
     * <pre>
     * 使用回调函数订阅航点V2 事件
     * </pre>
     *
     * <code>M15_F9_REGISTER_MISSION_EVENT_CALLBACK = 4105;</code>
     */
    M15_F9_REGISTER_MISSION_EVENT_CALLBACK(4105),
    /**
     * <pre>
     * 使用回调函数订阅航点V2 任务状态
     * </pre>
     *
     * <code>M15_F10_REGISTER_MISSION_STATE_CALLBACK = 4106;</code>
     */
    M15_F10_REGISTER_MISSION_STATE_CALLBACK(4106),
    /**
     * <pre>
     * 初始化精准定位模块
     * </pre>
     *
     * <code>M16_F1_INIT = 4353;</code>
     */
    M16_F1_INIT(4353),
    /**
     * <pre>
     * 设置任务索引
     * </pre>
     *
     * <code>M16_F2_SET_TASK_INDEX = 4354;</code>
     */
    M16_F2_SET_TASK_INDEX(4354),
    /**
     * <pre>
     * 获取精准定位信息
     * </pre>
     *
     * <code>M16_F3_GET_POSITION_INFORMATION_SYNC = 4355;</code>
     */
    M16_F3_GET_POSITION_INFORMATION_SYNC(4355),
    /**
     * <pre>
     * 初始化MOP通道
     * </pre>
     *
     * <code>M17_F1_INIT = 4609;</code>
     */
    M17_F1_INIT(4609),
    /**
     * <pre>
     * 创建MOP通道
     * </pre>
     *
     * <code>M17_F2_CREATE = 4610;</code>
     */
    M17_F2_CREATE(4610),
    /**
     * <pre>
     * 销毁已创建的MOP通道
     * </pre>
     *
     * <code>M17_F3_DESTROY = 4611;</code>
     */
    M17_F3_DESTROY(4611),
    /**
     * <pre>
     * 信道绑定
     * </pre>
     *
     * <code>M17_F4_BIND = 4612;</code>
     */
    M17_F4_BIND(4612),
    /**
     * <pre>
     * 接受MOP通道连接
     * </pre>
     *
     * <code>M17_F5_ACCEPT = 4613;</code>
     */
    M17_F5_ACCEPT(4613),
    /**
     * <pre>
     * MOP通道连接
     * </pre>
     *
     * <code>M17_F6_CONNECT = 4614;</code>
     */
    M17_F6_CONNECT(4614),
    /**
     * <pre>
     * 关闭已创建的MOP连接
     * </pre>
     *
     * <code>M17_F7_CLOSE = 4615;</code>
     */
    M17_F7_CLOSE(4615),
    /**
     * <pre>
     * 发送数据
     * </pre>
     *
     * <code>M17_F8_SEND_DATA = 4616;</code>
     */
    M17_F8_SEND_DATA(4616),
    /**
     * <pre>
     * 接收数据
     * </pre>
     *
     * <code>M17_F9_RECV_DATA = 4617;</code>
     */
    M17_F9_RECV_DATA(4617),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>UNKNOW = 0;</code>
     */
    public static final int UNKNOW_VALUE = 0;
    /**
     * <pre>
     * 释放消息订阅功能
     * </pre>
     *
     * <code>M2_F0_DEINIT = 512;</code>
     */
    public static final int M2_F0_DEINIT_VALUE = 512;
    /**
     * <pre>
     * 初始化消息订阅功能
     * </pre>
     *
     * <code>M2_F1_INIT = 513;</code>
     */
    public static final int M2_F1_INIT_VALUE = 513;
    /**
     * <pre>
     * 姿态四元数(最大 200Hz)
     * </pre>
     *
     * <code>M2_F2_QUATERNION = 514;</code>
     */
    public static final int M2_F2_QUATERNION_VALUE = 514;
    /**
     * <pre>
     * 相对地面加速度(最大 200Hz)
     * </pre>
     *
     * <code>M2_F3_ACCELERATION_GROUND = 515;</code>
     */
    public static final int M2_F3_ACCELERATION_GROUND_VALUE = 515;
    /**
     * <pre>
     * 相对机体加速度(最大 200Hz)
     * </pre>
     *
     * <code>M2_F4_ACCELERATION_BODY = 516;</code>
     */
    public static final int M2_F4_ACCELERATION_BODY_VALUE = 516;
    /**
     * <pre>
     * 原始加速度(最大 400Hz)
     * </pre>
     *
     * <code>M2_F5_ACCELERATION_RAW = 517;</code>
     */
    public static final int M2_F5_ACCELERATION_RAW_VALUE = 517;
    /**
     * <pre>
     * 速度(最大 200Hz)
     * </pre>
     *
     * <code>M2_F6_VELOCITY = 518;</code>
     */
    public static final int M2_F6_VELOCITY_VALUE = 518;
    /**
     * <pre>
     * 融合角速度(最大 200Hz)
     * </pre>
     *
     * <code>M2_F7_ANGULAR_RATE_FUSIONED = 519;</code>
     */
    public static final int M2_F7_ANGULAR_RATE_FUSIONED_VALUE = 519;
    /**
     * <pre>
     * 原始角速度(最大 400Hz)
     * </pre>
     *
     * <code>M2_F8_ANGULAR_RATE_RAW = 520;</code>
     */
    public static final int M2_F8_ANGULAR_RATE_RAW_VALUE = 520;
    /**
     * <pre>
     * 融合高度(最大 200Hz)
     * </pre>
     *
     * <code>M2_F9_ALTITUDE_FUSED = 521;</code>
     */
    public static final int M2_F9_ALTITUDE_FUSED_VALUE = 521;
    /**
     * <pre>
     * 气压计高度(最大 200Hz)
     * </pre>
     *
     * <code>M2_F10_ALTITUDE_BAROMETER = 522;</code>
     */
    public static final int M2_F10_ALTITUDE_BAROMETER_VALUE = 522;
    /**
     * <pre>
     * Home 点高度(最大 1Hz)
     * </pre>
     *
     * <code>M2_F11_ALTITUDE_OF_HOMEPOINT = 523;</code>
     */
    public static final int M2_F11_ALTITUDE_OF_HOMEPOINT_VALUE = 523;
    /**
     * <pre>
     * 融合相对地面高度(最大 100Hz)
     * </pre>
     *
     * <code>M2_F12_HEIGHT_FUSION = 524;</code>
     */
    public static final int M2_F12_HEIGHT_FUSION_VALUE = 524;
    /**
     * <pre>
     * 相对地面高度(最大 200Hz)
     * </pre>
     *
     * <code>M2_F13_HEIGHT_RELATIVE = 525;</code>
     */
    public static final int M2_F13_HEIGHT_RELATIVE_VALUE = 525;
    /**
     * <pre>
     * 融合位置坐标(最大 200Hz)
     * </pre>
     *
     * <code>M2_F14_POSITION_FUSED = 526;</code>
     */
    public static final int M2_F14_POSITION_FUSED_VALUE = 526;
    /**
     * <pre>
     * GPS 日期,年月日(最大 5Hz)
     * </pre>
     *
     * <code>M2_F15_GPS_DATE = 527;</code>
     */
    public static final int M2_F15_GPS_DATE_VALUE = 527;
    /**
     * <pre>
     * GPS 时间,时分秒(最大 5Hz)
     * </pre>
     *
     * <code>M2_F16_GPS_TIME = 528;</code>
     */
    public static final int M2_F16_GPS_TIME_VALUE = 528;
    /**
     * <pre>
     * GPS 位置(最大 5Hz)
     * </pre>
     *
     * <code>M2_F17_GPS_POSITION = 529;</code>
     */
    public static final int M2_F17_GPS_POSITION_VALUE = 529;
    /**
     * <pre>
     * GPS 速度(最大 5Hz)
     * </pre>
     *
     * <code>M2_F18_GPS_VELOCITY = 530;</code>
     */
    public static final int M2_F18_GPS_VELOCITY_VALUE = 530;
    /**
     * <pre>
     * GPS 信息(最大 5Hz)
     * </pre>
     *
     * <code>M2_F19_GPS_DETAILS = 531;</code>
     */
    public static final int M2_F19_GPS_DETAILS_VALUE = 531;
    /**
     * <pre>
     * GPS 信号强度(最大 50Hz)
     * </pre>
     *
     * <code>M2_F20_GPS_SIGNAL_LEVEL = 532;</code>
     */
    public static final int M2_F20_GPS_SIGNAL_LEVEL_VALUE = 532;
    /**
     * <pre>
     * RTK 位置(最大 5Hz)
     * </pre>
     *
     * <code>M2_F21_RTK_POSITION = 533;</code>
     */
    public static final int M2_F21_RTK_POSITION_VALUE = 533;
    /**
     * <pre>
     * RTK 速度(最大 5Hz)
     * </pre>
     *
     * <code>M2_F22_RTK_VELOCITY = 534;</code>
     */
    public static final int M2_F22_RTK_VELOCITY_VALUE = 534;
    /**
     * <pre>
     * RTK 航向角(最大 5Hz)
     * </pre>
     *
     * <code>M2_F23_RTK_YAW = 535;</code>
     */
    public static final int M2_F23_RTK_YAW_VALUE = 535;
    /**
     * <pre>
     * RTK 位置信息(最大 5Hz)
     * </pre>
     *
     * <code>M2_F24_RTK_POSITION_INFO = 536;</code>
     */
    public static final int M2_F24_RTK_POSITION_INFO_VALUE = 536;
    /**
     * <pre>
     * RTK 航向信息(最大 5Hz)
     * </pre>
     *
     * <code>M2_F25_RTK_YAW_INFO = 537;</code>
     */
    public static final int M2_F25_RTK_YAW_INFO_VALUE = 537;
    /**
     * <pre>
     * 指南针信息(最大 100Hz)
     * </pre>
     *
     * <code>M2_F26_COMPASS = 538;</code>
     */
    public static final int M2_F26_COMPASS_VALUE = 538;
    /**
     * <pre>
     * 遥控摇杆信息(最大 50Hz)
     * </pre>
     *
     * <code>M2_F27_RC = 539;</code>
     */
    public static final int M2_F27_RC_VALUE = 539;
    /**
     * <pre>
     * 云台角度(最大 50Hz)
     * </pre>
     *
     * <code>M2_F28_GIMBAL_ANGLES = 540;</code>
     */
    public static final int M2_F28_GIMBAL_ANGLES_VALUE = 540;
    /**
     * <pre>
     * 云台状态(最大 50Hz)
     * </pre>
     *
     * <code>M2_F29_GIMBAL_STATUS = 541;</code>
     */
    public static final int M2_F29_GIMBAL_STATUS_VALUE = 541;
    /**
     * <pre>
     * 飞行状态(最大 50Hz)
     * </pre>
     *
     * <code>M2_F30_STATUS_FLIGHT = 542;</code>
     */
    public static final int M2_F30_STATUS_FLIGHT_VALUE = 542;
    /**
     * <pre>
     * 飞行模式状态(最大 50Hz)
     * </pre>
     *
     * <code>M2_F31_STATUS_DISPLAYMODE = 543;</code>
     */
    public static final int M2_F31_STATUS_DISPLAYMODE_VALUE = 543;
    /**
     * <pre>
     * 起落架状态(最大 50Hz)
     * </pre>
     *
     * <code>M2_F32_STATUS_LANDINGGEAR = 544;</code>
     */
    public static final int M2_F32_STATUS_LANDINGGEAR_VALUE = 544;
    /**
     * <pre>
     * 电机启动错误码(最大 50Hz)
     * </pre>
     *
     * <code>M2_F33_STATUS_MOTOR_START_ERROR = 545;</code>
     */
    public static final int M2_F33_STATUS_MOTOR_START_ERROR_VALUE = 545;
    /**
     * <pre>
     * 电池信息(最大 50Hz)
     * </pre>
     *
     * <code>M2_F34_BATTERY_INFO = 546;</code>
     */
    public static final int M2_F34_BATTERY_INFO_VALUE = 546;
    /**
     * <pre>
     * 设备控制信息(最大 50Hz)
     * </pre>
     *
     * <code>M2_F35_CONTROL_DEVICE = 547;</code>
     */
    public static final int M2_F35_CONTROL_DEVICE_VALUE = 547;
    /**
     * <pre>
     * 硬件时钟同步(400Hz)
     * </pre>
     *
     * <code>M2_F36_HARD_SYNC = 548;</code>
     */
    public static final int M2_F36_HARD_SYNC_VALUE = 548;
    /**
     * <pre>
     * GPS 控制等级(最大 50Hz)
     * </pre>
     *
     * <code>M2_F37_GPS_CONTROL_LEVEL = 549;</code>
     */
    public static final int M2_F37_GPS_CONTROL_LEVEL_VALUE = 549;
    /**
     * <pre>
     * 带标记遥控遥感信息(最大 50Hz)
     * </pre>
     *
     * <code>M2_F38_RC_WITH_FLAG_DATA = 550;</code>
     */
    public static final int M2_F38_RC_WITH_FLAG_DATA_VALUE = 550;
    /**
     * <pre>
     * 电调数据(最大 50Hz)
     * </pre>
     *
     * <code>M2_F39_ESC_DATA = 551;</code>
     */
    public static final int M2_F39_ESC_DATA_VALUE = 551;
    /**
     * <pre>
     * RTK 连接状态(最大 50Hz)
     * </pre>
     *
     * <code>M2_F40_RTK_CONNECT_STATUS = 552;</code>
     */
    public static final int M2_F40_RTK_CONNECT_STATUS_VALUE = 552;
    /**
     * <pre>
     * 云台控制模式(最大 50Hz)
     * </pre>
     *
     * <code>M2_F41_GIMBAL_CONTROL_MODE = 553;</code>
     */
    public static final int M2_F41_GIMBAL_CONTROL_MODE_VALUE = 553;
    /**
     * <pre>
     * 飞行异常信息(最大 50Hz)
     * </pre>
     *
     * <code>M2_F42_FLIGHT_ANOMALY = 554;</code>
     */
    public static final int M2_F42_FLIGHT_ANOMALY_VALUE = 554;
    /**
     * <pre>
     * 笛卡尔坐标位置(200Hz)
     * </pre>
     *
     * <code>M2_F43_POSITION_VO = 555;</code>
     */
    public static final int M2_F43_POSITION_VO_VALUE = 555;
    /**
     * <pre>
     * 避障数据(最大 100Hz)
     * </pre>
     *
     * <code>M2_F44_AVOID_DATA = 556;</code>
     */
    public static final int M2_F44_AVOID_DATA_VALUE = 556;
    /**
     * <pre>
     * 返航点设置状态(最大 50Hz)
     * </pre>
     *
     * <code>M2_F45_HOME_POINT_SET_STATUS = 557;</code>
     */
    public static final int M2_F45_HOME_POINT_SET_STATUS_VALUE = 557;
    /**
     * <pre>
     * 返航点信息(最大 50Hz)
     * </pre>
     *
     * <code>M2_F46_HOME_POINT_INFO = 558;</code>
     */
    public static final int M2_F46_HOME_POINT_INFO_VALUE = 558;
    /**
     * <pre>
     * 三云台信息,适用M300 RTK与M350 RTK上下三个云台的信息(最大 50Hz)
     * </pre>
     *
     * <code>M2_F47_THREE_GIMBAL_DATA = 559;</code>
     */
    public static final int M2_F47_THREE_GIMBAL_DATA_VALUE = 559;
    /**
     * <pre>
     * 1号电池信息(最大 50Hz)
     * </pre>
     *
     * <code>M2_F48_BATTERY_SINGLE_INFO_INDEX1 = 560;</code>
     */
    public static final int M2_F48_BATTERY_SINGLE_INFO_INDEX1_VALUE = 560;
    /**
     * <pre>
     * 2号电池信息(最大 50Hz)
     * </pre>
     *
     * <code>M2_F49_BATTERY_SINGLE_INFO_INDEX2 = 561;</code>
     */
    public static final int M2_F49_BATTERY_SINGLE_INFO_INDEX2_VALUE = 561;
    /**
     * <pre>
     * 反初始化摄像头管理模块
     * </pre>
     *
     * <code>M3_F0_DEINIT = 768;</code>
     */
    public static final int M3_F0_DEINIT_VALUE = 768;
    /**
     * <pre>
     * 初始化摄像头管理模块
     * </pre>
     *
     * <code>M3_F1_INIT = 769;</code>
     */
    public static final int M3_F1_INIT_VALUE = 769;
    /**
     * <pre>
     * 获取选定挂载位置的相机类型
     * </pre>
     *
     * <code>M3_F2_GET_CAMERA_TYPE = 770;</code>
     */
    public static final int M3_F2_GET_CAMERA_TYPE_VALUE = 770;
    /**
     * <pre>
     * 获取选定挂载位置的相机固件版本
     * </pre>
     *
     * <code>M3_F3_GET_FIRMWARE_VERSION = 771;</code>
     */
    public static final int M3_F3_GET_FIRMWARE_VERSION_VALUE = 771;
    /**
     * <pre>
     * 获取相机连接状态
     * </pre>
     *
     * <code>M3_F4_GET_CAMERA_CONNECT_STATUS = 772;</code>
     */
    public static final int M3_F4_GET_CAMERA_CONNECT_STATUS_VALUE = 772;
    /**
     * <pre>
     * 设置选定挂载位置相机的工作模式
     * </pre>
     *
     * <code>M3_F5_SET_MODE = 773;</code>
     */
    public static final int M3_F5_SET_MODE_VALUE = 773;
    /**
     * <pre>
     * 获取选定安装位置摄像头的工作模式
     * </pre>
     *
     * <code>M3_F6_GET_MODE = 774;</code>
     */
    public static final int M3_F6_GET_MODE_VALUE = 774;
    /**
     * <pre>
     * 设置选定挂载位置相机的拍照模式
     * </pre>
     *
     * <code>M3_F7_SET_SHOOT_PHOTO_MODE = 775;</code>
     */
    public static final int M3_F7_SET_SHOOT_PHOTO_MODE_VALUE = 775;
    /**
     * <pre>
     * 获取选定挂载位置相机的拍照模式
     * </pre>
     *
     * <code>M3_F8_GET_SHOOT_PHOTO_MODE = 776;</code>
     */
    public static final int M3_F8_GET_SHOOT_PHOTO_MODE_VALUE = 776;
    /**
     * <pre>
     * 开始拍照
     * </pre>
     *
     * <code>M3_F9_START_SHOOT_PHOTO = 777;</code>
     */
    public static final int M3_F9_START_SHOOT_PHOTO_VALUE = 777;
    /**
     * <pre>
     * 拍照过程中停止拍照
     * </pre>
     *
     * <code>M3_F10_STOP_SHOOT_PHOTO = 778;</code>
     */
    public static final int M3_F10_STOP_SHOOT_PHOTO_VALUE = 778;
    /**
     * <pre>
     * 获取相机拍摄状态
     * </pre>
     *
     * <code>M3_F11_GET_CAPTURING_STATE = 779;</code>
     */
    public static final int M3_F11_GET_CAPTURING_STATE_VALUE = 779;
    /**
     * <pre>
     * 在连拍模式下设置连拍张数(H20/H20T不支持)
     * </pre>
     *
     * <code>M3_F12_SET_PHOTO_BURST_COUNT = 780;</code>
     */
    public static final int M3_F12_SET_PHOTO_BURST_COUNT_VALUE = 780;
    /**
     * <pre>
     * 设置间隔拍摄模式的参数
     * </pre>
     *
     * <code>M3_F13_SET_PHOTO_TIME_INTERVAL_SETTINGS = 781;</code>
     */
    public static final int M3_F13_SET_PHOTO_TIME_INTERVAL_SETTINGS_VALUE = 781;
    /**
     * <pre>
     * 获取间隔拍摄模式的参数
     * </pre>
     *
     * <code>M3_F14_GET_PHOTO_TIME_INTERVAL_SETTINGS = 782;</code>
     */
    public static final int M3_F14_GET_PHOTO_TIME_INTERVAL_SETTINGS_VALUE = 782;
    /**
     * <pre>
     * 获取间隔拍摄的剩余时间
     * </pre>
     *
     * <code>M3_F15_GET_INTERVAL_SHOOTING_REMAIN_TIME = 783;</code>
     */
    public static final int M3_F15_GET_INTERVAL_SHOOTING_REMAIN_TIME_VALUE = 783;
    /**
     * <pre>
     * 设置选定相机挂载位置的相机对焦模式
     * </pre>
     *
     * <code>M3_F16_SET_FOCUS_MODE = 784;</code>
     */
    public static final int M3_F16_SET_FOCUS_MODE_VALUE = 784;
    /**
     * <pre>
     * 获取选定相机挂载位置的对焦模式
     * </pre>
     *
     * <code>M3_F17_GET_FOCUS_MODE = 785;</code>
     */
    public static final int M3_F17_GET_FOCUS_MODE_VALUE = 785;
    /**
     * <pre>
     * 设置选定相机挂载位置的对焦点
     * </pre>
     *
     * <code>M3_F18_SET_FOCUS_TARGET = 786;</code>
     */
    public static final int M3_F18_SET_FOCUS_TARGET_VALUE = 786;
    /**
     * <pre>
     * 获取选定相机挂载位置的对焦点
     * </pre>
     *
     * <code>M3_F19_GET_FOCUS_TARGET = 787;</code>
     */
    public static final int M3_F19_GET_FOCUS_TARGET_VALUE = 787;
    /**
     * <pre>
     * 开启选定挂载位置相机的持续光学变焦
     * </pre>
     *
     * <code>M3_F20_START_CONTINUOUS_OPTICAL_ZOOM = 788;</code>
     */
    public static final int M3_F20_START_CONTINUOUS_OPTICAL_ZOOM_VALUE = 788;
    /**
     * <pre>
     * 停止选定挂载位置相机的持续光学变焦
     * </pre>
     *
     * <code>M3_F21_STOP_CONTINUOUS_OPTICAL_ZOOM = 789;</code>
     */
    public static final int M3_F21_STOP_CONTINUOUS_OPTICAL_ZOOM_VALUE = 789;
    /**
     * <pre>
     * 设置选定挂载位置相机的光学变焦参数
     * </pre>
     *
     * <code>M3_F22_SET_OPTICAL_ZOOM_PARAM = 790;</code>
     */
    public static final int M3_F22_SET_OPTICAL_ZOOM_PARAM_VALUE = 790;
    /**
     * <pre>
     * 获取选定挂载位置相机的光学变焦参数
     * </pre>
     *
     * <code>M3_F23_GET_OPTICAL_ZOOM_PARAM = 791;</code>
     */
    public static final int M3_F23_GET_OPTICAL_ZOOM_PARAM_VALUE = 791;
    /**
     * <pre>
     * 设置指定挂载位置相机的红外变焦参数
     * </pre>
     *
     * <code>M3_F24_SET_INFRARED_ZOOM_PARAM = 792;</code>
     */
    public static final int M3_F24_SET_INFRARED_ZOOM_PARAM_VALUE = 792;
    /**
     * <pre>
     * 启用或禁用指定挂载位置相机的点击变焦功能
     * </pre>
     *
     * <code>M3_F25_SET_TAP_ZOOM_ENABLED = 793;</code>
     */
    public static final int M3_F25_SET_TAP_ZOOM_ENABLED_VALUE = 793;
    /**
     * <pre>
     * 获取指定挂载位置相机的点击变焦状态
     * </pre>
     *
     * <code>M3_F26_GET_TAP_ZOOM_ENABLED = 794;</code>
     */
    public static final int M3_F26_GET_TAP_ZOOM_ENABLED_VALUE = 794;
    /**
     * <pre>
     * 设置指定挂载位置相机的点击变焦倍数
     * </pre>
     *
     * <code>M3_F27_SET_TAP_ZOOM_MULTIPLIER = 795;</code>
     */
    public static final int M3_F27_SET_TAP_ZOOM_MULTIPLIER_VALUE = 795;
    /**
     * <pre>
     * 获取指定挂载位置相机的点击变焦倍数
     * </pre>
     *
     * <code>M3_F28_GET_TAP_ZOOM_MULTIPLIER = 796;</code>
     */
    public static final int M3_F28_GET_TAP_ZOOM_MULTIPLIER_VALUE = 796;
    /**
     * <pre>
     * 设置指定挂载位置相机的点击变焦点
     * </pre>
     *
     * <code>M3_F29_TAP_ZOOM_AT_TARGET = 797;</code>
     */
    public static final int M3_F29_TAP_ZOOM_AT_TARGET_VALUE = 797;
    /**
     * <pre>
     * 获取相机焦距环的值范围
     * </pre>
     *
     * <code>M3_F30_GET_FOCUS_RING_RANGE = 798;</code>
     */
    public static final int M3_F30_GET_FOCUS_RING_RANGE_VALUE = 798;
    /**
     * <pre>
     * 设置相机焦距环的值
     * </pre>
     *
     * <code>M3_F31_SET_FOCUS_RING_VALUE = 799;</code>
     */
    public static final int M3_F31_SET_FOCUS_RING_VALUE_VALUE = 799;
    /**
     * <pre>
     * 获取相机焦距环的值
     * </pre>
     *
     * <code>M3_F32_GET_FOCUS_RING_VALUE = 800;</code>
     */
    public static final int M3_F32_GET_FOCUS_RING_VALUE_VALUE = 800;
    /**
     * <pre>
     * 设置选定的挂载位置相机的曝光模式
     * </pre>
     *
     * <code>M3_F33_SET_EXPOSURE_MODE = 801;</code>
     */
    public static final int M3_F33_SET_EXPOSURE_MODE_VALUE = 801;
    /**
     * <pre>
     * 获取选定的挂载位置相机的曝光模式
     * </pre>
     *
     * <code>M3_F34_GET_EXPOSURE_MODE = 802;</code>
     */
    public static final int M3_F34_GET_EXPOSURE_MODE_VALUE = 802;
    /**
     * <pre>
     * 设置选定的挂载位置相机的 ISO 值
     * </pre>
     *
     * <code>M3_F35_SET_ISO = 803;</code>
     */
    public static final int M3_F35_SET_ISO_VALUE = 803;
    /**
     * <pre>
     * 获取选定的挂载位置相机的 ISO 值
     * </pre>
     *
     * <code>M3_F36_GET_ISO = 804;</code>
     */
    public static final int M3_F36_GET_ISO_VALUE = 804;
    /**
     * <pre>
     * 设置选定的挂载位置相机的光圈值
     * </pre>
     *
     * <code>M3_F37_SET_APERTURE = 805;</code>
     */
    public static final int M3_F37_SET_APERTURE_VALUE = 805;
    /**
     * <pre>
     * 获取选定的挂载位置相机的光圈值
     * </pre>
     *
     * <code>M3_F38_GET_APERTURE = 806;</code>
     */
    public static final int M3_F38_GET_APERTURE_VALUE = 806;
    /**
     * <pre>
     * 设置指定挂载位置相机的快门速度
     * </pre>
     *
     * <code>M3_F39_SET_SHUTTER_SPEED = 807;</code>
     */
    public static final int M3_F39_SET_SHUTTER_SPEED_VALUE = 807;
    /**
     * <pre>
     * 获取指定挂载位置相机的快门速度
     * </pre>
     *
     * <code>M3_F40_GET_SHUTTER_SPEED = 808;</code>
     */
    public static final int M3_F40_GET_SHUTTER_SPEED_VALUE = 808;
    /**
     * <pre>
     * 设置指定挂载位置相机的曝光补偿
     * </pre>
     *
     * <code>M3_F41_SET_EXPOSURE_COMPENSATION = 809;</code>
     */
    public static final int M3_F41_SET_EXPOSURE_COMPENSATION_VALUE = 809;
    /**
     * <pre>
     * 获取指定挂载位置相机的曝光补偿
     * </pre>
     *
     * <code>M3_F42_GET_EXPOSURE_COMPENSATION = 810;</code>
     */
    public static final int M3_F42_GET_EXPOSURE_COMPENSATION_VALUE = 810;
    /**
     * <pre>
     * 设置自动曝光锁定
     * </pre>
     *
     * <code>M3_F43_SET_AE_LOCK_ENABLED = 811;</code>
     */
    public static final int M3_F43_SET_AE_LOCK_ENABLED_VALUE = 811;
    /**
     * <pre>
     * 获取自动曝光锁定状态
     * </pre>
     *
     * <code>M3_F44_GET_AE_LOCK_ENABLED = 812;</code>
     */
    public static final int M3_F44_GET_AE_LOCK_ENABLED_VALUE = 812;
    /**
     * <pre>
     * 重置相机设置
     * </pre>
     *
     * <code>M3_F45_RESET_CAMERA_SETTINGS = 813;</code>
     */
    public static final int M3_F45_RESET_CAMERA_SETTINGS_VALUE = 813;
    /**
     * <pre>
     * 选定挂载位置相机开始录像
     * </pre>
     *
     * <code>M3_F46_START_RECORD_VIDEO = 814;</code>
     */
    public static final int M3_F46_START_RECORD_VIDEO_VALUE = 814;
    /**
     * <pre>
     * 选定挂载位置相机停止录像
     * </pre>
     *
     * <code>M3_F47_STOP_RECORD_VIDEO = 815;</code>
     */
    public static final int M3_F47_STOP_RECORD_VIDEO_VALUE = 815;
    /**
     * <pre>
     * 获取相机录像状态
     * </pre>
     *
     * <code>M3_F48_GET_RECORDING_STATE = 816;</code>
     */
    public static final int M3_F48_GET_RECORDING_STATE_VALUE = 816;
    /**
     * <pre>
     * 获取录像时长
     * </pre>
     *
     * <code>M3_F49_GET_RECORDING_TIME = 817;</code>
     */
    public static final int M3_F49_GET_RECORDING_TIME_VALUE = 817;
    /**
     * <pre>
     * 获取相机流媒体数据源范围
     * </pre>
     *
     * <code>M3_F50_GET_STREAM_SOURCE_RANGE = 818;</code>
     */
    public static final int M3_F50_GET_STREAM_SOURCE_RANGE_VALUE = 818;
    /**
     * <pre>
     * 选择相机流媒体数据源
     * </pre>
     *
     * <code>M3_F51_SET_STREAM_SOURCE = 819;</code>
     */
    public static final int M3_F51_SET_STREAM_SOURCE_VALUE = 819;
    /**
     * <pre>
     * 获取照片存储格式范围
     * </pre>
     *
     * <code>M3_F52_GET_PHOTO_STORAGE_FORMAT_RANGE = 820;</code>
     */
    public static final int M3_F52_GET_PHOTO_STORAGE_FORMAT_RANGE_VALUE = 820;
    /**
     * <pre>
     * 设置照片存储格式
     * </pre>
     *
     * <code>M3_F53_SET_PHOTO_FORMAT = 821;</code>
     */
    public static final int M3_F53_SET_PHOTO_FORMAT_VALUE = 821;
    /**
     * <pre>
     * 获取照片存储格式
     * </pre>
     *
     * <code>M3_F54_GET_PHOTO_FORMAT = 822;</code>
     */
    public static final int M3_F54_GET_PHOTO_FORMAT_VALUE = 822;
    /**
     * <pre>
     * 获取视频存储格式范围
     * </pre>
     *
     * <code>M3_F55_GET_VIDEO_FORMAT_RANGE = 823;</code>
     */
    public static final int M3_F55_GET_VIDEO_FORMAT_RANGE_VALUE = 823;
    /**
     * <pre>
     * 设置视频存储格式
     * </pre>
     *
     * <code>M3_F56_SET_VIDEO_STORAGE_FORMAT = 824;</code>
     */
    public static final int M3_F56_SET_VIDEO_STORAGE_FORMAT_VALUE = 824;
    /**
     * <pre>
     * 获取视频存储格式
     * </pre>
     *
     * <code>M3_F57_GET_VIDEO_STORAGE_FORMAT = 825;</code>
     */
    public static final int M3_F57_GET_VIDEO_STORAGE_FORMAT_VALUE = 825;
    /**
     * <pre>
     * 获取照片比例范围
     * </pre>
     *
     * <code>M3_F58_GET_PHOTO_RATIO_RANGE = 826;</code>
     */
    public static final int M3_F58_GET_PHOTO_RATIO_RANGE_VALUE = 826;
    /**
     * <pre>
     * 设置照片比例
     * </pre>
     *
     * <code>M3_F59_SET_PHOTO_RATIO = 827;</code>
     */
    public static final int M3_F59_SET_PHOTO_RATIO_VALUE = 827;
    /**
     * <pre>
     * 获取照片比例
     * </pre>
     *
     * <code>M3_F60_GET_PHOTO_RATIO = 828;</code>
     */
    public static final int M3_F60_GET_PHOTO_RATIO_VALUE = 828;
    /**
     * <pre>
     * 获取视频分辨率和帧率
     * </pre>
     *
     * <code>M3_F61_GET_VIDEO_RESOLUTION_FRAME_RATE = 829;</code>
     */
    public static final int M3_F61_GET_VIDEO_RESOLUTION_FRAME_RATE_VALUE = 829;
    /**
     * <pre>
     * 获取夜景模式范围
     * </pre>
     *
     * <code>M3_F62_GET_NIGHT_SCENE_MODE_RANGE = 830;</code>
     */
    public static final int M3_F62_GET_NIGHT_SCENE_MODE_RANGE_VALUE = 830;
    /**
     * <pre>
     * 设置夜景模式
     * </pre>
     *
     * <code>M3_F63_SET_NIGHT_SCENE_MODE = 831;</code>
     */
    public static final int M3_F63_SET_NIGHT_SCENE_MODE_VALUE = 831;
    /**
     * <pre>
     * 获取夜景模式
     * </pre>
     *
     * <code>M3_F64_GET_NIGHT_SCENE_MODE = 832;</code>
     */
    public static final int M3_F64_GET_NIGHT_SCENE_MODE_VALUE = 832;
    /**
     * <pre>
     * 获取拍摄或录像时流媒体数据源的存储范围
     * </pre>
     *
     * <code>M3_F65_GET_STREAM_STORAGE_RANGE = 833;</code>
     */
    public static final int M3_F65_GET_STREAM_STORAGE_RANGE_VALUE = 833;
    /**
     * <pre>
     * 选择要存储的拍摄或录像流
     * </pre>
     *
     * <code>M3_F66_SET_CAPTURE_RECORDING_STREAMS = 834;</code>
     */
    public static final int M3_F66_SET_CAPTURE_RECORDING_STREAMS_VALUE = 834;
    /**
     * <pre>
     * 获取要存储的拍摄或录像流
     * </pre>
     *
     * <code>M3_F67_GET_CAPTURE_RECORDING_STREAMS = 835;</code>
     */
    public static final int M3_F67_GET_CAPTURE_RECORDING_STREAMS_VALUE = 835;
    /**
     * <pre>
     * 启用/禁用同步分屏缩放功能
     * </pre>
     *
     * <code>M3_F68_SET_SYNCHRONIZED_SPLIT_SCREEN_ZOOM_ENABLED = 836;</code>
     */
    public static final int M3_F68_SET_SYNCHRONIZED_SPLIT_SCREEN_ZOOM_ENABLED_VALUE = 836;
    /**
     * <pre>
     * 设置目录或文件的后缀名
     * </pre>
     *
     * <code>M3_F69_SET_CUSTOM_EXPAND_NAME = 837;</code>
     */
    public static final int M3_F69_SET_CUSTOM_EXPAND_NAME_VALUE = 837;
    /**
     * <pre>
     * 获取最近目录或文件名的自定义后缀
     * </pre>
     *
     * <code>M3_F70_GET_CUSTOM_EXPAND_NAME = 838;</code>
     */
    public static final int M3_F70_GET_CUSTOM_EXPAND_NAME_VALUE = 838;
    /**
     * <pre>
     * 下载选定的相机媒体文件列表
     * </pre>
     *
     * <code>M3_F71_DOWNLOAD_FILE_LIST = 839;</code>
     */
    public static final int M3_F71_DOWNLOAD_FILE_LIST_VALUE = 839;
    /**
     * <pre>
     * 分块下载选定的相机媒体文件列表
     * </pre>
     *
     * <code>M3_F72_DOWNLOAD_FILE_LIST_BY_SLICES = 840;</code>
     */
    public static final int M3_F72_DOWNLOAD_FILE_LIST_BY_SLICES_VALUE = 840;
    /**
     * <pre>
     * 注册选定相机下载文件数据的回调
     * </pre>
     *
     * <code>M3_F73_REG_DOWNLOAD_FILE_DATA_CALLBACK = 841;</code>
     */
    public static final int M3_F73_REG_DOWNLOAD_FILE_DATA_CALLBACK_VALUE = 841;
    /**
     * <pre>
     * 通过文件索引下载选定的相机媒体文件
     * </pre>
     *
     * <code>M3_F74_DOWNLOAD_FILE_BY_INDEX = 842;</code>
     */
    public static final int M3_F74_DOWNLOAD_FILE_BY_INDEX_VALUE = 842;
    /**
     * <pre>
     * 通过文件索引和文件类型下载选定的相机媒体文件(仅支持L2相机)
     * </pre>
     *
     * <code>M3_F75_DOWNLOAD_SUB_FILE_BY_INDEX_AND_SUB_TYPE = 843;</code>
     */
    public static final int M3_F75_DOWNLOAD_SUB_FILE_BY_INDEX_AND_SUB_TYPE_VALUE = 843;
    /**
     * <pre>
     * 下载媒体文件前获取媒体文件下载权限
     * </pre>
     *
     * <code>M3_F76_OBTAIN_DOWNLOADER_RIGHTS = 844;</code>
     */
    public static final int M3_F76_OBTAIN_DOWNLOADER_RIGHTS_VALUE = 844;
    /**
     * <pre>
     * 下载媒体文件后释放媒体文件下载权限
     * </pre>
     *
     * <code>M3_F77_RELEASE_DOWNLOADER_RIGHTS = 845;</code>
     */
    public static final int M3_F77_RELEASE_DOWNLOADER_RIGHTS_VALUE = 845;
    /**
     * <pre>
     * 格式化 SD 卡
     * </pre>
     *
     * <code>M3_F78_FORMAT_STORAGE = 846;</code>
     */
    public static final int M3_F78_FORMAT_STORAGE_VALUE = 846;
    /**
     * <pre>
     * 获取 SD 卡的存储信息
     * </pre>
     *
     * <code>M3_F79_GET_STORAGE_INFO = 847;</code>
     */
    public static final int M3_F79_GET_STORAGE_INFO_VALUE = 847;
    /**
     * <pre>
     * 通过文件索引删除选定的相机媒体文件
     * </pre>
     *
     * <code>M3_F80_DELETE_FILE_BY_INDEX = 848;</code>
     */
    public static final int M3_F80_DELETE_FILE_BY_INDEX_VALUE = 848;
    /**
     * <pre>
     * 获取选定挂载位置的相机激光测距信息
     * </pre>
     *
     * <code>M3_F81_GET_LASER_RANGING_INFO = 849;</code>
     */
    public static final int M3_F81_GET_LASER_RANGING_INFO_VALUE = 849;
    /**
     * <pre>
     * 设置选定挂载位置的相机点温度坐标
     * </pre>
     *
     * <code>M3_F82_SET_POINT_THERMOMETRY_COORDINATE = 850;</code>
     */
    public static final int M3_F82_SET_POINT_THERMOMETRY_COORDINATE_VALUE = 850;
    /**
     * <pre>
     * 获取点温度结果
     * </pre>
     *
     * <code>M3_F83_GET_POINT_THERMOMETRY_DATA = 851;</code>
     */
    public static final int M3_F83_GET_POINT_THERMOMETRY_DATA_VALUE = 851;
    /**
     * <pre>
     * 设置选定挂载位置的相机区域温度坐标
     * </pre>
     *
     * <code>M3_F84_SET_AREA_THERMOMETRY_COORDINATE = 852;</code>
     */
    public static final int M3_F84_SET_AREA_THERMOMETRY_COORDINATE_VALUE = 852;
    /**
     * <pre>
     * 获取区域温度结果
     * </pre>
     *
     * <code>M3_F85_GET_AREA_THERMOMETRY_DATA = 853;</code>
     */
    public static final int M3_F85_GET_AREA_THERMOMETRY_DATA_VALUE = 853;
    /**
     * <pre>
     * 设置 FFC 模式
     * </pre>
     *
     * <code>M3_F86_SET_FFC_MODE = 854;</code>
     */
    public static final int M3_F86_SET_FFC_MODE_VALUE = 854;
    /**
     * <pre>
     * 触发一次 FFC
     * </pre>
     *
     * <code>M3_F87_TRIGGER_FFC = 855;</code>
     */
    public static final int M3_F87_TRIGGER_FFC_VALUE = 855;
    /**
     * <pre>
     * 设置红外相机增益模式
     * </pre>
     *
     * <code>M3_F88_SET_INFRARED_CAMERA_GAIN_MODE = 856;</code>
     */
    public static final int M3_F88_SET_INFRARED_CAMERA_GAIN_MODE_VALUE = 856;
    /**
     * <pre>
     * 获取红外相机的温度范围
     * </pre>
     *
     * <code>M3_F89_GET_INFRARED_CAMERA_GAIN_MODE_TEMPERATURE_RANGE = 857;</code>
     */
    public static final int M3_F89_GET_INFRARED_CAMERA_GAIN_MODE_TEMPERATURE_RANGE_VALUE = 857;
    /**
     * <pre>
     * 设置相机测光模式
     * </pre>
     *
     * <code>M3_F90_SET_METERING_MODE = 858;</code>
     */
    public static final int M3_F90_SET_METERING_MODE_VALUE = 858;
    /**
     * <pre>
     * 获取相机测光模式
     * </pre>
     *
     * <code>M3_F91_GET_METERING_MODE = 859;</code>
     */
    public static final int M3_F91_GET_METERING_MODE_VALUE = 859;
    /**
     * <pre>
     * 获取测光点范围
     * </pre>
     *
     * <code>M3_F92_GET_METERING_POINT_REGION_RANGE = 860;</code>
     */
    public static final int M3_F92_GET_METERING_POINT_REGION_RANGE_VALUE = 860;
    /**
     * <pre>
     * 设置测光点
     * </pre>
     *
     * <code>M3_F93_SET_METERING_POINT = 861;</code>
     */
    public static final int M3_F93_SET_METERING_POINT_VALUE = 861;
    /**
     * <pre>
     * 获取当前测光点
     * </pre>
     *
     * <code>M3_F94_GET_METERING_POINT = 862;</code>
     */
    public static final int M3_F94_GET_METERING_POINT_VALUE = 862;
    /**
     * <pre>
     * 开启当前相机挂载位置的点云录制(仅支持L2相机)
     * </pre>
     *
     * <code>M3_F95_START_RECORD_POINT_CLOUD = 863;</code>
     */
    public static final int M3_F95_START_RECORD_POINT_CLOUD_VALUE = 863;
    /**
     * <pre>
     * 停止当前相机挂载位置的点云录制(仅支持L2相机)
     * </pre>
     *
     * <code>M3_F96_STOP_RECORD_POINT_CLOUD = 864;</code>
     */
    public static final int M3_F96_STOP_RECORD_POINT_CLOUD_VALUE = 864;
    /**
     * <pre>
     * 反初始化云台管理模块
     * </pre>
     *
     * <code>M4_F0_DEINIT = 1024;</code>
     */
    public static final int M4_F0_DEINIT_VALUE = 1024;
    /**
     * <pre>
     * 初始化云台管理模块
     * </pre>
     *
     * <code>M4_F1_INIT = 1025;</code>
     */
    public static final int M4_F1_INIT_VALUE = 1025;
    /**
     * <pre>
     * 设置云台工作模式
     * </pre>
     *
     * <code>M4_F2_SET_MODE = 1026;</code>
     */
    public static final int M4_F2_SET_MODE_VALUE = 1026;
    /**
     * <pre>
     * 重置云台的俯仰和偏航角
     * </pre>
     *
     * <code>M4_F3_RESET = 1027;</code>
     */
    public static final int M4_F3_RESET_VALUE = 1027;
    /**
     * <pre>
     * 旋转云台角度
     * </pre>
     *
     * <code>M4_F4_ROTATE = 1028;</code>
     */
    public static final int M4_F4_ROTATE_VALUE = 1028;
    /**
     * <pre>
     * 启用或禁用云台俯仰限位扩展
     * </pre>
     *
     * <code>M4_F5_SET_PITCH_RANGE_EXTENSION_ENABLED = 1029;</code>
     */
    public static final int M4_F5_SET_PITCH_RANGE_EXTENSION_ENABLED_VALUE = 1029;
    /**
     * <pre>
     * 设置云台控制器的最大速度百分比
     * </pre>
     *
     * <code>M4_F6_SET_CONTROLLER_MAX_SPEED_PERCENTAGE = 1030;</code>
     */
    public static final int M4_F6_SET_CONTROLLER_MAX_SPEED_PERCENTAGE_VALUE = 1030;
    /**
     * <pre>
     * 设置云台控制器的平滑因子
     * </pre>
     *
     * <code>M4_F7_SET_CONTROLLER_SMOOTH_FACTOR = 1031;</code>
     */
    public static final int M4_F7_SET_CONTROLLER_SMOOTH_FACTOR_VALUE = 1031;
    /**
     * <pre>
     * 恢复云台的出厂设置
     * </pre>
     *
     * <code>M4_F8_RESTORE_FACTORY_SETTINGS = 1032;</code>
     */
    public static final int M4_F8_RESTORE_FACTORY_SETTINGS_VALUE = 1032;
    /**
     * <pre>
     * 反初始化电源管理模块
     * </pre>
     *
     * <code>M5_F1_DEINIT = 1280;</code>
     */
    public static final int M5_F1_DEINIT_VALUE = 1280;
    /**
     * <pre>
     * 初始化电源管理模块
     * </pre>
     *
     * <code>M5_F1_INIT = 1281;</code>
     */
    public static final int M5_F1_INIT_VALUE = 1281;
    /**
     * <pre>
     * 在阻塞模式下从飞机施加高功率
     * </pre>
     *
     * <code>M5_F2_APPLY_HIGH_POWER_SYNC = 1282;</code>
     */
    public static final int M5_F2_APPLY_HIGH_POWER_SYNC_VALUE = 1282;
    /**
     * <pre>
     * 用于设置高功率应用引脚的电平状态的注册回调函数
     * </pre>
     *
     * <code>M5_F3_REG_WRITE_HIGH_POWER_APPLY_PIN_CALLBACK = 1283;</code>
     */
    public static final int M5_F3_REG_WRITE_HIGH_POWER_APPLY_PIN_CALLBACK_VALUE = 1283;
    /**
     * <pre>
     * 用于通知payload飞机即将关机并获取payload是否准备好关机状态的注册回调函数
     * </pre>
     *
     * <code>M5_F4_REG_POWER_OFF_NOTIFICATION_CALLBACK = 1284;</code>
     */
    public static final int M5_F4_REG_POWER_OFF_NOTIFICATION_CALLBACK_VALUE = 1284;
    /**
     * <pre>
     * 反初始化飞行控制模块
     * </pre>
     *
     * <code>M6_F0_DEINIT = 1536;</code>
     */
    public static final int M6_F0_DEINIT_VALUE = 1536;
    /**
     * <pre>
     * 初始化飞行控制模块
     * </pre>
     *
     * <code>M6_F1_INIT = 1537;</code>
     */
    public static final int M6_F1_INIT_VALUE = 1537;
    /**
     * <pre>
     * 启用/禁用 RTK 位置功能
     * </pre>
     *
     * <code>M6_F2_SET_TRK_POSITION_ENABLE = 1538;</code>
     */
    public static final int M6_F2_SET_TRK_POSITION_ENABLE_VALUE = 1538;
    /**
     * <pre>
     * 获取 RTK 启用状态
     * </pre>
     *
     * <code>M6_F3_GET_TRK_POSITION_ENABLE = 1539;</code>
     */
    public static final int M6_F3_GET_TRK_POSITION_ENABLE_VALUE = 1539;
    /**
     * <pre>
     * 设置失联动作
     * </pre>
     *
     * <code>M6_F4_SET_RC_LOST_ACTION = 1540;</code>
     */
    public static final int M6_F4_SET_RC_LOST_ACTION_VALUE = 1540;
    /**
     * <pre>
     * 获取遥控器失联动作(悬停/降落/返回)
     * </pre>
     *
     * <code>M6_F5_GET_RC_LOST_ACTION = 1541;</code>
     */
    public static final int M6_F5_GET_RC_LOST_ACTION_VALUE = 1541;
    /**
     * <pre>
     * 启用/禁用水平视觉障碍物避让(前、后、左、右)
     * </pre>
     *
     * <code>M6_F6_SET_HORIZONTAL_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1542;</code>
     */
    public static final int M6_F6_SET_HORIZONTAL_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS_VALUE = 1542;
    /**
     * <pre>
     * 获取水平视觉障碍物避让(前、后、左、右)的开关状态
     * </pre>
     *
     * <code>M6_F7_GET_HORIZONTAL_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1543;</code>
     */
    public static final int M6_F7_GET_HORIZONTAL_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS_VALUE = 1543;
    /**
     * <pre>
     * 开启/关闭水平雷达避障功能
     * </pre>
     *
     * <code>M6_F8_SET_HORIZONTAL_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1544;</code>
     */
    public static final int M6_F8_SET_HORIZONTAL_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS_VALUE = 1544;
    /**
     * <pre>
     * 获取水平雷达避障功能的状态
     * </pre>
     *
     * <code>M6_F9_GET_HORIZONTAL_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1545;</code>
     */
    public static final int M6_F9_GET_HORIZONTAL_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS_VALUE = 1545;
    /**
     * <pre>
     * 开启/关闭上视避障功能
     * </pre>
     *
     * <code>M6_F10_SET_UPWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1546;</code>
     */
    public static final int M6_F10_SET_UPWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS_VALUE = 1546;
    /**
     * <pre>
     * 获取上视避障功能的状态
     * </pre>
     *
     * <code>M6_F11_GET_UPWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1547;</code>
     */
    public static final int M6_F11_GET_UPWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS_VALUE = 1547;
    /**
     * <pre>
     * 开启/关闭向上雷达避障功能
     * </pre>
     *
     * <code>M6_F12_SET_UPWARDS_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1548;</code>
     */
    public static final int M6_F12_SET_UPWARDS_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS_VALUE = 1548;
    /**
     * <pre>
     * 获取向上雷达避障功能的状态
     * </pre>
     *
     * <code>M6_F13_GET_UPWARDS_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1549;</code>
     */
    public static final int M6_F13_GET_UPWARDS_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS_VALUE = 1549;
    /**
     * <pre>
     * 开启/关闭向下视觉避障功能
     * </pre>
     *
     * <code>M6_F14_SET_DOWNWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1550;</code>
     */
    public static final int M6_F14_SET_DOWNWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS_VALUE = 1550;
    /**
     * <pre>
     * 获取向下视觉避障功能的状态
     * </pre>
     *
     * <code>M6_F15_GET_DOWNWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS = 1551;</code>
     */
    public static final int M6_F15_GET_DOWNWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS_VALUE = 1551;
    /**
     * <pre>
     * 紧急制动飞行
     * </pre>
     *
     * <code>M6_F16_ARREST_FLYING = 1552;</code>
     */
    public static final int M6_F16_ARREST_FLYING_VALUE = 1552;
    /**
     * <pre>
     * 退出紧急制动状态
     * </pre>
     *
     * <code>M6_F17_CANCEL_ARREST_FLYING = 1553;</code>
     */
    public static final int M6_F17_CANCEL_ARREST_FLYING_VALUE = 1553;
    /**
     * <pre>
     * 无人机在地面时启动电机
     * </pre>
     *
     * <code>M6_F18_TURN_ON_MOTORS = 1554;</code>
     */
    public static final int M6_F18_TURN_ON_MOTORS_VALUE = 1554;
    /**
     * <pre>
     * 无人机在地面时关闭电机
     * </pre>
     *
     * <code>M6_F19_TURN_OFF_MOTORS = 1555;</code>
     */
    public static final int M6_F19_TURN_OFF_MOTORS_VALUE = 1555;
    /**
     * <pre>
     * 在任何情况下紧急停止电机
     * </pre>
     *
     * <code>M6_F20_EMERGENCY_STOP_OFF = 1556;</code>
     */
    public static final int M6_F20_EMERGENCY_STOP_OFF_VALUE = 1556;
    /**
     * <pre>
     * 当无人机在地面时请求起飞
     * </pre>
     *
     * <code>M6_F21_START_TASK_OFF = 1557;</code>
     */
    public static final int M6_F21_START_TASK_OFF_VALUE = 1557;
    /**
     * <pre>
     * 当无人机在空中时请求降落
     * </pre>
     *
     * <code>M6_F22_START_LANDING = 1558;</code>
     */
    public static final int M6_F22_START_LANDING_VALUE = 1558;
    /**
     * <pre>
     * 当无人机正在降落时请求取消降落
     * </pre>
     *
     * <code>M6_F23_CANCEL_LANDING = 1559;</code>
     */
    public static final int M6_F23_CANCEL_LANDING_VALUE = 1559;
    /**
     * <pre>
     * 当无人机距离地面0.7米时确认着陆
     * </pre>
     *
     * <code>M6_F24_START_CONFIRM_LANDING = 1560;</code>
     */
    public static final int M6_F24_START_CONFIRM_LANDING_VALUE = 1560;
    /**
     * <pre>
     * 在任何情况下都强制着陆
     * </pre>
     *
     * <code>M6_F25_START_FORCE_LANDING = 1561;</code>
     */
    public static final int M6_F25_START_FORCE_LANDING_VALUE = 1561;
    /**
     * <pre>
     * 设置自定义 GPS（非 RTK）的 home 点位置
     * </pre>
     *
     * <code>M6_F26_SET_HOME_LOCATION_USING_GPS_COORDINATES = 1562;</code>
     */
    public static final int M6_F26_SET_HOME_LOCATION_USING_GPS_COORDINATES_VALUE = 1562;
    /**
     * <pre>
     * 使用当前飞机的 GPS（非 RTK）位置设置 home 点位置
     * </pre>
     *
     * <code>M6_F27_SET_HOME_LOCATION_USING_CURRENT_AIRCRAFT_LOCATION = 1563;</code>
     */
    public static final int M6_F27_SET_HOME_LOCATION_USING_CURRENT_AIRCRAFT_LOCATION_VALUE = 1563;
    /**
     * <pre>
     * 设置返航高度
     * </pre>
     *
     * <code>M6_F28_SET_GO_HOME_ALTITUDE = 1564;</code>
     */
    public static final int M6_F28_SET_GO_HOME_ALTITUDE_VALUE = 1564;
    /**
     * <pre>
     * 获取返航高度
     * </pre>
     *
     * <code>M6_F29_GET_GO_HOME_ALTITUDE = 1565;</code>
     */
    public static final int M6_F29_GET_GO_HOME_ALTITUDE_VALUE = 1565;
    /**
     * <pre>
     * 获取国家码
     * </pre>
     *
     * <code>M6_F30_GET_COUNTRY_CODE = 1566;</code>
     */
    public static final int M6_F30_GET_COUNTRY_CODE_VALUE = 1566;
    /**
     * <pre>
     * 当无人机在空中时，请求返航动作
     * </pre>
     *
     * <code>M6_F31_START_GO_HOME = 1567;</code>
     */
    public static final int M6_F31_START_GO_HOME_VALUE = 1567;
    /**
     * <pre>
     * 在无人机返航时，请求取消返航动作
     * </pre>
     *
     * <code>M6_F32_CANCEL_GO_HOME = 1568;</code>
     */
    public static final int M6_F32_CANCEL_GO_HOME_VALUE = 1568;
    /**
     * <pre>
     * 获取无人机的摇杆控制权限
     * </pre>
     *
     * <code>M6_F33_OBTAIN_JOYSTICK_CTRL_AUTHORITY = 1569;</code>
     */
    public static final int M6_F33_OBTAIN_JOYSTICK_CTRL_AUTHORITY_VALUE = 1569;
    /**
     * <pre>
     * 释放无人机摇杆控制权限
     * </pre>
     *
     * <code>M6_F34_RELEASE_JOYSTICK_CTRL_AUTHORITY = 1570;</code>
     */
    public static final int M6_F34_RELEASE_JOYSTICK_CTRL_AUTHORITY_VALUE = 1570;
    /**
     * <pre>
     * 使用回调函数订阅摇杆控制权限切换事件
     * </pre>
     *
     * <code>M6_F35_REG_JOYSTICK_CTRL_AUTHORITY_EVENT_CALLBACK = 1571;</code>
     */
    public static final int M6_F35_REG_JOYSTICK_CTRL_AUTHORITY_EVENT_CALLBACK_VALUE = 1571;
    /**
     * <pre>
     * 请求执行摇杆动作
     * </pre>
     *
     * <code>M6_F36_EXECUTE_JOYSTICK_ACTION = 1572;</code>
     */
    public static final int M6_F36_EXECUTE_JOYSTICK_ACTION_VALUE = 1572;
    /**
     * <pre>
     * 请求紧急制动动作
     * </pre>
     *
     * <code>M6_F37_EXECUTE_EMERGENCY_BRAKE_ACTION = 1573;</code>
     */
    public static final int M6_F37_EXECUTE_EMERGENCY_BRAKE_ACTION_VALUE = 1573;
    /**
     * <pre>
     * 请求取消紧急制动动作
     * </pre>
     *
     * <code>M6_F38_CANCEL_EMERGENCY_BRAKE_ACTION = 1574;</code>
     */
    public static final int M6_F38_CANCEL_EMERGENCY_BRAKE_ACTION_VALUE = 1574;
    /**
     * <pre>
     * 获取飞机的通用信息
     * </pre>
     *
     * <code>M6_F39_GET_GENERA_INFO = 1575;</code>
     */
    public static final int M6_F39_GET_GENERA_INFO_VALUE = 1575;
    /**
     * <pre>
     * 启动/禁用失联动作状态
     * </pre>
     *
     * <code>M6_F40_SET_RC_LOST_ACTION_ENABLE_STATUS = 1576;</code>
     */
    public static final int M6_F40_SET_RC_LOST_ACTION_ENABLE_STATUS_VALUE = 1576;
    /**
     * <pre>
     * 获取失联动作状态
     * </pre>
     *
     * <code>M6_F41_GET_ENABEL_RC_LOST_ACTION_STATUS = 1577;</code>
     */
    public static final int M6_F41_GET_ENABEL_RC_LOST_ACTION_STATUS_VALUE = 1577;
    /**
     * <pre>
     * 注册回调函数触发 FTS 事件
     * </pre>
     *
     * <code>M6_F42_REG_TRIGGER_FTS_EVENT_CALLBACK = 1578;</code>
     */
    public static final int M6_F42_REG_TRIGGER_FTS_EVENT_CALLBACK_VALUE = 1578;
    /**
     * <pre>
     * 初始化自定义控件模块
     * </pre>
     *
     * <code>M7_F1_INIT = 1793;</code>
     */
    public static final int M7_F1_INIT_VALUE = 1793;
    /**
     * <pre>
     * 注册配置文件默认的路径
     * </pre>
     *
     * <code>M7_F2_REG_DEFAULT_UI_CONFIG_BY_DIR_PATH = 1794;</code>
     */
    public static final int M7_F2_REG_DEFAULT_UI_CONFIG_BY_DIR_PATH_VALUE = 1794;
    /**
     * <pre>
     * 注册配置文件的路径
     * </pre>
     *
     * <code>M7_F3_REG_UI_CONFIG_BY_DIR_PATH = 1795;</code>
     */
    public static final int M7_F3_REG_UI_CONFIG_BY_DIR_PATH_VALUE = 1795;
    /**
     * <pre>
     * 注册二进制配置文件默认的路径
     * </pre>
     *
     * <code>M7_F4_REG_DEFAULT_UI_BY_BINARY_ARRAY = 1796;</code>
     */
    public static final int M7_F4_REG_DEFAULT_UI_BY_BINARY_ARRAY_VALUE = 1796;
    /**
     * <pre>
     * 注册控件配置信息
     * </pre>
     *
     * <code>M7_F5_REG_UI_CONFIG_BY_BINARY_ARRAY = 1797;</code>
     */
    public static final int M7_F5_REG_UI_CONFIG_BY_BINARY_ARRAY_VALUE = 1797;
    /**
     * <pre>
     * 注册处理函数列表
     * </pre>
     *
     * <code>M7_F6_REG_HANDLER_LIST = 1798;</code>
     */
    public static final int M7_F6_REG_HANDLER_LIST_VALUE = 1798;
    /**
     * <pre>
     * 向移动端App的浮窗发送消息
     * </pre>
     *
     * <code>M7_F7_FLOATION_WINDOW_SHOW_MESSAGE = 1799;</code>
     */
    public static final int M7_F7_FLOATION_WINDOW_SHOW_MESSAGE_VALUE = 1799;
    /**
     * <pre>
     * 获取信息发送通道的状态
     * </pre>
     *
     * <code>M7_F8_GET_CHANNELL_STATE = 1800;</code>
     */
    public static final int M7_F8_GET_CHANNELL_STATE_VALUE = 1800;
    /**
     * <pre>
     * 获取扬声器状态
     * </pre>
     *
     * <code>M7_F9_GET_SPEAKER_STATE = 1801;</code>
     */
    public static final int M7_F9_GET_SPEAKER_STATE_VALUE = 1801;
    /**
     * <pre>
     * 设置扬声器工作模式
     * </pre>
     *
     * <code>M7_F10_SET_WORK_MODE = 1802;</code>
     */
    public static final int M7_F10_SET_WORK_MODE_VALUE = 1802;
    /**
     * <pre>
     * 开始播放
     * </pre>
     *
     * <code>M7_F11_START_PLAY = 1803;</code>
     */
    public static final int M7_F11_START_PLAY_VALUE = 1803;
    /**
     * <pre>
     * 停止播放
     * </pre>
     *
     * <code>M7_F12_STOP_PLAY = 1804;</code>
     */
    public static final int M7_F12_STOP_PLAY_VALUE = 1804;
    /**
     * <pre>
     * 设置播放模式
     * </pre>
     *
     * <code>M7_F13_SET_PLAY_MODE = 1805;</code>
     */
    public static final int M7_F13_SET_PLAY_MODE_VALUE = 1805;
    /**
     * <pre>
     * 设置音量
     * </pre>
     *
     * <code>M7_F14_SET_VOLUME = 1806;</code>
     */
    public static final int M7_F14_SET_VOLUME_VALUE = 1806;
    /**
     * <pre>
     * 接收文本信息
     * </pre>
     *
     * <code>M7_F15_RECEIVE_TTS_DATA = 1807;</code>
     */
    public static final int M7_F15_RECEIVE_TTS_DATA_VALUE = 1807;
    /**
     * <pre>
     * 接收音频信息
     * </pre>
     *
     * <code>M7_F16_RECEIVE_AUDIO_DATA = 1808;</code>
     */
    public static final int M7_F16_RECEIVE_AUDIO_DATA_VALUE = 1808;
    /**
     * <pre>
     * 反初始化 M8 模块
     * </pre>
     *
     * <code>M8_F0_DEINIT = 2048;</code>
     */
    public static final int M8_F0_DEINIT_VALUE = 2048;
    /**
     * <pre>
     * 初始化 M8 模块
     * </pre>
     *
     * <code>M8_F1_INIT = 2049;</code>
     */
    public static final int M8_F1_INIT_VALUE = 2049;
    /**
     * <pre>
     * 注册回调以获取 M8 信息
     * </pre>
     *
     * <code>M8_F2_REG_M8_INFO_CALLBACK = 2050;</code>
     */
    public static final int M8_F2_REG_M8_INFO_CALLBACK_VALUE = 2050;
    /**
     * <pre>
     * 初始化时间同步功能模块
     * </pre>
     *
     * <code>M9_F1_INIT = 2305;</code>
     */
    public static final int M9_F1_INIT_VALUE = 2305;
    /**
     * <pre>
     * 获取最新的时间戳
     * </pre>
     *
     * <code>M9_F2_REG_GET_NEWEST_PPS_TRIGGER_TIME_CALLBACK = 2306;</code>
     */
    public static final int M9_F2_REG_GET_NEWEST_PPS_TRIGGER_TIME_CALLBACK_VALUE = 2306;
    /**
     * <pre>
     * 时间转换
     * </pre>
     *
     * <code>M9_F3_TRANSFER_TO_AIRCRAFT_TIME = 2307;</code>
     */
    public static final int M9_F3_TRANSFER_TO_AIRCRAFT_TIME_VALUE = 2307;
    /**
     * <pre>
     * 反初始化低速数据通道模块
     * </pre>
     *
     * <code>M10_F0_DEINIT = 2560;</code>
     */
    public static final int M10_F0_DEINIT_VALUE = 2560;
    /**
     * <pre>
     * 初始化低速数据通道模块
     * </pre>
     *
     * <code>M10_F1_INIT = 2561;</code>
     */
    public static final int M10_F1_INIT_VALUE = 2561;
    /**
     * <pre>
     * 发送数据
     * </pre>
     *
     * <code>M10_F2_SEND_DATA = 2562;</code>
     */
    public static final int M10_F2_SEND_DATA_VALUE = 2562;
    /**
     * <pre>
     * 发送数据状态
     * </pre>
     *
     * <code>M10_F3_GET_SEND_DATA = 2563;</code>
     */
    public static final int M10_F3_GET_SEND_DATA_VALUE = 2563;
    /**
     * <pre>
     * 注册返回数据回调函数
     * </pre>
     *
     * <code>M10_F4_REG_RECV_DATA_CALLBACK = 2564;</code>
     */
    public static final int M10_F4_REG_RECV_DATA_CALLBACK_VALUE = 2564;
    /**
     * <pre>
     * 设置带宽比例
     * </pre>
     *
     * <code>M10_F5_SET_BAND_WIDTH_PROPORTION = 2818;</code>
     */
    public static final int M10_F5_SET_BAND_WIDTH_PROPORTION_VALUE = 2818;
    /**
     * <pre>
     * 获取数据流远程地址
     * </pre>
     *
     * <code>M10_F6_GET_DATA_STREAM_REMOTE_ADDRESS = 2819;</code>
     */
    public static final int M10_F6_GET_DATA_STREAM_REMOTE_ADDRESS_VALUE = 2819;
    /**
     * <pre>
     * 发送数据流数据
     * </pre>
     *
     * <code>M10_F7_SEND_DATA_STREAM_DATA = 2820;</code>
     */
    public static final int M10_F7_SEND_DATA_STREAM_DATA_VALUE = 2820;
    /**
     * <pre>
     * 获取数据流状态
     * </pre>
     *
     * <code>M10_F8_GET_DATA_STREAM_STATE = 2821;</code>
     */
    public static final int M10_F8_GET_DATA_STREAM_STATE_VALUE = 2821;
    /**
     * <pre>
     * 反初始化X-Port
     * </pre>
     *
     * <code>M11_F0_DEINIT = 3072;</code>
     */
    public static final int M11_F0_DEINIT_VALUE = 3072;
    /**
     * <pre>
     * 初始化X-Port
     * </pre>
     *
     * <code>M11_F1_INIT = 3073;</code>
     */
    public static final int M11_F1_INIT_VALUE = 3073;
    /**
     * <pre>
     * 接收X-Port 状态
     * </pre>
     *
     * <code>M11_F2_REG_RECEIVE_SYSTEM_STATE_CALLBACK = 3074;</code>
     */
    public static final int M11_F2_REG_RECEIVE_SYSTEM_STATE_CALLBACK_VALUE = 3074;
    /**
     * <pre>
     * 获取X-Port 姿态角
     * </pre>
     *
     * <code>M11_F3_REG_RECEIVE_ATTITUDE_INFORMATION_CALLBACK = 3075;</code>
     */
    public static final int M11_F3_REG_RECEIVE_ATTITUDE_INFORMATION_CALLBACK_VALUE = 3075;
    /**
     * <pre>
     * 设置X-Port 的模式
     * </pre>
     *
     * <code>M11_F4_SET_GIMBAL_MODE_SYNC = 3076;</code>
     */
    public static final int M11_F4_SET_GIMBAL_MODE_SYNC_VALUE = 3076;
    /**
     * <pre>
     * 转动X-Port
     * </pre>
     *
     * <code>M11_F5_ROTATE_SYNC = 3077;</code>
     */
    public static final int M11_F5_ROTATE_SYNC_VALUE = 3077;
    /**
     * <pre>
     * 释放X-Port 的控制权限
     * </pre>
     *
     * <code>M11_F6_RELEASE_CONTROL_PERMISSION_SYNC = 3078;</code>
     */
    public static final int M11_F6_RELEASE_CONTROL_PERMISSION_SYNC_VALUE = 3078;
    /**
     * <pre>
     * X-Port 复位
     * </pre>
     *
     * <code>M11_F7_RESET_SYNC = 3079;</code>
     */
    public static final int M11_F7_RESET_SYNC_VALUE = 3079;
    /**
     * <pre>
     * 设置X-Port 限位角
     * </pre>
     *
     * <code>M11_F8_SET_LIMIT_ANGLE_SYNC = 3080;</code>
     */
    public static final int M11_F8_SET_LIMIT_ANGLE_SYNC_VALUE = 3080;
    /**
     * <pre>
     * 获取X-Port 的限位角
     * </pre>
     *
     * <code>M11_F9_GET_LIMIT_ANGLE_SYNC = 3081;</code>
     */
    public static final int M11_F9_GET_LIMIT_ANGLE_SYNC_VALUE = 3081;
    /**
     * <pre>
     * 设置X-Port 云台速度转换系数
     * </pre>
     *
     * <code>M11_F10_SET_SPEED_CONVERSION_FACTOR = 3082;</code>
     */
    public static final int M11_F10_SET_SPEED_CONVERSION_FACTOR_VALUE = 3082;
    /**
     * <pre>
     * 初始化升级模块
     * </pre>
     *
     * <code>M12_F1_INIT = 3329;</code>
     */
    public static final int M12_F1_INIT_VALUE = 3329;
    /**
     * <pre>
     * 启动本地升级模块
     * </pre>
     *
     * <code>M12_F2_ENABLE_LOCAL_UPGRADE = 3330;</code>
     */
    public static final int M12_F2_ENABLE_LOCAL_UPGRADE_VALUE = 3330;
    /**
     * <pre>
     * 注册升级过程的处理程序
     * </pre>
     *
     * <code>M12_F3_REG_HANDLER = 3331;</code>
     */
    public static final int M12_F3_REG_HANDLER_VALUE = 3331;
    /**
     * <pre>
     * 推送升级状态
     * </pre>
     *
     * <code>M12_F4_PUSH_UPGRADE_STATE = 3332;</code>
     */
    public static final int M12_F4_PUSH_UPGRADE_STATE_VALUE = 3332;
    /**
     * <pre>
     * 反初始化感知模块
     * </pre>
     *
     * <code>M13_F0_DEINIT = 3584;</code>
     */
    public static final int M13_F0_DEINIT_VALUE = 3584;
    /**
     * <pre>
     * 初始化感知模块
     * </pre>
     *
     * <code>M13_F1_INIT = 3585;</code>
     */
    public static final int M13_F1_INIT_VALUE = 3585;
    /**
     * <pre>
     * 订阅两个立体相机在同一方向的原始图像
     * </pre>
     *
     * <code>M13_F2_SUBSCRIBE_PERCEPTION_IMAGE = 3586;</code>
     */
    public static final int M13_F2_SUBSCRIBE_PERCEPTION_IMAGE_VALUE = 3586;
    /**
     * <pre>
     * 取消订阅同一方向的两个立体摄像机的原始图像
     * </pre>
     *
     * <code>M13_F3_UNSUBSCRIBE_PERCEPTION_IMAGE = 3587;</code>
     */
    public static final int M13_F3_UNSUBSCRIBE_PERCEPTION_IMAGE_VALUE = 3587;
    /**
     * <pre>
     * 获取所有立体摄像机的内部和外部参数
     * </pre>
     *
     * <code>M13_F4_GET_STEREO_CAMERA_PARAMETERS = 3588;</code>
     */
    public static final int M13_F4_GET_STEREO_CAMERA_PARAMETERS_VALUE = 3588;
    /**
     * <pre>
     * 反初始化码流
     * </pre>
     *
     * <code>M14_F0_DEINIT = 3840;</code>
     */
    public static final int M14_F0_DEINIT_VALUE = 3840;
    /**
     * <pre>
     * 初始化码流
     * </pre>
     *
     * <code>M14_F1_INIT = 3841;</code>
     */
    public static final int M14_F1_INIT_VALUE = 3841;
    /**
     * <pre>
     * 按选定位置启动 FPV 或摄像机 H264 流
     * </pre>
     *
     * <code>M14_F2_START_H264_STREAM = 3842;</code>
     */
    public static final int M14_F2_START_H264_STREAM_VALUE = 3842;
    /**
     * <pre>
     * 按选定位置关闭 FPV 或摄像机 H264 流
     * </pre>
     *
     * <code>M14_F3_STOP_H264_STREAM = 3843;</code>
     */
    public static final int M14_F3_STOP_H264_STREAM_VALUE = 3843;
    /**
     * <pre>
     * 反初始化航点 V2模块
     * </pre>
     *
     * <code>M15_F0_DEINIT = 4096;</code>
     */
    public static final int M15_F0_DEINIT_VALUE = 4096;
    /**
     * <pre>
     * 初始化航点 V2模块
     * </pre>
     *
     * <code>M15_F1_INIT = 4097;</code>
     */
    public static final int M15_F1_INIT_VALUE = 4097;
    /**
     * <pre>
     * 初始化任务模块设置
     * </pre>
     *
     * <code>M15_F2_UPLOAD_MISSION = 4098;</code>
     */
    public static final int M15_F2_UPLOAD_MISSION_VALUE = 4098;
    /**
     * <pre>
     * 开始任务
     * </pre>
     *
     * <code>M15_F3_START = 4099;</code>
     */
    public static final int M15_F3_START_VALUE = 4099;
    /**
     * <pre>
     * 停止任务
     * </pre>
     *
     * <code>M15_F4_STOP = 4100;</code>
     */
    public static final int M15_F4_STOP_VALUE = 4100;
    /**
     * <pre>
     * 暂停任务
     * </pre>
     *
     * <code>M15_F5_PAUSE = 4101;</code>
     */
    public static final int M15_F5_PAUSE_VALUE = 4101;
    /**
     * <pre>
     * 恢复任务
     * </pre>
     *
     * <code>M15_F6_RESUME = 4102;</code>
     */
    public static final int M15_F6_RESUME_VALUE = 4102;
    /**
     * <pre>
     * 从飞控获取全局巡航速度设置
     * </pre>
     *
     * <code>M15_F7_GET_GLOBAL_CRUISE_SPEED = 4103;</code>
     */
    public static final int M15_F7_GET_GLOBAL_CRUISE_SPEED_VALUE = 4103;
    /**
     * <pre>
     * 将全局巡航速度设置为飞控
     * </pre>
     *
     * <code>M15_F8_SET_GLOBAL_CRUISE_SPEED = 4104;</code>
     */
    public static final int M15_F8_SET_GLOBAL_CRUISE_SPEED_VALUE = 4104;
    /**
     * <pre>
     * 使用回调函数订阅航点V2 事件
     * </pre>
     *
     * <code>M15_F9_REGISTER_MISSION_EVENT_CALLBACK = 4105;</code>
     */
    public static final int M15_F9_REGISTER_MISSION_EVENT_CALLBACK_VALUE = 4105;
    /**
     * <pre>
     * 使用回调函数订阅航点V2 任务状态
     * </pre>
     *
     * <code>M15_F10_REGISTER_MISSION_STATE_CALLBACK = 4106;</code>
     */
    public static final int M15_F10_REGISTER_MISSION_STATE_CALLBACK_VALUE = 4106;
    /**
     * <pre>
     * 初始化精准定位模块
     * </pre>
     *
     * <code>M16_F1_INIT = 4353;</code>
     */
    public static final int M16_F1_INIT_VALUE = 4353;
    /**
     * <pre>
     * 设置任务索引
     * </pre>
     *
     * <code>M16_F2_SET_TASK_INDEX = 4354;</code>
     */
    public static final int M16_F2_SET_TASK_INDEX_VALUE = 4354;
    /**
     * <pre>
     * 获取精准定位信息
     * </pre>
     *
     * <code>M16_F3_GET_POSITION_INFORMATION_SYNC = 4355;</code>
     */
    public static final int M16_F3_GET_POSITION_INFORMATION_SYNC_VALUE = 4355;
    /**
     * <pre>
     * 初始化MOP通道
     * </pre>
     *
     * <code>M17_F1_INIT = 4609;</code>
     */
    public static final int M17_F1_INIT_VALUE = 4609;
    /**
     * <pre>
     * 创建MOP通道
     * </pre>
     *
     * <code>M17_F2_CREATE = 4610;</code>
     */
    public static final int M17_F2_CREATE_VALUE = 4610;
    /**
     * <pre>
     * 销毁已创建的MOP通道
     * </pre>
     *
     * <code>M17_F3_DESTROY = 4611;</code>
     */
    public static final int M17_F3_DESTROY_VALUE = 4611;
    /**
     * <pre>
     * 信道绑定
     * </pre>
     *
     * <code>M17_F4_BIND = 4612;</code>
     */
    public static final int M17_F4_BIND_VALUE = 4612;
    /**
     * <pre>
     * 接受MOP通道连接
     * </pre>
     *
     * <code>M17_F5_ACCEPT = 4613;</code>
     */
    public static final int M17_F5_ACCEPT_VALUE = 4613;
    /**
     * <pre>
     * MOP通道连接
     * </pre>
     *
     * <code>M17_F6_CONNECT = 4614;</code>
     */
    public static final int M17_F6_CONNECT_VALUE = 4614;
    /**
     * <pre>
     * 关闭已创建的MOP连接
     * </pre>
     *
     * <code>M17_F7_CLOSE = 4615;</code>
     */
    public static final int M17_F7_CLOSE_VALUE = 4615;
    /**
     * <pre>
     * 发送数据
     * </pre>
     *
     * <code>M17_F8_SEND_DATA = 4616;</code>
     */
    public static final int M17_F8_SEND_DATA_VALUE = 4616;
    /**
     * <pre>
     * 接收数据
     * </pre>
     *
     * <code>M17_F9_RECV_DATA = 4617;</code>
     */
    public static final int M17_F9_RECV_DATA_VALUE = 4617;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static ActiveEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ActiveEnum forNumber(int value) {
      switch (value) {
        case 0: return UNKNOW;
        case 512: return M2_F0_DEINIT;
        case 513: return M2_F1_INIT;
        case 514: return M2_F2_QUATERNION;
        case 515: return M2_F3_ACCELERATION_GROUND;
        case 516: return M2_F4_ACCELERATION_BODY;
        case 517: return M2_F5_ACCELERATION_RAW;
        case 518: return M2_F6_VELOCITY;
        case 519: return M2_F7_ANGULAR_RATE_FUSIONED;
        case 520: return M2_F8_ANGULAR_RATE_RAW;
        case 521: return M2_F9_ALTITUDE_FUSED;
        case 522: return M2_F10_ALTITUDE_BAROMETER;
        case 523: return M2_F11_ALTITUDE_OF_HOMEPOINT;
        case 524: return M2_F12_HEIGHT_FUSION;
        case 525: return M2_F13_HEIGHT_RELATIVE;
        case 526: return M2_F14_POSITION_FUSED;
        case 527: return M2_F15_GPS_DATE;
        case 528: return M2_F16_GPS_TIME;
        case 529: return M2_F17_GPS_POSITION;
        case 530: return M2_F18_GPS_VELOCITY;
        case 531: return M2_F19_GPS_DETAILS;
        case 532: return M2_F20_GPS_SIGNAL_LEVEL;
        case 533: return M2_F21_RTK_POSITION;
        case 534: return M2_F22_RTK_VELOCITY;
        case 535: return M2_F23_RTK_YAW;
        case 536: return M2_F24_RTK_POSITION_INFO;
        case 537: return M2_F25_RTK_YAW_INFO;
        case 538: return M2_F26_COMPASS;
        case 539: return M2_F27_RC;
        case 540: return M2_F28_GIMBAL_ANGLES;
        case 541: return M2_F29_GIMBAL_STATUS;
        case 542: return M2_F30_STATUS_FLIGHT;
        case 543: return M2_F31_STATUS_DISPLAYMODE;
        case 544: return M2_F32_STATUS_LANDINGGEAR;
        case 545: return M2_F33_STATUS_MOTOR_START_ERROR;
        case 546: return M2_F34_BATTERY_INFO;
        case 547: return M2_F35_CONTROL_DEVICE;
        case 548: return M2_F36_HARD_SYNC;
        case 549: return M2_F37_GPS_CONTROL_LEVEL;
        case 550: return M2_F38_RC_WITH_FLAG_DATA;
        case 551: return M2_F39_ESC_DATA;
        case 552: return M2_F40_RTK_CONNECT_STATUS;
        case 553: return M2_F41_GIMBAL_CONTROL_MODE;
        case 554: return M2_F42_FLIGHT_ANOMALY;
        case 555: return M2_F43_POSITION_VO;
        case 556: return M2_F44_AVOID_DATA;
        case 557: return M2_F45_HOME_POINT_SET_STATUS;
        case 558: return M2_F46_HOME_POINT_INFO;
        case 559: return M2_F47_THREE_GIMBAL_DATA;
        case 560: return M2_F48_BATTERY_SINGLE_INFO_INDEX1;
        case 561: return M2_F49_BATTERY_SINGLE_INFO_INDEX2;
        case 768: return M3_F0_DEINIT;
        case 769: return M3_F1_INIT;
        case 770: return M3_F2_GET_CAMERA_TYPE;
        case 771: return M3_F3_GET_FIRMWARE_VERSION;
        case 772: return M3_F4_GET_CAMERA_CONNECT_STATUS;
        case 773: return M3_F5_SET_MODE;
        case 774: return M3_F6_GET_MODE;
        case 775: return M3_F7_SET_SHOOT_PHOTO_MODE;
        case 776: return M3_F8_GET_SHOOT_PHOTO_MODE;
        case 777: return M3_F9_START_SHOOT_PHOTO;
        case 778: return M3_F10_STOP_SHOOT_PHOTO;
        case 779: return M3_F11_GET_CAPTURING_STATE;
        case 780: return M3_F12_SET_PHOTO_BURST_COUNT;
        case 781: return M3_F13_SET_PHOTO_TIME_INTERVAL_SETTINGS;
        case 782: return M3_F14_GET_PHOTO_TIME_INTERVAL_SETTINGS;
        case 783: return M3_F15_GET_INTERVAL_SHOOTING_REMAIN_TIME;
        case 784: return M3_F16_SET_FOCUS_MODE;
        case 785: return M3_F17_GET_FOCUS_MODE;
        case 786: return M3_F18_SET_FOCUS_TARGET;
        case 787: return M3_F19_GET_FOCUS_TARGET;
        case 788: return M3_F20_START_CONTINUOUS_OPTICAL_ZOOM;
        case 789: return M3_F21_STOP_CONTINUOUS_OPTICAL_ZOOM;
        case 790: return M3_F22_SET_OPTICAL_ZOOM_PARAM;
        case 791: return M3_F23_GET_OPTICAL_ZOOM_PARAM;
        case 792: return M3_F24_SET_INFRARED_ZOOM_PARAM;
        case 793: return M3_F25_SET_TAP_ZOOM_ENABLED;
        case 794: return M3_F26_GET_TAP_ZOOM_ENABLED;
        case 795: return M3_F27_SET_TAP_ZOOM_MULTIPLIER;
        case 796: return M3_F28_GET_TAP_ZOOM_MULTIPLIER;
        case 797: return M3_F29_TAP_ZOOM_AT_TARGET;
        case 798: return M3_F30_GET_FOCUS_RING_RANGE;
        case 799: return M3_F31_SET_FOCUS_RING_VALUE;
        case 800: return M3_F32_GET_FOCUS_RING_VALUE;
        case 801: return M3_F33_SET_EXPOSURE_MODE;
        case 802: return M3_F34_GET_EXPOSURE_MODE;
        case 803: return M3_F35_SET_ISO;
        case 804: return M3_F36_GET_ISO;
        case 805: return M3_F37_SET_APERTURE;
        case 806: return M3_F38_GET_APERTURE;
        case 807: return M3_F39_SET_SHUTTER_SPEED;
        case 808: return M3_F40_GET_SHUTTER_SPEED;
        case 809: return M3_F41_SET_EXPOSURE_COMPENSATION;
        case 810: return M3_F42_GET_EXPOSURE_COMPENSATION;
        case 811: return M3_F43_SET_AE_LOCK_ENABLED;
        case 812: return M3_F44_GET_AE_LOCK_ENABLED;
        case 813: return M3_F45_RESET_CAMERA_SETTINGS;
        case 814: return M3_F46_START_RECORD_VIDEO;
        case 815: return M3_F47_STOP_RECORD_VIDEO;
        case 816: return M3_F48_GET_RECORDING_STATE;
        case 817: return M3_F49_GET_RECORDING_TIME;
        case 818: return M3_F50_GET_STREAM_SOURCE_RANGE;
        case 819: return M3_F51_SET_STREAM_SOURCE;
        case 820: return M3_F52_GET_PHOTO_STORAGE_FORMAT_RANGE;
        case 821: return M3_F53_SET_PHOTO_FORMAT;
        case 822: return M3_F54_GET_PHOTO_FORMAT;
        case 823: return M3_F55_GET_VIDEO_FORMAT_RANGE;
        case 824: return M3_F56_SET_VIDEO_STORAGE_FORMAT;
        case 825: return M3_F57_GET_VIDEO_STORAGE_FORMAT;
        case 826: return M3_F58_GET_PHOTO_RATIO_RANGE;
        case 827: return M3_F59_SET_PHOTO_RATIO;
        case 828: return M3_F60_GET_PHOTO_RATIO;
        case 829: return M3_F61_GET_VIDEO_RESOLUTION_FRAME_RATE;
        case 830: return M3_F62_GET_NIGHT_SCENE_MODE_RANGE;
        case 831: return M3_F63_SET_NIGHT_SCENE_MODE;
        case 832: return M3_F64_GET_NIGHT_SCENE_MODE;
        case 833: return M3_F65_GET_STREAM_STORAGE_RANGE;
        case 834: return M3_F66_SET_CAPTURE_RECORDING_STREAMS;
        case 835: return M3_F67_GET_CAPTURE_RECORDING_STREAMS;
        case 836: return M3_F68_SET_SYNCHRONIZED_SPLIT_SCREEN_ZOOM_ENABLED;
        case 837: return M3_F69_SET_CUSTOM_EXPAND_NAME;
        case 838: return M3_F70_GET_CUSTOM_EXPAND_NAME;
        case 839: return M3_F71_DOWNLOAD_FILE_LIST;
        case 840: return M3_F72_DOWNLOAD_FILE_LIST_BY_SLICES;
        case 841: return M3_F73_REG_DOWNLOAD_FILE_DATA_CALLBACK;
        case 842: return M3_F74_DOWNLOAD_FILE_BY_INDEX;
        case 843: return M3_F75_DOWNLOAD_SUB_FILE_BY_INDEX_AND_SUB_TYPE;
        case 844: return M3_F76_OBTAIN_DOWNLOADER_RIGHTS;
        case 845: return M3_F77_RELEASE_DOWNLOADER_RIGHTS;
        case 846: return M3_F78_FORMAT_STORAGE;
        case 847: return M3_F79_GET_STORAGE_INFO;
        case 848: return M3_F80_DELETE_FILE_BY_INDEX;
        case 849: return M3_F81_GET_LASER_RANGING_INFO;
        case 850: return M3_F82_SET_POINT_THERMOMETRY_COORDINATE;
        case 851: return M3_F83_GET_POINT_THERMOMETRY_DATA;
        case 852: return M3_F84_SET_AREA_THERMOMETRY_COORDINATE;
        case 853: return M3_F85_GET_AREA_THERMOMETRY_DATA;
        case 854: return M3_F86_SET_FFC_MODE;
        case 855: return M3_F87_TRIGGER_FFC;
        case 856: return M3_F88_SET_INFRARED_CAMERA_GAIN_MODE;
        case 857: return M3_F89_GET_INFRARED_CAMERA_GAIN_MODE_TEMPERATURE_RANGE;
        case 858: return M3_F90_SET_METERING_MODE;
        case 859: return M3_F91_GET_METERING_MODE;
        case 860: return M3_F92_GET_METERING_POINT_REGION_RANGE;
        case 861: return M3_F93_SET_METERING_POINT;
        case 862: return M3_F94_GET_METERING_POINT;
        case 863: return M3_F95_START_RECORD_POINT_CLOUD;
        case 864: return M3_F96_STOP_RECORD_POINT_CLOUD;
        case 1024: return M4_F0_DEINIT;
        case 1025: return M4_F1_INIT;
        case 1026: return M4_F2_SET_MODE;
        case 1027: return M4_F3_RESET;
        case 1028: return M4_F4_ROTATE;
        case 1029: return M4_F5_SET_PITCH_RANGE_EXTENSION_ENABLED;
        case 1030: return M4_F6_SET_CONTROLLER_MAX_SPEED_PERCENTAGE;
        case 1031: return M4_F7_SET_CONTROLLER_SMOOTH_FACTOR;
        case 1032: return M4_F8_RESTORE_FACTORY_SETTINGS;
        case 1280: return M5_F1_DEINIT;
        case 1281: return M5_F1_INIT;
        case 1282: return M5_F2_APPLY_HIGH_POWER_SYNC;
        case 1283: return M5_F3_REG_WRITE_HIGH_POWER_APPLY_PIN_CALLBACK;
        case 1284: return M5_F4_REG_POWER_OFF_NOTIFICATION_CALLBACK;
        case 1536: return M6_F0_DEINIT;
        case 1537: return M6_F1_INIT;
        case 1538: return M6_F2_SET_TRK_POSITION_ENABLE;
        case 1539: return M6_F3_GET_TRK_POSITION_ENABLE;
        case 1540: return M6_F4_SET_RC_LOST_ACTION;
        case 1541: return M6_F5_GET_RC_LOST_ACTION;
        case 1542: return M6_F6_SET_HORIZONTAL_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS;
        case 1543: return M6_F7_GET_HORIZONTAL_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS;
        case 1544: return M6_F8_SET_HORIZONTAL_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS;
        case 1545: return M6_F9_GET_HORIZONTAL_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS;
        case 1546: return M6_F10_SET_UPWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS;
        case 1547: return M6_F11_GET_UPWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS;
        case 1548: return M6_F12_SET_UPWARDS_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS;
        case 1549: return M6_F13_GET_UPWARDS_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS;
        case 1550: return M6_F14_SET_DOWNWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS;
        case 1551: return M6_F15_GET_DOWNWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_STATUS;
        case 1552: return M6_F16_ARREST_FLYING;
        case 1553: return M6_F17_CANCEL_ARREST_FLYING;
        case 1554: return M6_F18_TURN_ON_MOTORS;
        case 1555: return M6_F19_TURN_OFF_MOTORS;
        case 1556: return M6_F20_EMERGENCY_STOP_OFF;
        case 1557: return M6_F21_START_TASK_OFF;
        case 1558: return M6_F22_START_LANDING;
        case 1559: return M6_F23_CANCEL_LANDING;
        case 1560: return M6_F24_START_CONFIRM_LANDING;
        case 1561: return M6_F25_START_FORCE_LANDING;
        case 1562: return M6_F26_SET_HOME_LOCATION_USING_GPS_COORDINATES;
        case 1563: return M6_F27_SET_HOME_LOCATION_USING_CURRENT_AIRCRAFT_LOCATION;
        case 1564: return M6_F28_SET_GO_HOME_ALTITUDE;
        case 1565: return M6_F29_GET_GO_HOME_ALTITUDE;
        case 1566: return M6_F30_GET_COUNTRY_CODE;
        case 1567: return M6_F31_START_GO_HOME;
        case 1568: return M6_F32_CANCEL_GO_HOME;
        case 1569: return M6_F33_OBTAIN_JOYSTICK_CTRL_AUTHORITY;
        case 1570: return M6_F34_RELEASE_JOYSTICK_CTRL_AUTHORITY;
        case 1571: return M6_F35_REG_JOYSTICK_CTRL_AUTHORITY_EVENT_CALLBACK;
        case 1572: return M6_F36_EXECUTE_JOYSTICK_ACTION;
        case 1573: return M6_F37_EXECUTE_EMERGENCY_BRAKE_ACTION;
        case 1574: return M6_F38_CANCEL_EMERGENCY_BRAKE_ACTION;
        case 1575: return M6_F39_GET_GENERA_INFO;
        case 1576: return M6_F40_SET_RC_LOST_ACTION_ENABLE_STATUS;
        case 1577: return M6_F41_GET_ENABEL_RC_LOST_ACTION_STATUS;
        case 1578: return M6_F42_REG_TRIGGER_FTS_EVENT_CALLBACK;
        case 1793: return M7_F1_INIT;
        case 1794: return M7_F2_REG_DEFAULT_UI_CONFIG_BY_DIR_PATH;
        case 1795: return M7_F3_REG_UI_CONFIG_BY_DIR_PATH;
        case 1796: return M7_F4_REG_DEFAULT_UI_BY_BINARY_ARRAY;
        case 1797: return M7_F5_REG_UI_CONFIG_BY_BINARY_ARRAY;
        case 1798: return M7_F6_REG_HANDLER_LIST;
        case 1799: return M7_F7_FLOATION_WINDOW_SHOW_MESSAGE;
        case 1800: return M7_F8_GET_CHANNELL_STATE;
        case 1801: return M7_F9_GET_SPEAKER_STATE;
        case 1802: return M7_F10_SET_WORK_MODE;
        case 1803: return M7_F11_START_PLAY;
        case 1804: return M7_F12_STOP_PLAY;
        case 1805: return M7_F13_SET_PLAY_MODE;
        case 1806: return M7_F14_SET_VOLUME;
        case 1807: return M7_F15_RECEIVE_TTS_DATA;
        case 1808: return M7_F16_RECEIVE_AUDIO_DATA;
        case 2048: return M8_F0_DEINIT;
        case 2049: return M8_F1_INIT;
        case 2050: return M8_F2_REG_M8_INFO_CALLBACK;
        case 2305: return M9_F1_INIT;
        case 2306: return M9_F2_REG_GET_NEWEST_PPS_TRIGGER_TIME_CALLBACK;
        case 2307: return M9_F3_TRANSFER_TO_AIRCRAFT_TIME;
        case 2560: return M10_F0_DEINIT;
        case 2561: return M10_F1_INIT;
        case 2562: return M10_F2_SEND_DATA;
        case 2563: return M10_F3_GET_SEND_DATA;
        case 2564: return M10_F4_REG_RECV_DATA_CALLBACK;
        case 2818: return M10_F5_SET_BAND_WIDTH_PROPORTION;
        case 2819: return M10_F6_GET_DATA_STREAM_REMOTE_ADDRESS;
        case 2820: return M10_F7_SEND_DATA_STREAM_DATA;
        case 2821: return M10_F8_GET_DATA_STREAM_STATE;
        case 3072: return M11_F0_DEINIT;
        case 3073: return M11_F1_INIT;
        case 3074: return M11_F2_REG_RECEIVE_SYSTEM_STATE_CALLBACK;
        case 3075: return M11_F3_REG_RECEIVE_ATTITUDE_INFORMATION_CALLBACK;
        case 3076: return M11_F4_SET_GIMBAL_MODE_SYNC;
        case 3077: return M11_F5_ROTATE_SYNC;
        case 3078: return M11_F6_RELEASE_CONTROL_PERMISSION_SYNC;
        case 3079: return M11_F7_RESET_SYNC;
        case 3080: return M11_F8_SET_LIMIT_ANGLE_SYNC;
        case 3081: return M11_F9_GET_LIMIT_ANGLE_SYNC;
        case 3082: return M11_F10_SET_SPEED_CONVERSION_FACTOR;
        case 3329: return M12_F1_INIT;
        case 3330: return M12_F2_ENABLE_LOCAL_UPGRADE;
        case 3331: return M12_F3_REG_HANDLER;
        case 3332: return M12_F4_PUSH_UPGRADE_STATE;
        case 3584: return M13_F0_DEINIT;
        case 3585: return M13_F1_INIT;
        case 3586: return M13_F2_SUBSCRIBE_PERCEPTION_IMAGE;
        case 3587: return M13_F3_UNSUBSCRIBE_PERCEPTION_IMAGE;
        case 3588: return M13_F4_GET_STEREO_CAMERA_PARAMETERS;
        case 3840: return M14_F0_DEINIT;
        case 3841: return M14_F1_INIT;
        case 3842: return M14_F2_START_H264_STREAM;
        case 3843: return M14_F3_STOP_H264_STREAM;
        case 4096: return M15_F0_DEINIT;
        case 4097: return M15_F1_INIT;
        case 4098: return M15_F2_UPLOAD_MISSION;
        case 4099: return M15_F3_START;
        case 4100: return M15_F4_STOP;
        case 4101: return M15_F5_PAUSE;
        case 4102: return M15_F6_RESUME;
        case 4103: return M15_F7_GET_GLOBAL_CRUISE_SPEED;
        case 4104: return M15_F8_SET_GLOBAL_CRUISE_SPEED;
        case 4105: return M15_F9_REGISTER_MISSION_EVENT_CALLBACK;
        case 4106: return M15_F10_REGISTER_MISSION_STATE_CALLBACK;
        case 4353: return M16_F1_INIT;
        case 4354: return M16_F2_SET_TASK_INDEX;
        case 4355: return M16_F3_GET_POSITION_INFORMATION_SYNC;
        case 4609: return M17_F1_INIT;
        case 4610: return M17_F2_CREATE;
        case 4611: return M17_F3_DESTROY;
        case 4612: return M17_F4_BIND;
        case 4613: return M17_F5_ACCEPT;
        case 4614: return M17_F6_CONNECT;
        case 4615: return M17_F7_CLOSE;
        case 4616: return M17_F8_SEND_DATA;
        case 4617: return M17_F9_RECV_DATA;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ActiveEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ActiveEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ActiveEnum>() {
            public ActiveEnum findValueByNumber(int number) {
              return ActiveEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return DjiProtoBuf.getDescriptor().getEnumTypes().get(1);
    }

    private static final ActiveEnum[] VALUES = values();

    public static ActiveEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ActiveEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ActiveEnum)
  }

  public interface PayloadOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Payload)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 序列号
     * </pre>
     *
     * <code>string serialNumber = 1;</code>
     * @return The serialNumber.
     */
    String getSerialNumber();
    /**
     * <pre>
     * 序列号
     * </pre>
     *
     * <code>string serialNumber = 1;</code>
     * @return The bytes for serialNumber.
     */
    com.google.protobuf.ByteString
        getSerialNumberBytes();

    /**
     * <pre>
     * 指令编号
     * </pre>
     *
     * <code>.CommandEnum command = 2;</code>
     * @return The enum numeric value on the wire for command.
     */
    int getCommandValue();
    /**
     * <pre>
     * 指令编号
     * </pre>
     *
     * <code>.CommandEnum command = 2;</code>
     * @return The command.
     */
    CommandEnum getCommand();

    /**
     * <pre>
     * 动作编号
     * </pre>
     *
     * <code>.ActiveEnum active = 3;</code>
     * @return The enum numeric value on the wire for active.
     */
    int getActiveValue();
    /**
     * <pre>
     * 动作编号
     * </pre>
     *
     * <code>.ActiveEnum active = 3;</code>
     * @return The active.
     */
    ActiveEnum getActive();

    /**
     * <pre>
     * 执行状态 0-失败;1-成功
     * </pre>
     *
     * <code>bool state = 4;</code>
     * @return The state.
     */
    boolean getState();

    /**
     * <pre>
     * 消息
     * </pre>
     *
     * <code>string message = 5;</code>
     * @return The message.
     */
    String getMessage();
    /**
     * <pre>
     * 消息
     * </pre>
     *
     * <code>string message = 5;</code>
     * @return The bytes for message.
     */
    com.google.protobuf.ByteString
        getMessageBytes();

    /**
     * <pre>
     * 数据
     * </pre>
     *
     * <code>bytes body = 6;</code>
     * @return The body.
     */
    com.google.protobuf.ByteString getBody();
  }
  /**
   * <pre>
   * 载荷
   * </pre>
   *
   * Protobuf type {@code Payload}
   */
  public static final class Payload extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Payload)
      PayloadOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Payload.newBuilder() to construct.
    private Payload(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Payload() {
      serialNumber_ = "";
      command_ = 0;
      active_ = 0;
      message_ = "";
      body_ = com.google.protobuf.ByteString.EMPTY;
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new Payload();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Payload(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              String s = input.readStringRequireUtf8();

              serialNumber_ = s;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              command_ = rawValue;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              active_ = rawValue;
              break;
            }
            case 32: {

              state_ = input.readBool();
              break;
            }
            case 42: {
              String s = input.readStringRequireUtf8();

              message_ = s;
              break;
            }
            case 50: {

              body_ = input.readBytes();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return DjiProtoBuf.internal_static_Payload_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return DjiProtoBuf.internal_static_Payload_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Payload.class, Builder.class);
    }

    public static final int SERIALNUMBER_FIELD_NUMBER = 1;
    private volatile Object serialNumber_;
    /**
     * <pre>
     * 序列号
     * </pre>
     *
     * <code>string serialNumber = 1;</code>
     * @return The serialNumber.
     */
    @Override
    public String getSerialNumber() {
      Object ref = serialNumber_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        serialNumber_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * 序列号
     * </pre>
     *
     * <code>string serialNumber = 1;</code>
     * @return The bytes for serialNumber.
     */
    @Override
    public com.google.protobuf.ByteString
        getSerialNumberBytes() {
      Object ref = serialNumber_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        serialNumber_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COMMAND_FIELD_NUMBER = 2;
    private int command_;
    /**
     * <pre>
     * 指令编号
     * </pre>
     *
     * <code>.CommandEnum command = 2;</code>
     * @return The enum numeric value on the wire for command.
     */
    @Override public int getCommandValue() {
      return command_;
    }
    /**
     * <pre>
     * 指令编号
     * </pre>
     *
     * <code>.CommandEnum command = 2;</code>
     * @return The command.
     */
    @Override public CommandEnum getCommand() {
      @SuppressWarnings("deprecation")
      CommandEnum result = CommandEnum.valueOf(command_);
      return result == null ? CommandEnum.UNRECOGNIZED : result;
    }

    public static final int ACTIVE_FIELD_NUMBER = 3;
    private int active_;
    /**
     * <pre>
     * 动作编号
     * </pre>
     *
     * <code>.ActiveEnum active = 3;</code>
     * @return The enum numeric value on the wire for active.
     */
    @Override public int getActiveValue() {
      return active_;
    }
    /**
     * <pre>
     * 动作编号
     * </pre>
     *
     * <code>.ActiveEnum active = 3;</code>
     * @return The active.
     */
    @Override public ActiveEnum getActive() {
      @SuppressWarnings("deprecation")
      ActiveEnum result = ActiveEnum.valueOf(active_);
      return result == null ? ActiveEnum.UNRECOGNIZED : result;
    }

    public static final int STATE_FIELD_NUMBER = 4;
    private boolean state_;
    /**
     * <pre>
     * 执行状态 0-失败;1-成功
     * </pre>
     *
     * <code>bool state = 4;</code>
     * @return The state.
     */
    @Override
    public boolean getState() {
      return state_;
    }

    public static final int MESSAGE_FIELD_NUMBER = 5;
    private volatile Object message_;
    /**
     * <pre>
     * 消息
     * </pre>
     *
     * <code>string message = 5;</code>
     * @return The message.
     */
    @Override
    public String getMessage() {
      Object ref = message_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        message_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * 消息
     * </pre>
     *
     * <code>string message = 5;</code>
     * @return The bytes for message.
     */
    @Override
    public com.google.protobuf.ByteString
        getMessageBytes() {
      Object ref = message_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BODY_FIELD_NUMBER = 6;
    private com.google.protobuf.ByteString body_;
    /**
     * <pre>
     * 数据
     * </pre>
     *
     * <code>bytes body = 6;</code>
     * @return The body.
     */
    @Override
    public com.google.protobuf.ByteString getBody() {
      return body_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getSerialNumberBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, serialNumber_);
      }
      if (command_ != CommandEnum.M0_HEARTBEAT.getNumber()) {
        output.writeEnum(2, command_);
      }
      if (active_ != ActiveEnum.UNKNOW.getNumber()) {
        output.writeEnum(3, active_);
      }
      if (state_ != false) {
        output.writeBool(4, state_);
      }
      if (!getMessageBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, message_);
      }
      if (!body_.isEmpty()) {
        output.writeBytes(6, body_);
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getSerialNumberBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, serialNumber_);
      }
      if (command_ != CommandEnum.M0_HEARTBEAT.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, command_);
      }
      if (active_ != ActiveEnum.UNKNOW.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, active_);
      }
      if (state_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, state_);
      }
      if (!getMessageBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, message_);
      }
      if (!body_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, body_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Payload)) {
        return super.equals(obj);
      }
      Payload other = (Payload) obj;

      if (!getSerialNumber()
          .equals(other.getSerialNumber())) return false;
      if (command_ != other.command_) return false;
      if (active_ != other.active_) return false;
      if (getState()
          != other.getState()) return false;
      if (!getMessage()
          .equals(other.getMessage())) return false;
      if (!getBody()
          .equals(other.getBody())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SERIALNUMBER_FIELD_NUMBER;
      hash = (53 * hash) + getSerialNumber().hashCode();
      hash = (37 * hash) + COMMAND_FIELD_NUMBER;
      hash = (53 * hash) + command_;
      hash = (37 * hash) + ACTIVE_FIELD_NUMBER;
      hash = (53 * hash) + active_;
      hash = (37 * hash) + STATE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getState());
      hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
      hash = (53 * hash) + getMessage().hashCode();
      hash = (37 * hash) + BODY_FIELD_NUMBER;
      hash = (53 * hash) + getBody().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Payload parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Payload parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Payload parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Payload parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Payload parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Payload parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Payload parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Payload parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Payload parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Payload parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Payload parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Payload parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Payload prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 载荷
     * </pre>
     *
     * Protobuf type {@code Payload}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Payload)
        PayloadOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return DjiProtoBuf.internal_static_Payload_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return DjiProtoBuf.internal_static_Payload_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Payload.class, Builder.class);
      }

      // Construct using DjiProtoBuf.Payload.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        serialNumber_ = "";

        command_ = 0;

        active_ = 0;

        state_ = false;

        message_ = "";

        body_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return DjiProtoBuf.internal_static_Payload_descriptor;
      }

      @Override
      public Payload getDefaultInstanceForType() {
        return Payload.getDefaultInstance();
      }

      @Override
      public Payload build() {
        Payload result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Payload buildPartial() {
        Payload result = new Payload(this);
        result.serialNumber_ = serialNumber_;
        result.command_ = command_;
        result.active_ = active_;
        result.state_ = state_;
        result.message_ = message_;
        result.body_ = body_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Payload) {
          return mergeFrom((Payload)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Payload other) {
        if (other == Payload.getDefaultInstance()) return this;
        if (!other.getSerialNumber().isEmpty()) {
          serialNumber_ = other.serialNumber_;
          onChanged();
        }
        if (other.command_ != 0) {
          setCommandValue(other.getCommandValue());
        }
        if (other.active_ != 0) {
          setActiveValue(other.getActiveValue());
        }
        if (other.getState() != false) {
          setState(other.getState());
        }
        if (!other.getMessage().isEmpty()) {
          message_ = other.message_;
          onChanged();
        }
        if (other.getBody() != com.google.protobuf.ByteString.EMPTY) {
          setBody(other.getBody());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Payload parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Payload) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private Object serialNumber_ = "";
      /**
       * <pre>
       * 序列号
       * </pre>
       *
       * <code>string serialNumber = 1;</code>
       * @return The serialNumber.
       */
      public String getSerialNumber() {
        Object ref = serialNumber_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          serialNumber_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * 序列号
       * </pre>
       *
       * <code>string serialNumber = 1;</code>
       * @return The bytes for serialNumber.
       */
      public com.google.protobuf.ByteString
          getSerialNumberBytes() {
        Object ref = serialNumber_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          serialNumber_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 序列号
       * </pre>
       *
       * <code>string serialNumber = 1;</code>
       * @param value The serialNumber to set.
       * @return This builder for chaining.
       */
      public Builder setSerialNumber(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        serialNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 序列号
       * </pre>
       *
       * <code>string serialNumber = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearSerialNumber() {
        
        serialNumber_ = getDefaultInstance().getSerialNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 序列号
       * </pre>
       *
       * <code>string serialNumber = 1;</code>
       * @param value The bytes for serialNumber to set.
       * @return This builder for chaining.
       */
      public Builder setSerialNumberBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        serialNumber_ = value;
        onChanged();
        return this;
      }

      private int command_ = 0;
      /**
       * <pre>
       * 指令编号
       * </pre>
       *
       * <code>.CommandEnum command = 2;</code>
       * @return The enum numeric value on the wire for command.
       */
      @Override public int getCommandValue() {
        return command_;
      }
      /**
       * <pre>
       * 指令编号
       * </pre>
       *
       * <code>.CommandEnum command = 2;</code>
       * @param value The enum numeric value on the wire for command to set.
       * @return This builder for chaining.
       */
      public Builder setCommandValue(int value) {
        
        command_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 指令编号
       * </pre>
       *
       * <code>.CommandEnum command = 2;</code>
       * @return The command.
       */
      @Override
      public CommandEnum getCommand() {
        @SuppressWarnings("deprecation")
        CommandEnum result = CommandEnum.valueOf(command_);
        return result == null ? CommandEnum.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * 指令编号
       * </pre>
       *
       * <code>.CommandEnum command = 2;</code>
       * @param value The command to set.
       * @return This builder for chaining.
       */
      public Builder setCommand(CommandEnum value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        command_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 指令编号
       * </pre>
       *
       * <code>.CommandEnum command = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCommand() {
        
        command_ = 0;
        onChanged();
        return this;
      }

      private int active_ = 0;
      /**
       * <pre>
       * 动作编号
       * </pre>
       *
       * <code>.ActiveEnum active = 3;</code>
       * @return The enum numeric value on the wire for active.
       */
      @Override public int getActiveValue() {
        return active_;
      }
      /**
       * <pre>
       * 动作编号
       * </pre>
       *
       * <code>.ActiveEnum active = 3;</code>
       * @param value The enum numeric value on the wire for active to set.
       * @return This builder for chaining.
       */
      public Builder setActiveValue(int value) {
        
        active_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 动作编号
       * </pre>
       *
       * <code>.ActiveEnum active = 3;</code>
       * @return The active.
       */
      @Override
      public ActiveEnum getActive() {
        @SuppressWarnings("deprecation")
        ActiveEnum result = ActiveEnum.valueOf(active_);
        return result == null ? ActiveEnum.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * 动作编号
       * </pre>
       *
       * <code>.ActiveEnum active = 3;</code>
       * @param value The active to set.
       * @return This builder for chaining.
       */
      public Builder setActive(ActiveEnum value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        active_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 动作编号
       * </pre>
       *
       * <code>.ActiveEnum active = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearActive() {
        
        active_ = 0;
        onChanged();
        return this;
      }

      private boolean state_ ;
      /**
       * <pre>
       * 执行状态 0-失败;1-成功
       * </pre>
       *
       * <code>bool state = 4;</code>
       * @return The state.
       */
      @Override
      public boolean getState() {
        return state_;
      }
      /**
       * <pre>
       * 执行状态 0-失败;1-成功
       * </pre>
       *
       * <code>bool state = 4;</code>
       * @param value The state to set.
       * @return This builder for chaining.
       */
      public Builder setState(boolean value) {
        
        state_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 执行状态 0-失败;1-成功
       * </pre>
       *
       * <code>bool state = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearState() {
        
        state_ = false;
        onChanged();
        return this;
      }

      private Object message_ = "";
      /**
       * <pre>
       * 消息
       * </pre>
       *
       * <code>string message = 5;</code>
       * @return The message.
       */
      public String getMessage() {
        Object ref = message_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          message_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * 消息
       * </pre>
       *
       * <code>string message = 5;</code>
       * @return The bytes for message.
       */
      public com.google.protobuf.ByteString
          getMessageBytes() {
        Object ref = message_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          message_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 消息
       * </pre>
       *
       * <code>string message = 5;</code>
       * @param value The message to set.
       * @return This builder for chaining.
       */
      public Builder setMessage(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        message_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 消息
       * </pre>
       *
       * <code>string message = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearMessage() {
        
        message_ = getDefaultInstance().getMessage();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 消息
       * </pre>
       *
       * <code>string message = 5;</code>
       * @param value The bytes for message to set.
       * @return This builder for chaining.
       */
      public Builder setMessageBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        message_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString body_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * 数据
       * </pre>
       *
       * <code>bytes body = 6;</code>
       * @return The body.
       */
      @Override
      public com.google.protobuf.ByteString getBody() {
        return body_;
      }
      /**
       * <pre>
       * 数据
       * </pre>
       *
       * <code>bytes body = 6;</code>
       * @param value The body to set.
       * @return This builder for chaining.
       */
      public Builder setBody(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        body_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 数据
       * </pre>
       *
       * <code>bytes body = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearBody() {
        
        body_ = getDefaultInstance().getBody();
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Payload)
    }

    // @@protoc_insertion_point(class_scope:Payload)
    private static final Payload DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Payload();
    }

    public static Payload getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Payload>
        PARSER = new com.google.protobuf.AbstractParser<Payload>() {
      @Override
      public Payload parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Payload(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Payload> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Payload> getParserForType() {
      return PARSER;
    }

    @Override
    public Payload getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Payload_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Payload_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\tdji.proto\"\211\001\n\007Payload\022\024\n\014serialNumber\030" +
      "\001 \001(\t\022\035\n\007command\030\002 \001(\0162\014.CommandEnum\022\033\n\006" +
      "active\030\003 \001(\0162\013.ActiveEnum\022\r\n\005state\030\004 \001(\010" +
      "\022\017\n\007message\030\005 \001(\t\022\014\n\004body\030\006 \001(\014*\367\002\n\013Comm" +
      "andEnum\022\020\n\014M0_HEARTBEAT\020\000\022\017\n\013M1_AIRCRAFT" +
      "\020\001\022\026\n\022M2_FC_SUBSCRIPTION\020\002\022\025\n\021M3_CAMERA_" +
      "MANAGER\020\003\022\025\n\021M4_GIMBAL_MANAGER\020\004\022\027\n\023M5_P" +
      "OWER_MANAGEMENT\020\005\022\030\n\024M6_FLIGHT_CONTROLLE" +
      "R\020\006\022\r\n\tM7_WIDGET\020\007\022\n\n\006M8_HMS\020\010\022\020\n\014M9_TIM" +
      "E_SYNC\020\t\022\031\n\025M10_DATA_TRANSMISSION\020\n\022\r\n\tM" +
      "11_XPORT\020\014\022\017\n\013M12_UPGRADE\020\r\022\022\n\016M13_PERCE" +
      "PTION\020\016\022\021\n\rM14_LIVE_VIEW\020\017\022\023\n\017M15_WAYPOI" +
      "NT_V2\020\020\022\023\n\017M16_POSITIONING\020\021\022\023\n\017M17_MOP_" +
      "CHANNEL\020\022*\213I\n\nActiveEnum\022\n\n\006UNKNOW\020\000\022\021\n\014" +
      "M2_F0_DEINIT\020\200\004\022\017\n\nM2_F1_INIT\020\201\004\022\025\n\020M2_F" +
      "2_QUATERNION\020\202\004\022\036\n\031M2_F3_ACCELERATION_GR" +
      "OUND\020\203\004\022\034\n\027M2_F4_ACCELERATION_BODY\020\204\004\022\033\n" +
      "\026M2_F5_ACCELERATION_RAW\020\205\004\022\023\n\016M2_F6_VELO" +
      "CITY\020\206\004\022 \n\033M2_F7_ANGULAR_RATE_FUSIONED\020\207" +
      "\004\022\033\n\026M2_F8_ANGULAR_RATE_RAW\020\210\004\022\031\n\024M2_F9_" +
      "ALTITUDE_FUSED\020\211\004\022\036\n\031M2_F10_ALTITUDE_BAR" +
      "OMETER\020\212\004\022!\n\034M2_F11_ALTITUDE_OF_HOMEPOIN" +
      "T\020\213\004\022\031\n\024M2_F12_HEIGHT_FUSION\020\214\004\022\033\n\026M2_F1" +
      "3_HEIGHT_RELATIVE\020\215\004\022\032\n\025M2_F14_POSITION_" +
      "FUSED\020\216\004\022\024\n\017M2_F15_GPS_DATE\020\217\004\022\024\n\017M2_F16" +
      "_GPS_TIME\020\220\004\022\030\n\023M2_F17_GPS_POSITION\020\221\004\022\030" +
      "\n\023M2_F18_GPS_VELOCITY\020\222\004\022\027\n\022M2_F19_GPS_D" +
      "ETAILS\020\223\004\022\034\n\027M2_F20_GPS_SIGNAL_LEVEL\020\224\004\022" +
      "\030\n\023M2_F21_RTK_POSITION\020\225\004\022\030\n\023M2_F22_RTK_" +
      "VELOCITY\020\226\004\022\023\n\016M2_F23_RTK_YAW\020\227\004\022\035\n\030M2_F" +
      "24_RTK_POSITION_INFO\020\230\004\022\030\n\023M2_F25_RTK_YA" +
      "W_INFO\020\231\004\022\023\n\016M2_F26_COMPASS\020\232\004\022\016\n\tM2_F27" +
      "_RC\020\233\004\022\031\n\024M2_F28_GIMBAL_ANGLES\020\234\004\022\031\n\024M2_" +
      "F29_GIMBAL_STATUS\020\235\004\022\031\n\024M2_F30_STATUS_FL" +
      "IGHT\020\236\004\022\036\n\031M2_F31_STATUS_DISPLAYMODE\020\237\004\022" +
      "\036\n\031M2_F32_STATUS_LANDINGGEAR\020\240\004\022$\n\037M2_F3" +
      "3_STATUS_MOTOR_START_ERROR\020\241\004\022\030\n\023M2_F34_" +
      "BATTERY_INFO\020\242\004\022\032\n\025M2_F35_CONTROL_DEVICE" +
      "\020\243\004\022\025\n\020M2_F36_HARD_SYNC\020\244\004\022\035\n\030M2_F37_GPS" +
      "_CONTROL_LEVEL\020\245\004\022\035\n\030M2_F38_RC_WITH_FLAG" +
      "_DATA\020\246\004\022\024\n\017M2_F39_ESC_DATA\020\247\004\022\036\n\031M2_F40" +
      "_RTK_CONNECT_STATUS\020\250\004\022\037\n\032M2_F41_GIMBAL_" +
      "CONTROL_MODE\020\251\004\022\032\n\025M2_F42_FLIGHT_ANOMALY" +
      "\020\252\004\022\027\n\022M2_F43_POSITION_VO\020\253\004\022\026\n\021M2_F44_A" +
      "VOID_DATA\020\254\004\022!\n\034M2_F45_HOME_POINT_SET_ST" +
      "ATUS\020\255\004\022\033\n\026M2_F46_HOME_POINT_INFO\020\256\004\022\035\n\030" +
      "M2_F47_THREE_GIMBAL_DATA\020\257\004\022&\n!M2_F48_BA" +
      "TTERY_SINGLE_INFO_INDEX1\020\260\004\022&\n!M2_F49_BA" +
      "TTERY_SINGLE_INFO_INDEX2\020\261\004\022\021\n\014M3_F0_DEI" +
      "NIT\020\200\006\022\017\n\nM3_F1_INIT\020\201\006\022\032\n\025M3_F2_GET_CAM" +
      "ERA_TYPE\020\202\006\022\037\n\032M3_F3_GET_FIRMWARE_VERSIO" +
      "N\020\203\006\022$\n\037M3_F4_GET_CAMERA_CONNECT_STATUS\020" +
      "\204\006\022\023\n\016M3_F5_SET_MODE\020\205\006\022\023\n\016M3_F6_GET_MOD" +
      "E\020\206\006\022\037\n\032M3_F7_SET_SHOOT_PHOTO_MODE\020\207\006\022\037\n" +
      "\032M3_F8_GET_SHOOT_PHOTO_MODE\020\210\006\022\034\n\027M3_F9_" +
      "START_SHOOT_PHOTO\020\211\006\022\034\n\027M3_F10_STOP_SHOO" +
      "T_PHOTO\020\212\006\022\037\n\032M3_F11_GET_CAPTURING_STATE" +
      "\020\213\006\022!\n\034M3_F12_SET_PHOTO_BURST_COUNT\020\214\006\022," +
      "\n\'M3_F13_SET_PHOTO_TIME_INTERVAL_SETTING" +
      "S\020\215\006\022,\n\'M3_F14_GET_PHOTO_TIME_INTERVAL_S" +
      "ETTINGS\020\216\006\022-\n(M3_F15_GET_INTERVAL_SHOOTI" +
      "NG_REMAIN_TIME\020\217\006\022\032\n\025M3_F16_SET_FOCUS_MO" +
      "DE\020\220\006\022\032\n\025M3_F17_GET_FOCUS_MODE\020\221\006\022\034\n\027M3_" +
      "F18_SET_FOCUS_TARGET\020\222\006\022\034\n\027M3_F19_GET_FO" +
      "CUS_TARGET\020\223\006\022)\n$M3_F20_START_CONTINUOUS" +
      "_OPTICAL_ZOOM\020\224\006\022(\n#M3_F21_STOP_CONTINUO" +
      "US_OPTICAL_ZOOM\020\225\006\022\"\n\035M3_F22_SET_OPTICAL" +
      "_ZOOM_PARAM\020\226\006\022\"\n\035M3_F23_GET_OPTICAL_ZOO" +
      "M_PARAM\020\227\006\022#\n\036M3_F24_SET_INFRARED_ZOOM_P" +
      "ARAM\020\230\006\022 \n\033M3_F25_SET_TAP_ZOOM_ENABLED\020\231" +
      "\006\022 \n\033M3_F26_GET_TAP_ZOOM_ENABLED\020\232\006\022#\n\036M" +
      "3_F27_SET_TAP_ZOOM_MULTIPLIER\020\233\006\022#\n\036M3_F" +
      "28_GET_TAP_ZOOM_MULTIPLIER\020\234\006\022\036\n\031M3_F29_" +
      "TAP_ZOOM_AT_TARGET\020\235\006\022 \n\033M3_F30_GET_FOCU" +
      "S_RING_RANGE\020\236\006\022 \n\033M3_F31_SET_FOCUS_RING" +
      "_VALUE\020\237\006\022 \n\033M3_F32_GET_FOCUS_RING_VALUE" +
      "\020\240\006\022\035\n\030M3_F33_SET_EXPOSURE_MODE\020\241\006\022\035\n\030M3" +
      "_F34_GET_EXPOSURE_MODE\020\242\006\022\023\n\016M3_F35_SET_" +
      "ISO\020\243\006\022\023\n\016M3_F36_GET_ISO\020\244\006\022\030\n\023M3_F37_SE" +
      "T_APERTURE\020\245\006\022\030\n\023M3_F38_GET_APERTURE\020\246\006\022" +
      "\035\n\030M3_F39_SET_SHUTTER_SPEED\020\247\006\022\035\n\030M3_F40" +
      "_GET_SHUTTER_SPEED\020\250\006\022%\n M3_F41_SET_EXPO" +
      "SURE_COMPENSATION\020\251\006\022%\n M3_F42_GET_EXPOS" +
      "URE_COMPENSATION\020\252\006\022\037\n\032M3_F43_SET_AE_LOC" +
      "K_ENABLED\020\253\006\022\037\n\032M3_F44_GET_AE_LOCK_ENABL" +
      "ED\020\254\006\022!\n\034M3_F45_RESET_CAMERA_SETTINGS\020\255\006" +
      "\022\036\n\031M3_F46_START_RECORD_VIDEO\020\256\006\022\035\n\030M3_F" +
      "47_STOP_RECORD_VIDEO\020\257\006\022\037\n\032M3_F48_GET_RE" +
      "CORDING_STATE\020\260\006\022\036\n\031M3_F49_GET_RECORDING" +
      "_TIME\020\261\006\022#\n\036M3_F50_GET_STREAM_SOURCE_RAN" +
      "GE\020\262\006\022\035\n\030M3_F51_SET_STREAM_SOURCE\020\263\006\022*\n%" +
      "M3_F52_GET_PHOTO_STORAGE_FORMAT_RANGE\020\264\006" +
      "\022\034\n\027M3_F53_SET_PHOTO_FORMAT\020\265\006\022\034\n\027M3_F54" +
      "_GET_PHOTO_FORMAT\020\266\006\022\"\n\035M3_F55_GET_VIDEO" +
      "_FORMAT_RANGE\020\267\006\022$\n\037M3_F56_SET_VIDEO_STO" +
      "RAGE_FORMAT\020\270\006\022$\n\037M3_F57_GET_VIDEO_STORA" +
      "GE_FORMAT\020\271\006\022!\n\034M3_F58_GET_PHOTO_RATIO_R" +
      "ANGE\020\272\006\022\033\n\026M3_F59_SET_PHOTO_RATIO\020\273\006\022\033\n\026" +
      "M3_F60_GET_PHOTO_RATIO\020\274\006\022+\n&M3_F61_GET_" +
      "VIDEO_RESOLUTION_FRAME_RATE\020\275\006\022&\n!M3_F62" +
      "_GET_NIGHT_SCENE_MODE_RANGE\020\276\006\022 \n\033M3_F63" +
      "_SET_NIGHT_SCENE_MODE\020\277\006\022 \n\033M3_F64_GET_N" +
      "IGHT_SCENE_MODE\020\300\006\022$\n\037M3_F65_GET_STREAM_" +
      "STORAGE_RANGE\020\301\006\022)\n$M3_F66_SET_CAPTURE_R" +
      "ECORDING_STREAMS\020\302\006\022)\n$M3_F67_GET_CAPTUR" +
      "E_RECORDING_STREAMS\020\303\006\0226\n1M3_F68_SET_SYN" +
      "CHRONIZED_SPLIT_SCREEN_ZOOM_ENABLED\020\304\006\022\"" +
      "\n\035M3_F69_SET_CUSTOM_EXPAND_NAME\020\305\006\022\"\n\035M3" +
      "_F70_GET_CUSTOM_EXPAND_NAME\020\306\006\022\036\n\031M3_F71" +
      "_DOWNLOAD_FILE_LIST\020\307\006\022(\n#M3_F72_DOWNLOA" +
      "D_FILE_LIST_BY_SLICES\020\310\006\022+\n&M3_F73_REG_D" +
      "OWNLOAD_FILE_DATA_CALLBACK\020\311\006\022\"\n\035M3_F74_" +
      "DOWNLOAD_FILE_BY_INDEX\020\312\006\0223\n.M3_F75_DOWN" +
      "LOAD_SUB_FILE_BY_INDEX_AND_SUB_TYPE\020\313\006\022$" +
      "\n\037M3_F76_OBTAIN_DOWNLOADER_RIGHTS\020\314\006\022%\n " +
      "M3_F77_RELEASE_DOWNLOADER_RIGHTS\020\315\006\022\032\n\025M" +
      "3_F78_FORMAT_STORAGE\020\316\006\022\034\n\027M3_F79_GET_ST" +
      "ORAGE_INFO\020\317\006\022 \n\033M3_F80_DELETE_FILE_BY_I" +
      "NDEX\020\320\006\022\"\n\035M3_F81_GET_LASER_RANGING_INFO" +
      "\020\321\006\022,\n\'M3_F82_SET_POINT_THERMOMETRY_COOR" +
      "DINATE\020\322\006\022&\n!M3_F83_GET_POINT_THERMOMETR" +
      "Y_DATA\020\323\006\022+\n&M3_F84_SET_AREA_THERMOMETRY" +
      "_COORDINATE\020\324\006\022%\n M3_F85_GET_AREA_THERMO" +
      "METRY_DATA\020\325\006\022\030\n\023M3_F86_SET_FFC_MODE\020\326\006\022" +
      "\027\n\022M3_F87_TRIGGER_FFC\020\327\006\022)\n$M3_F88_SET_I" +
      "NFRARED_CAMERA_GAIN_MODE\020\330\006\022;\n6M3_F89_GE" +
      "T_INFRARED_CAMERA_GAIN_MODE_TEMPERATURE_" +
      "RANGE\020\331\006\022\035\n\030M3_F90_SET_METERING_MODE\020\332\006\022" +
      "\035\n\030M3_F91_GET_METERING_MODE\020\333\006\022+\n&M3_F92" +
      "_GET_METERING_POINT_REGION_RANGE\020\334\006\022\036\n\031M" +
      "3_F93_SET_METERING_POINT\020\335\006\022\036\n\031M3_F94_GE" +
      "T_METERING_POINT\020\336\006\022$\n\037M3_F95_START_RECO" +
      "RD_POINT_CLOUD\020\337\006\022#\n\036M3_F96_STOP_RECORD_" +
      "POINT_CLOUD\020\340\006\022\021\n\014M4_F0_DEINIT\020\200\010\022\017\n\nM4_" +
      "F1_INIT\020\201\010\022\023\n\016M4_F2_SET_MODE\020\202\010\022\020\n\013M4_F3" +
      "_RESET\020\203\010\022\021\n\014M4_F4_ROTATE\020\204\010\022,\n\'M4_F5_SE" +
      "T_PITCH_RANGE_EXTENSION_ENABLED\020\205\010\022.\n)M4" +
      "_F6_SET_CONTROLLER_MAX_SPEED_PERCENTAGE\020" +
      "\206\010\022\'\n\"M4_F7_SET_CONTROLLER_SMOOTH_FACTOR" +
      "\020\207\010\022#\n\036M4_F8_RESTORE_FACTORY_SETTINGS\020\210\010" +
      "\022\021\n\014M5_F1_DEINIT\020\200\n\022\017\n\nM5_F1_INIT\020\201\n\022 \n\033" +
      "M5_F2_APPLY_HIGH_POWER_SYNC\020\202\n\0222\n-M5_F3_" +
      "REG_WRITE_HIGH_POWER_APPLY_PIN_CALLBACK\020" +
      "\203\n\022.\n)M5_F4_REG_POWER_OFF_NOTIFICATION_C" +
      "ALLBACK\020\204\n\022\021\n\014M6_F0_DEINIT\020\200\014\022\017\n\nM6_F1_I" +
      "NIT\020\201\014\022\"\n\035M6_F2_SET_TRK_POSITION_ENABLE\020" +
      "\202\014\022\"\n\035M6_F3_GET_TRK_POSITION_ENABLE\020\203\014\022\035" +
      "\n\030M6_F4_SET_RC_LOST_ACTION\020\204\014\022\035\n\030M6_F5_G" +
      "ET_RC_LOST_ACTION\020\205\014\022A\n<M6_F6_SET_HORIZO" +
      "NTAL_VISUAL_OBSTACLE_AVOIDANCE_ENABLE_ST" +
      "ATUS\020\206\014\022A\n<M6_F7_GET_HORIZONTAL_VISUAL_O" +
      "BSTACLE_AVOIDANCE_ENABLE_STATUS\020\207\014\022@\n;M6" +
      "_F8_SET_HORIZONTAL_RADAR_OBSTACLE_AVOIDA" +
      "NCE_ENABLE_STATUS\020\210\014\022@\n;M6_F9_GET_HORIZO" +
      "NTAL_RADAR_OBSTACLE_AVOIDANCE_ENABLE_STA" +
      "TUS\020\211\014\022?\n:M6_F10_SET_UPWARDS_VISUAL_OBST" +
      "ACLE_AVOIDANCE_ENABLE_STATUS\020\212\014\022?\n:M6_F1" +
      "1_GET_UPWARDS_VISUAL_OBSTACLE_AVOIDANCE_" +
      "ENABLE_STATUS\020\213\014\022>\n9M6_F12_SET_UPWARDS_R" +
      "ADAR_OBSTACLE_AVOIDANCE_ENABLE_STATUS\020\214\014" +
      "\022>\n9M6_F13_GET_UPWARDS_RADAR_OBSTACLE_AV" +
      "OIDANCE_ENABLE_STATUS\020\215\014\022A\n<M6_F14_SET_D" +
      "OWNWARDS_VISUAL_OBSTACLE_AVOIDANCE_ENABL" +
      "E_STATUS\020\216\014\022A\n<M6_F15_GET_DOWNWARDS_VISU" +
      "AL_OBSTACLE_AVOIDANCE_ENABLE_STATUS\020\217\014\022\031" +
      "\n\024M6_F16_ARREST_FLYING\020\220\014\022 \n\033M6_F17_CANC" +
      "EL_ARREST_FLYING\020\221\014\022\032\n\025M6_F18_TURN_ON_MO" +
      "TORS\020\222\014\022\033\n\026M6_F19_TURN_OFF_MOTORS\020\223\014\022\036\n\031" +
      "M6_F20_EMERGENCY_STOP_OFF\020\224\014\022\032\n\025M6_F21_S" +
      "TART_TASK_OFF\020\225\014\022\031\n\024M6_F22_START_LANDING" +
      "\020\226\014\022\032\n\025M6_F23_CANCEL_LANDING\020\227\014\022!\n\034M6_F2" +
      "4_START_CONFIRM_LANDING\020\230\014\022\037\n\032M6_F25_STA" +
      "RT_FORCE_LANDING\020\231\014\0223\n.M6_F26_SET_HOME_L" +
      "OCATION_USING_GPS_COORDINATES\020\232\014\022=\n8M6_F" +
      "27_SET_HOME_LOCATION_USING_CURRENT_AIRCR" +
      "AFT_LOCATION\020\233\014\022 \n\033M6_F28_SET_GO_HOME_AL" +
      "TITUDE\020\234\014\022 \n\033M6_F29_GET_GO_HOME_ALTITUDE" +
      "\020\235\014\022\034\n\027M6_F30_GET_COUNTRY_CODE\020\236\014\022\031\n\024M6_" +
      "F31_START_GO_HOME\020\237\014\022\032\n\025M6_F32_CANCEL_GO" +
      "_HOME\020\240\014\022*\n%M6_F33_OBTAIN_JOYSTICK_CTRL_" +
      "AUTHORITY\020\241\014\022+\n&M6_F34_RELEASE_JOYSTICK_" +
      "CTRL_AUTHORITY\020\242\014\0226\n1M6_F35_REG_JOYSTICK" +
      "_CTRL_AUTHORITY_EVENT_CALLBACK\020\243\014\022#\n\036M6_" +
      "F36_EXECUTE_JOYSTICK_ACTION\020\244\014\022*\n%M6_F37" +
      "_EXECUTE_EMERGENCY_BRAKE_ACTION\020\245\014\022)\n$M6" +
      "_F38_CANCEL_EMERGENCY_BRAKE_ACTION\020\246\014\022\033\n" +
      "\026M6_F39_GET_GENERA_INFO\020\247\014\022,\n\'M6_F40_SET" +
      "_RC_LOST_ACTION_ENABLE_STATUS\020\250\014\022,\n\'M6_F" +
      "41_GET_ENABEL_RC_LOST_ACTION_STATUS\020\251\014\022*" +
      "\n%M6_F42_REG_TRIGGER_FTS_EVENT_CALLBACK\020" +
      "\252\014\022\017\n\nM7_F1_INIT\020\201\016\022,\n\'M7_F2_REG_DEFAULT" +
      "_UI_CONFIG_BY_DIR_PATH\020\202\016\022$\n\037M7_F3_REG_U" +
      "I_CONFIG_BY_DIR_PATH\020\203\016\022)\n$M7_F4_REG_DEF" +
      "AULT_UI_BY_BINARY_ARRAY\020\204\016\022(\n#M7_F5_REG_" +
      "UI_CONFIG_BY_BINARY_ARRAY\020\205\016\022\033\n\026M7_F6_RE" +
      "G_HANDLER_LIST\020\206\016\022\'\n\"M7_F7_FLOATION_WIND" +
      "OW_SHOW_MESSAGE\020\207\016\022\035\n\030M7_F8_GET_CHANNELL" +
      "_STATE\020\210\016\022\034\n\027M7_F9_GET_SPEAKER_STATE\020\211\016\022" +
      "\031\n\024M7_F10_SET_WORK_MODE\020\212\016\022\026\n\021M7_F11_STA" +
      "RT_PLAY\020\213\016\022\025\n\020M7_F12_STOP_PLAY\020\214\016\022\031\n\024M7_" +
      "F13_SET_PLAY_MODE\020\215\016\022\026\n\021M7_F14_SET_VOLUM" +
      "E\020\216\016\022\034\n\027M7_F15_RECEIVE_TTS_DATA\020\217\016\022\036\n\031M7" +
      "_F16_RECEIVE_AUDIO_DATA\020\220\016\022\021\n\014M8_F0_DEIN" +
      "IT\020\200\020\022\017\n\nM8_F1_INIT\020\201\020\022\037\n\032M8_F2_REG_M8_I" +
      "NFO_CALLBACK\020\202\020\022\017\n\nM9_F1_INIT\020\201\022\0223\n.M9_F" +
      "2_REG_GET_NEWEST_PPS_TRIGGER_TIME_CALLBA" +
      "CK\020\202\022\022$\n\037M9_F3_TRANSFER_TO_AIRCRAFT_TIME" +
      "\020\203\022\022\022\n\rM10_F0_DEINIT\020\200\024\022\020\n\013M10_F1_INIT\020\201" +
      "\024\022\025\n\020M10_F2_SEND_DATA\020\202\024\022\031\n\024M10_F3_GET_S" +
      "END_DATA\020\203\024\022\"\n\035M10_F4_REG_RECV_DATA_CALL" +
      "BACK\020\204\024\022%\n M10_F5_SET_BAND_WIDTH_PROPORT" +
      "ION\020\202\026\022*\n%M10_F6_GET_DATA_STREAM_REMOTE_" +
      "ADDRESS\020\203\026\022!\n\034M10_F7_SEND_DATA_STREAM_DA" +
      "TA\020\204\026\022!\n\034M10_F8_GET_DATA_STREAM_STATE\020\205\026" +
      "\022\022\n\rM11_F0_DEINIT\020\200\030\022\020\n\013M11_F1_INIT\020\201\030\022-" +
      "\n(M11_F2_REG_RECEIVE_SYSTEM_STATE_CALLBA" +
      "CK\020\202\030\0225\n0M11_F3_REG_RECEIVE_ATTITUDE_INF" +
      "ORMATION_CALLBACK\020\203\030\022 \n\033M11_F4_SET_GIMBA" +
      "L_MODE_SYNC\020\204\030\022\027\n\022M11_F5_ROTATE_SYNC\020\205\030\022" +
      "+\n&M11_F6_RELEASE_CONTROL_PERMISSION_SYN" +
      "C\020\206\030\022\026\n\021M11_F7_RESET_SYNC\020\207\030\022 \n\033M11_F8_S" +
      "ET_LIMIT_ANGLE_SYNC\020\210\030\022 \n\033M11_F9_GET_LIM" +
      "IT_ANGLE_SYNC\020\211\030\022(\n#M11_F10_SET_SPEED_CO" +
      "NVERSION_FACTOR\020\212\030\022\020\n\013M12_F1_INIT\020\201\032\022 \n\033" +
      "M12_F2_ENABLE_LOCAL_UPGRADE\020\202\032\022\027\n\022M12_F3" +
      "_REG_HANDLER\020\203\032\022\036\n\031M12_F4_PUSH_UPGRADE_S" +
      "TATE\020\204\032\022\022\n\rM13_F0_DEINIT\020\200\034\022\020\n\013M13_F1_IN" +
      "IT\020\201\034\022&\n!M13_F2_SUBSCRIBE_PERCEPTION_IMA" +
      "GE\020\202\034\022(\n#M13_F3_UNSUBSCRIBE_PERCEPTION_I" +
      "MAGE\020\203\034\022(\n#M13_F4_GET_STEREO_CAMERA_PARA" +
      "METERS\020\204\034\022\022\n\rM14_F0_DEINIT\020\200\036\022\020\n\013M14_F1_" +
      "INIT\020\201\036\022\035\n\030M14_F2_START_H264_STREAM\020\202\036\022\034" +
      "\n\027M14_F3_STOP_H264_STREAM\020\203\036\022\022\n\rM15_F0_D" +
      "EINIT\020\200 \022\020\n\013M15_F1_INIT\020\201 \022\032\n\025M15_F2_UPL" +
      "OAD_MISSION\020\202 \022\021\n\014M15_F3_START\020\203 \022\020\n\013M15" +
      "_F4_STOP\020\204 \022\021\n\014M15_F5_PAUSE\020\205 \022\022\n\rM15_F6" +
      "_RESUME\020\206 \022#\n\036M15_F7_GET_GLOBAL_CRUISE_S" +
      "PEED\020\207 \022#\n\036M15_F8_SET_GLOBAL_CRUISE_SPEE" +
      "D\020\210 \022+\n&M15_F9_REGISTER_MISSION_EVENT_CA" +
      "LLBACK\020\211 \022,\n\'M15_F10_REGISTER_MISSION_ST" +
      "ATE_CALLBACK\020\212 \022\020\n\013M16_F1_INIT\020\201\"\022\032\n\025M16" +
      "_F2_SET_TASK_INDEX\020\202\"\022)\n$M16_F3_GET_POSI" +
      "TION_INFORMATION_SYNC\020\203\"\022\020\n\013M17_F1_INIT\020" +
      "\201$\022\022\n\rM17_F2_CREATE\020\202$\022\023\n\016M17_F3_DESTROY" +
      "\020\203$\022\020\n\013M17_F4_BIND\020\204$\022\022\n\rM17_F5_ACCEPT\020\205" +
      "$\022\023\n\016M17_F6_CONNECT\020\206$\022\021\n\014M17_F7_CLOSE\020\207" +
      "$\022\025\n\020M17_F8_SEND_DATA\020\210$\022\025\n\020M17_F9_RECV_" +
      "DATA\020\211$B\rB\013DjiProtoBufb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_Payload_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Payload_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Payload_descriptor,
        new String[] { "SerialNumber", "Command", "Active", "State", "Message", "Body", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
