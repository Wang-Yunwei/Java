package com.mdsd.cloud.controller.dji.dto;// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mdsd.proto

public final class MdsdProtoBuf {
  private MdsdProtoBuf() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * 指令编号枚举
   * </pre>
   *
   * Protobuf enum {@code CommandEnum}
   */
  public enum CommandEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 飞控订阅
     * </pre>
     *
     * <code>FC_SUBSCRIPTION = 0;</code>
     */
    FC_SUBSCRIPTION(0),
    /**
     * <pre>
     * 相机管理
     * </pre>
     *
     * <code>CAMERA_MANAGER = 1;</code>
     */
    CAMERA_MANAGER(1),
    /**
     * <pre>
     * 云台管理
     * </pre>
     *
     * <code>GIMBAL_MANAGER = 2;</code>
     */
    GIMBAL_MANAGER(2),
    /**
     * <pre>
     * 电源管理
     * </pre>
     *
     * <code>POWER_MANAGEMENT = 3;</code>
     */
    POWER_MANAGEMENT(3),
    /**
     * <pre>
     * 飞行控制
     * </pre>
     *
     * <code>FLIGHT_CONTROLLER = 4;</code>
     */
    FLIGHT_CONTROLLER(4),
    /**
     * <pre>
     * HMS功能: 获取无人机的健康管理信息,有效监控无人机当前状态
     * </pre>
     *
     * <code>HMS = 5;</code>
     */
    HMS(5),
    /**
     * <pre>
     * 时间同步
     * </pre>
     *
     * <code>TIME_SYNC = 6;</code>
     */
    TIME_SYNC(6),
    /**
     * <pre>
     * 获取相机码流
     * </pre>
     *
     * <code>LIVE_VIEW = 7;</code>
     */
    LIVE_VIEW(7),
    /**
     * <pre>
     * 本地升级
     * </pre>
     *
     * <code>LOCAL_UPGRADE = 8;</code>
     */
    LOCAL_UPGRADE(8),
    /**
     * <pre>
     * 精准定位
     * </pre>
     *
     * <code>POSITIONING = 9;</code>
     */
    POSITIONING(9),
    /**
     * <pre>
     * 运动规划
     * </pre>
     *
     * <code>WAYPOINT = 10;</code>
     */
    WAYPOINT(10),
    /**
     * <pre>
     * 喊话器控件
     * </pre>
     *
     * <code>WIDGET = 11;</code>
     */
    WIDGET(11),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 飞控订阅
     * </pre>
     *
     * <code>FC_SUBSCRIPTION = 0;</code>
     */
    public static final int FC_SUBSCRIPTION_VALUE = 0;
    /**
     * <pre>
     * 相机管理
     * </pre>
     *
     * <code>CAMERA_MANAGER = 1;</code>
     */
    public static final int CAMERA_MANAGER_VALUE = 1;
    /**
     * <pre>
     * 云台管理
     * </pre>
     *
     * <code>GIMBAL_MANAGER = 2;</code>
     */
    public static final int GIMBAL_MANAGER_VALUE = 2;
    /**
     * <pre>
     * 电源管理
     * </pre>
     *
     * <code>POWER_MANAGEMENT = 3;</code>
     */
    public static final int POWER_MANAGEMENT_VALUE = 3;
    /**
     * <pre>
     * 飞行控制
     * </pre>
     *
     * <code>FLIGHT_CONTROLLER = 4;</code>
     */
    public static final int FLIGHT_CONTROLLER_VALUE = 4;
    /**
     * <pre>
     * HMS功能: 获取无人机的健康管理信息,有效监控无人机当前状态
     * </pre>
     *
     * <code>HMS = 5;</code>
     */
    public static final int HMS_VALUE = 5;
    /**
     * <pre>
     * 时间同步
     * </pre>
     *
     * <code>TIME_SYNC = 6;</code>
     */
    public static final int TIME_SYNC_VALUE = 6;
    /**
     * <pre>
     * 获取相机码流
     * </pre>
     *
     * <code>LIVE_VIEW = 7;</code>
     */
    public static final int LIVE_VIEW_VALUE = 7;
    /**
     * <pre>
     * 本地升级
     * </pre>
     *
     * <code>LOCAL_UPGRADE = 8;</code>
     */
    public static final int LOCAL_UPGRADE_VALUE = 8;
    /**
     * <pre>
     * 精准定位
     * </pre>
     *
     * <code>POSITIONING = 9;</code>
     */
    public static final int POSITIONING_VALUE = 9;
    /**
     * <pre>
     * 运动规划
     * </pre>
     *
     * <code>WAYPOINT = 10;</code>
     */
    public static final int WAYPOINT_VALUE = 10;
    /**
     * <pre>
     * 喊话器控件
     * </pre>
     *
     * <code>WIDGET = 11;</code>
     */
    public static final int WIDGET_VALUE = 11;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static CommandEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CommandEnum forNumber(int value) {
      switch (value) {
        case 0: return FC_SUBSCRIPTION;
        case 1: return CAMERA_MANAGER;
        case 2: return GIMBAL_MANAGER;
        case 3: return POWER_MANAGEMENT;
        case 4: return FLIGHT_CONTROLLER;
        case 5: return HMS;
        case 6: return TIME_SYNC;
        case 7: return LIVE_VIEW;
        case 8: return LOCAL_UPGRADE;
        case 9: return POSITIONING;
        case 10: return WAYPOINT;
        case 11: return WIDGET;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CommandEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CommandEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CommandEnum>() {
            public CommandEnum findValueByNumber(int number) {
              return CommandEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MdsdProtoBuf.getDescriptor().getEnumTypes().get(0);
    }

    private static final CommandEnum[] VALUES = values();

    public static CommandEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CommandEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:CommandEnum)
  }

  /**
   * <pre>
   * 订阅主题 - 动作枚举
   * </pre>
   *
   * Protobuf enum {@code FcSubscriptionTopicEnum}
   */
  public enum FcSubscriptionTopicEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 姿态四元数(最大 200Hz)
     * </pre>
     *
     * <code>QUATERNION = 0;</code>
     */
    QUATERNION(0),
    /**
     * <pre>
     * 相对地面加速度(最大 200Hz)
     * </pre>
     *
     * <code>ACCELERATION_GROUND = 1;</code>
     */
    ACCELERATION_GROUND(1),
    /**
     * <pre>
     * 相对机体加速度(最大 200Hz)
     * </pre>
     *
     * <code>ACCELERATION_BODY = 2;</code>
     */
    ACCELERATION_BODY(2),
    /**
     * <pre>
     * 原始加速度(最大 400Hz)
     * </pre>
     *
     * <code>ACCELERATION_RAW = 3;</code>
     */
    ACCELERATION_RAW(3),
    /**
     * <pre>
     * 速度(最大 200Hz)
     * </pre>
     *
     * <code>VELOCITY = 4;</code>
     */
    VELOCITY(4),
    /**
     * <pre>
     * 融合角速度(最大 200Hz)
     * </pre>
     *
     * <code>ANGULAR_RATE_FUSIONED = 5;</code>
     */
    ANGULAR_RATE_FUSIONED(5),
    /**
     * <pre>
     * 原始角速度(最大 400Hz)
     * </pre>
     *
     * <code>ANGULAR_RATE_RAW = 6;</code>
     */
    ANGULAR_RATE_RAW(6),
    /**
     * <pre>
     * 融合高度(最大 200Hz)
     * </pre>
     *
     * <code>ALTITUDE_FUSED = 7;</code>
     */
    ALTITUDE_FUSED(7),
    /**
     * <pre>
     * 气压计高度(最大 200Hz)
     * </pre>
     *
     * <code>ALTITUDE_BAROMETER = 8;</code>
     */
    ALTITUDE_BAROMETER(8),
    /**
     * <pre>
     * Home 点高度(最大 1Hz)
     * </pre>
     *
     * <code>ALTITUDE_OF_HOMEPOINT = 9;</code>
     */
    ALTITUDE_OF_HOMEPOINT(9),
    /**
     * <pre>
     * 融合相对地面高度(最大 100Hz)
     * </pre>
     *
     * <code>HEIGHT_FUSION = 10;</code>
     */
    HEIGHT_FUSION(10),
    /**
     * <pre>
     * 相对地面高度(最大 200Hz)
     * </pre>
     *
     * <code>HEIGHT_RELATIVE = 11;</code>
     */
    HEIGHT_RELATIVE(11),
    /**
     * <pre>
     * 融合位置坐标(最大 200Hz)
     * </pre>
     *
     * <code>POSITION_FUSED = 12;</code>
     */
    POSITION_FUSED(12),
    /**
     * <pre>
     * GPS 日期,年月日(最大 5Hz)
     * </pre>
     *
     * <code>GPS_DATE = 13;</code>
     */
    GPS_DATE(13),
    /**
     * <pre>
     * GPS 时间,时分秒(最大 5Hz)
     * </pre>
     *
     * <code>GPS_TIME = 14;</code>
     */
    GPS_TIME(14),
    /**
     * <pre>
     * GPS 位置(最大 5Hz)
     * </pre>
     *
     * <code>GPS_POSITION = 15;</code>
     */
    GPS_POSITION(15),
    /**
     * <pre>
     * GPS 速度(最大 5Hz)
     * </pre>
     *
     * <code>GPS_VELOCITY = 16;</code>
     */
    GPS_VELOCITY(16),
    /**
     * <pre>
     * GPS 信息(最大 5Hz)
     * </pre>
     *
     * <code>GPS_DETAILS = 17;</code>
     */
    GPS_DETAILS(17),
    /**
     * <pre>
     * GPS 信号强度(最大 50Hz)
     * </pre>
     *
     * <code>GPS_SIGNAL_LEVEL = 18;</code>
     */
    GPS_SIGNAL_LEVEL(18),
    /**
     * <pre>
     * RTK 位置(最大 5Hz)
     * </pre>
     *
     * <code>RTK_POSITION = 19;</code>
     */
    RTK_POSITION(19),
    /**
     * <pre>
     * RTK 速度(最大 5Hz)
     * </pre>
     *
     * <code>RTK_VELOCITY = 20;</code>
     */
    RTK_VELOCITY(20),
    /**
     * <pre>
     * RTK 航向角(最大 5Hz)
     * </pre>
     *
     * <code>RTK_YAW = 21;</code>
     */
    RTK_YAW(21),
    /**
     * <pre>
     * RTK 位置信息(最大 5Hz)
     * </pre>
     *
     * <code>RTK_POSITION_INFO = 22;</code>
     */
    RTK_POSITION_INFO(22),
    /**
     * <pre>
     * RTK 航向信息(最大 5Hz)
     * </pre>
     *
     * <code>RTK_YAW_INFO = 23;</code>
     */
    RTK_YAW_INFO(23),
    /**
     * <pre>
     * 指南针信息(最大 100Hz)
     * </pre>
     *
     * <code>COMPASS = 24;</code>
     */
    COMPASS(24),
    /**
     * <pre>
     * 遥控摇杆信息(最大 50Hz)
     * </pre>
     *
     * <code>RC = 25;</code>
     */
    RC(25),
    /**
     * <pre>
     * 云台角度(最大 50Hz)
     * </pre>
     *
     * <code>GIMBAL_ANGLES = 26;</code>
     */
    GIMBAL_ANGLES(26),
    /**
     * <pre>
     * 云台状态(最大 50Hz)
     * </pre>
     *
     * <code>GIMBAL_STATUS = 27;</code>
     */
    GIMBAL_STATUS(27),
    /**
     * <pre>
     * 飞行状态(最大 50Hz)
     * </pre>
     *
     * <code>STATUS_FLIGHT = 28;</code>
     */
    STATUS_FLIGHT(28),
    /**
     * <pre>
     * 飞行模式状态(最大 50Hz)
     * </pre>
     *
     * <code>STATUS_DISPLAYMODE = 29;</code>
     */
    STATUS_DISPLAYMODE(29),
    /**
     * <pre>
     * 起落架状态(最大 50Hz)
     * </pre>
     *
     * <code>STATUS_LANDINGGEAR = 30;</code>
     */
    STATUS_LANDINGGEAR(30),
    /**
     * <pre>
     * 电机启动错误码(最大 50Hz)
     * </pre>
     *
     * <code>STATUS_MOTOR_START_ERROR = 31;</code>
     */
    STATUS_MOTOR_START_ERROR(31),
    /**
     * <pre>
     * 电池信息(最大 50Hz)
     * </pre>
     *
     * <code>BATTERY_INFO = 32;</code>
     */
    BATTERY_INFO(32),
    /**
     * <pre>
     * 设备控制信息(最大 50Hz)
     * </pre>
     *
     * <code>CONTROL_DEVICE = 33;</code>
     */
    CONTROL_DEVICE(33),
    /**
     * <pre>
     * 硬件时钟同步(400Hz)
     * </pre>
     *
     * <code>HARD_SYNC = 34;</code>
     */
    HARD_SYNC(34),
    /**
     * <pre>
     * GPS 控制等级(最大 50Hz)
     * </pre>
     *
     * <code>GPS_CONTROL_LEVEL = 35;</code>
     */
    GPS_CONTROL_LEVEL(35),
    /**
     * <pre>
     * 带标记遥控遥感信息(最大 50Hz)
     * </pre>
     *
     * <code>RC_WITH_FLAG_DATA = 36;</code>
     */
    RC_WITH_FLAG_DATA(36),
    /**
     * <pre>
     * 电调数据(最大 50Hz)
     * </pre>
     *
     * <code>ESC_DATA = 37;</code>
     */
    ESC_DATA(37),
    /**
     * <pre>
     * RTK 连接状态(最大 50Hz)
     * </pre>
     *
     * <code>RTK_CONNECT_STATUS = 38;</code>
     */
    RTK_CONNECT_STATUS(38),
    /**
     * <pre>
     * 云台控制模式(最大 50Hz)
     * </pre>
     *
     * <code>GIMBAL_CONTROL_MODE = 39;</code>
     */
    GIMBAL_CONTROL_MODE(39),
    /**
     * <pre>
     * 飞行异常信息(最大 50Hz)
     * </pre>
     *
     * <code>FLIGHT_ANOMALY = 40;</code>
     */
    FLIGHT_ANOMALY(40),
    /**
     * <pre>
     * 笛卡尔坐标位置(200Hz)
     * </pre>
     *
     * <code>POSITION_VO = 41;</code>
     */
    POSITION_VO(41),
    /**
     * <pre>
     * 避障数据(最大 100Hz)
     * </pre>
     *
     * <code>AVOID_DATA = 42;</code>
     */
    AVOID_DATA(42),
    /**
     * <pre>
     * 返航点设置状态(最大 50Hz)
     * </pre>
     *
     * <code>HOME_POINT_SET_STATUS = 43;</code>
     */
    HOME_POINT_SET_STATUS(43),
    /**
     * <pre>
     * 返航点信息(最大 50Hz)
     * </pre>
     *
     * <code>HOME_POINT_INFO = 44;</code>
     */
    HOME_POINT_INFO(44),
    /**
     * <pre>
     * 三云台信息,适用M300 RTK与M350 RTK上下三个云台的信息(最大 50Hz)
     * </pre>
     *
     * <code>THREE_GIMBAL_DATA = 45;</code>
     */
    THREE_GIMBAL_DATA(45),
    /**
     * <pre>
     * 1号电池信息(最大 50Hz)
     * </pre>
     *
     * <code>BATTERY_SINGLE_INFO_INDEX1 = 46;</code>
     */
    BATTERY_SINGLE_INFO_INDEX1(46),
    /**
     * <pre>
     * 2号电池信息(最大 50Hz)
     * </pre>
     *
     * <code>BATTERY_SINGLE_INFO_INDEX2 = 63;</code>
     */
    BATTERY_SINGLE_INFO_INDEX2(63),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 姿态四元数(最大 200Hz)
     * </pre>
     *
     * <code>QUATERNION = 0;</code>
     */
    public static final int QUATERNION_VALUE = 0;
    /**
     * <pre>
     * 相对地面加速度(最大 200Hz)
     * </pre>
     *
     * <code>ACCELERATION_GROUND = 1;</code>
     */
    public static final int ACCELERATION_GROUND_VALUE = 1;
    /**
     * <pre>
     * 相对机体加速度(最大 200Hz)
     * </pre>
     *
     * <code>ACCELERATION_BODY = 2;</code>
     */
    public static final int ACCELERATION_BODY_VALUE = 2;
    /**
     * <pre>
     * 原始加速度(最大 400Hz)
     * </pre>
     *
     * <code>ACCELERATION_RAW = 3;</code>
     */
    public static final int ACCELERATION_RAW_VALUE = 3;
    /**
     * <pre>
     * 速度(最大 200Hz)
     * </pre>
     *
     * <code>VELOCITY = 4;</code>
     */
    public static final int VELOCITY_VALUE = 4;
    /**
     * <pre>
     * 融合角速度(最大 200Hz)
     * </pre>
     *
     * <code>ANGULAR_RATE_FUSIONED = 5;</code>
     */
    public static final int ANGULAR_RATE_FUSIONED_VALUE = 5;
    /**
     * <pre>
     * 原始角速度(最大 400Hz)
     * </pre>
     *
     * <code>ANGULAR_RATE_RAW = 6;</code>
     */
    public static final int ANGULAR_RATE_RAW_VALUE = 6;
    /**
     * <pre>
     * 融合高度(最大 200Hz)
     * </pre>
     *
     * <code>ALTITUDE_FUSED = 7;</code>
     */
    public static final int ALTITUDE_FUSED_VALUE = 7;
    /**
     * <pre>
     * 气压计高度(最大 200Hz)
     * </pre>
     *
     * <code>ALTITUDE_BAROMETER = 8;</code>
     */
    public static final int ALTITUDE_BAROMETER_VALUE = 8;
    /**
     * <pre>
     * Home 点高度(最大 1Hz)
     * </pre>
     *
     * <code>ALTITUDE_OF_HOMEPOINT = 9;</code>
     */
    public static final int ALTITUDE_OF_HOMEPOINT_VALUE = 9;
    /**
     * <pre>
     * 融合相对地面高度(最大 100Hz)
     * </pre>
     *
     * <code>HEIGHT_FUSION = 10;</code>
     */
    public static final int HEIGHT_FUSION_VALUE = 10;
    /**
     * <pre>
     * 相对地面高度(最大 200Hz)
     * </pre>
     *
     * <code>HEIGHT_RELATIVE = 11;</code>
     */
    public static final int HEIGHT_RELATIVE_VALUE = 11;
    /**
     * <pre>
     * 融合位置坐标(最大 200Hz)
     * </pre>
     *
     * <code>POSITION_FUSED = 12;</code>
     */
    public static final int POSITION_FUSED_VALUE = 12;
    /**
     * <pre>
     * GPS 日期,年月日(最大 5Hz)
     * </pre>
     *
     * <code>GPS_DATE = 13;</code>
     */
    public static final int GPS_DATE_VALUE = 13;
    /**
     * <pre>
     * GPS 时间,时分秒(最大 5Hz)
     * </pre>
     *
     * <code>GPS_TIME = 14;</code>
     */
    public static final int GPS_TIME_VALUE = 14;
    /**
     * <pre>
     * GPS 位置(最大 5Hz)
     * </pre>
     *
     * <code>GPS_POSITION = 15;</code>
     */
    public static final int GPS_POSITION_VALUE = 15;
    /**
     * <pre>
     * GPS 速度(最大 5Hz)
     * </pre>
     *
     * <code>GPS_VELOCITY = 16;</code>
     */
    public static final int GPS_VELOCITY_VALUE = 16;
    /**
     * <pre>
     * GPS 信息(最大 5Hz)
     * </pre>
     *
     * <code>GPS_DETAILS = 17;</code>
     */
    public static final int GPS_DETAILS_VALUE = 17;
    /**
     * <pre>
     * GPS 信号强度(最大 50Hz)
     * </pre>
     *
     * <code>GPS_SIGNAL_LEVEL = 18;</code>
     */
    public static final int GPS_SIGNAL_LEVEL_VALUE = 18;
    /**
     * <pre>
     * RTK 位置(最大 5Hz)
     * </pre>
     *
     * <code>RTK_POSITION = 19;</code>
     */
    public static final int RTK_POSITION_VALUE = 19;
    /**
     * <pre>
     * RTK 速度(最大 5Hz)
     * </pre>
     *
     * <code>RTK_VELOCITY = 20;</code>
     */
    public static final int RTK_VELOCITY_VALUE = 20;
    /**
     * <pre>
     * RTK 航向角(最大 5Hz)
     * </pre>
     *
     * <code>RTK_YAW = 21;</code>
     */
    public static final int RTK_YAW_VALUE = 21;
    /**
     * <pre>
     * RTK 位置信息(最大 5Hz)
     * </pre>
     *
     * <code>RTK_POSITION_INFO = 22;</code>
     */
    public static final int RTK_POSITION_INFO_VALUE = 22;
    /**
     * <pre>
     * RTK 航向信息(最大 5Hz)
     * </pre>
     *
     * <code>RTK_YAW_INFO = 23;</code>
     */
    public static final int RTK_YAW_INFO_VALUE = 23;
    /**
     * <pre>
     * 指南针信息(最大 100Hz)
     * </pre>
     *
     * <code>COMPASS = 24;</code>
     */
    public static final int COMPASS_VALUE = 24;
    /**
     * <pre>
     * 遥控摇杆信息(最大 50Hz)
     * </pre>
     *
     * <code>RC = 25;</code>
     */
    public static final int RC_VALUE = 25;
    /**
     * <pre>
     * 云台角度(最大 50Hz)
     * </pre>
     *
     * <code>GIMBAL_ANGLES = 26;</code>
     */
    public static final int GIMBAL_ANGLES_VALUE = 26;
    /**
     * <pre>
     * 云台状态(最大 50Hz)
     * </pre>
     *
     * <code>GIMBAL_STATUS = 27;</code>
     */
    public static final int GIMBAL_STATUS_VALUE = 27;
    /**
     * <pre>
     * 飞行状态(最大 50Hz)
     * </pre>
     *
     * <code>STATUS_FLIGHT = 28;</code>
     */
    public static final int STATUS_FLIGHT_VALUE = 28;
    /**
     * <pre>
     * 飞行模式状态(最大 50Hz)
     * </pre>
     *
     * <code>STATUS_DISPLAYMODE = 29;</code>
     */
    public static final int STATUS_DISPLAYMODE_VALUE = 29;
    /**
     * <pre>
     * 起落架状态(最大 50Hz)
     * </pre>
     *
     * <code>STATUS_LANDINGGEAR = 30;</code>
     */
    public static final int STATUS_LANDINGGEAR_VALUE = 30;
    /**
     * <pre>
     * 电机启动错误码(最大 50Hz)
     * </pre>
     *
     * <code>STATUS_MOTOR_START_ERROR = 31;</code>
     */
    public static final int STATUS_MOTOR_START_ERROR_VALUE = 31;
    /**
     * <pre>
     * 电池信息(最大 50Hz)
     * </pre>
     *
     * <code>BATTERY_INFO = 32;</code>
     */
    public static final int BATTERY_INFO_VALUE = 32;
    /**
     * <pre>
     * 设备控制信息(最大 50Hz)
     * </pre>
     *
     * <code>CONTROL_DEVICE = 33;</code>
     */
    public static final int CONTROL_DEVICE_VALUE = 33;
    /**
     * <pre>
     * 硬件时钟同步(400Hz)
     * </pre>
     *
     * <code>HARD_SYNC = 34;</code>
     */
    public static final int HARD_SYNC_VALUE = 34;
    /**
     * <pre>
     * GPS 控制等级(最大 50Hz)
     * </pre>
     *
     * <code>GPS_CONTROL_LEVEL = 35;</code>
     */
    public static final int GPS_CONTROL_LEVEL_VALUE = 35;
    /**
     * <pre>
     * 带标记遥控遥感信息(最大 50Hz)
     * </pre>
     *
     * <code>RC_WITH_FLAG_DATA = 36;</code>
     */
    public static final int RC_WITH_FLAG_DATA_VALUE = 36;
    /**
     * <pre>
     * 电调数据(最大 50Hz)
     * </pre>
     *
     * <code>ESC_DATA = 37;</code>
     */
    public static final int ESC_DATA_VALUE = 37;
    /**
     * <pre>
     * RTK 连接状态(最大 50Hz)
     * </pre>
     *
     * <code>RTK_CONNECT_STATUS = 38;</code>
     */
    public static final int RTK_CONNECT_STATUS_VALUE = 38;
    /**
     * <pre>
     * 云台控制模式(最大 50Hz)
     * </pre>
     *
     * <code>GIMBAL_CONTROL_MODE = 39;</code>
     */
    public static final int GIMBAL_CONTROL_MODE_VALUE = 39;
    /**
     * <pre>
     * 飞行异常信息(最大 50Hz)
     * </pre>
     *
     * <code>FLIGHT_ANOMALY = 40;</code>
     */
    public static final int FLIGHT_ANOMALY_VALUE = 40;
    /**
     * <pre>
     * 笛卡尔坐标位置(200Hz)
     * </pre>
     *
     * <code>POSITION_VO = 41;</code>
     */
    public static final int POSITION_VO_VALUE = 41;
    /**
     * <pre>
     * 避障数据(最大 100Hz)
     * </pre>
     *
     * <code>AVOID_DATA = 42;</code>
     */
    public static final int AVOID_DATA_VALUE = 42;
    /**
     * <pre>
     * 返航点设置状态(最大 50Hz)
     * </pre>
     *
     * <code>HOME_POINT_SET_STATUS = 43;</code>
     */
    public static final int HOME_POINT_SET_STATUS_VALUE = 43;
    /**
     * <pre>
     * 返航点信息(最大 50Hz)
     * </pre>
     *
     * <code>HOME_POINT_INFO = 44;</code>
     */
    public static final int HOME_POINT_INFO_VALUE = 44;
    /**
     * <pre>
     * 三云台信息,适用M300 RTK与M350 RTK上下三个云台的信息(最大 50Hz)
     * </pre>
     *
     * <code>THREE_GIMBAL_DATA = 45;</code>
     */
    public static final int THREE_GIMBAL_DATA_VALUE = 45;
    /**
     * <pre>
     * 1号电池信息(最大 50Hz)
     * </pre>
     *
     * <code>BATTERY_SINGLE_INFO_INDEX1 = 46;</code>
     */
    public static final int BATTERY_SINGLE_INFO_INDEX1_VALUE = 46;
    /**
     * <pre>
     * 2号电池信息(最大 50Hz)
     * </pre>
     *
     * <code>BATTERY_SINGLE_INFO_INDEX2 = 63;</code>
     */
    public static final int BATTERY_SINGLE_INFO_INDEX2_VALUE = 63;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static FcSubscriptionTopicEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static FcSubscriptionTopicEnum forNumber(int value) {
      switch (value) {
        case 0: return QUATERNION;
        case 1: return ACCELERATION_GROUND;
        case 2: return ACCELERATION_BODY;
        case 3: return ACCELERATION_RAW;
        case 4: return VELOCITY;
        case 5: return ANGULAR_RATE_FUSIONED;
        case 6: return ANGULAR_RATE_RAW;
        case 7: return ALTITUDE_FUSED;
        case 8: return ALTITUDE_BAROMETER;
        case 9: return ALTITUDE_OF_HOMEPOINT;
        case 10: return HEIGHT_FUSION;
        case 11: return HEIGHT_RELATIVE;
        case 12: return POSITION_FUSED;
        case 13: return GPS_DATE;
        case 14: return GPS_TIME;
        case 15: return GPS_POSITION;
        case 16: return GPS_VELOCITY;
        case 17: return GPS_DETAILS;
        case 18: return GPS_SIGNAL_LEVEL;
        case 19: return RTK_POSITION;
        case 20: return RTK_VELOCITY;
        case 21: return RTK_YAW;
        case 22: return RTK_POSITION_INFO;
        case 23: return RTK_YAW_INFO;
        case 24: return COMPASS;
        case 25: return RC;
        case 26: return GIMBAL_ANGLES;
        case 27: return GIMBAL_STATUS;
        case 28: return STATUS_FLIGHT;
        case 29: return STATUS_DISPLAYMODE;
        case 30: return STATUS_LANDINGGEAR;
        case 31: return STATUS_MOTOR_START_ERROR;
        case 32: return BATTERY_INFO;
        case 33: return CONTROL_DEVICE;
        case 34: return HARD_SYNC;
        case 35: return GPS_CONTROL_LEVEL;
        case 36: return RC_WITH_FLAG_DATA;
        case 37: return ESC_DATA;
        case 38: return RTK_CONNECT_STATUS;
        case 39: return GIMBAL_CONTROL_MODE;
        case 40: return FLIGHT_ANOMALY;
        case 41: return POSITION_VO;
        case 42: return AVOID_DATA;
        case 43: return HOME_POINT_SET_STATUS;
        case 44: return HOME_POINT_INFO;
        case 45: return THREE_GIMBAL_DATA;
        case 46: return BATTERY_SINGLE_INFO_INDEX1;
        case 63: return BATTERY_SINGLE_INFO_INDEX2;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FcSubscriptionTopicEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        FcSubscriptionTopicEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FcSubscriptionTopicEnum>() {
            public FcSubscriptionTopicEnum findValueByNumber(int number) {
              return FcSubscriptionTopicEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MdsdProtoBuf.getDescriptor().getEnumTypes().get(1);
    }

    private static final FcSubscriptionTopicEnum[] VALUES = values();

    public static FcSubscriptionTopicEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private FcSubscriptionTopicEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:FcSubscriptionTopicEnum)
  }

  /**
   * <pre>
   * 数据订阅频率 - 枚举
   * </pre>
   *
   * Protobuf enum {@code SubscriptionFreqEnum}
   */
  public enum SubscriptionFreqEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>HZ_0 = 0;</code>
     */
    HZ_0(0),
    /**
     * <code>HZ_1 = 1;</code>
     */
    HZ_1(1),
    /**
     * <code>HZ_5 = 5;</code>
     */
    HZ_5(5),
    /**
     * <code>HZ_10 = 10;</code>
     */
    HZ_10(10),
    /**
     * <code>HZ_50 = 50;</code>
     */
    HZ_50(50),
    /**
     * <code>HZ_100 = 100;</code>
     */
    HZ_100(100),
    /**
     * <code>HZ_200 = 200;</code>
     */
    HZ_200(200),
    /**
     * <code>HZ_400 = 400;</code>
     */
    HZ_400(400),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>HZ_0 = 0;</code>
     */
    public static final int HZ_0_VALUE = 0;
    /**
     * <code>HZ_1 = 1;</code>
     */
    public static final int HZ_1_VALUE = 1;
    /**
     * <code>HZ_5 = 5;</code>
     */
    public static final int HZ_5_VALUE = 5;
    /**
     * <code>HZ_10 = 10;</code>
     */
    public static final int HZ_10_VALUE = 10;
    /**
     * <code>HZ_50 = 50;</code>
     */
    public static final int HZ_50_VALUE = 50;
    /**
     * <code>HZ_100 = 100;</code>
     */
    public static final int HZ_100_VALUE = 100;
    /**
     * <code>HZ_200 = 200;</code>
     */
    public static final int HZ_200_VALUE = 200;
    /**
     * <code>HZ_400 = 400;</code>
     */
    public static final int HZ_400_VALUE = 400;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static SubscriptionFreqEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SubscriptionFreqEnum forNumber(int value) {
      switch (value) {
        case 0: return HZ_0;
        case 1: return HZ_1;
        case 5: return HZ_5;
        case 10: return HZ_10;
        case 50: return HZ_50;
        case 100: return HZ_100;
        case 200: return HZ_200;
        case 400: return HZ_400;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SubscriptionFreqEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SubscriptionFreqEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SubscriptionFreqEnum>() {
            public SubscriptionFreqEnum findValueByNumber(int number) {
              return SubscriptionFreqEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MdsdProtoBuf.getDescriptor().getEnumTypes().get(2);
    }

    private static final SubscriptionFreqEnum[] VALUES = values();

    public static SubscriptionFreqEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SubscriptionFreqEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SubscriptionFreqEnum)
  }

  public interface PayloadOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Payload)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 硬件编码
     * </pre>
     *
     * <code>string machineId = 1;</code>
     * @return The machineId.
     */
    String getMachineId();
    /**
     * <pre>
     * 硬件编码
     * </pre>
     *
     * <code>string machineId = 1;</code>
     * @return The bytes for machineId.
     */
    com.google.protobuf.ByteString
        getMachineIdBytes();

    /**
     * <pre>
     * 指令编号
     * </pre>
     *
     * <code>.CommandEnum command = 2;</code>
     * @return The enum numeric value on the wire for command.
     */
    int getCommandValue();
    /**
     * <pre>
     * 指令编号
     * </pre>
     *
     * <code>.CommandEnum command = 2;</code>
     * @return The command.
     */
    CommandEnum getCommand();

    /**
     * <pre>
     * 数据
     * </pre>
     *
     * <code>string body = 3;</code>
     * @return The body.
     */
    String getBody();
    /**
     * <pre>
     * 数据
     * </pre>
     *
     * <code>string body = 3;</code>
     * @return The bytes for body.
     */
    com.google.protobuf.ByteString
        getBodyBytes();
  }
  /**
   * <pre>
   * 云盒编号(33字节) | 指令编号(1字节) | 动作编号(1字节) | 指令任务编码(2) | 数据(N字节)
   * </pre>
   *
   * Protobuf type {@code Payload}
   */
  public static final class Payload extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Payload)
      PayloadOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Payload.newBuilder() to construct.
    private Payload(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Payload() {
      machineId_ = "";
      command_ = 0;
      body_ = "";
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new Payload();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Payload(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              String s = input.readStringRequireUtf8();

              machineId_ = s;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              command_ = rawValue;
              break;
            }
            case 26: {
              String s = input.readStringRequireUtf8();

              body_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MdsdProtoBuf.internal_static_Payload_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MdsdProtoBuf.internal_static_Payload_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Payload.class, Builder.class);
    }

    public static final int MACHINEID_FIELD_NUMBER = 1;
    private volatile Object machineId_;
    /**
     * <pre>
     * 硬件编码
     * </pre>
     *
     * <code>string machineId = 1;</code>
     * @return The machineId.
     */
    @Override
    public String getMachineId() {
      Object ref = machineId_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        machineId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * 硬件编码
     * </pre>
     *
     * <code>string machineId = 1;</code>
     * @return The bytes for machineId.
     */
    @Override
    public com.google.protobuf.ByteString
        getMachineIdBytes() {
      Object ref = machineId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        machineId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COMMAND_FIELD_NUMBER = 2;
    private int command_;
    /**
     * <pre>
     * 指令编号
     * </pre>
     *
     * <code>.CommandEnum command = 2;</code>
     * @return The enum numeric value on the wire for command.
     */
    @Override public int getCommandValue() {
      return command_;
    }
    /**
     * <pre>
     * 指令编号
     * </pre>
     *
     * <code>.CommandEnum command = 2;</code>
     * @return The command.
     */
    @Override public CommandEnum getCommand() {
      @SuppressWarnings("deprecation")
      CommandEnum result = CommandEnum.valueOf(command_);
      return result == null ? CommandEnum.UNRECOGNIZED : result;
    }

    public static final int BODY_FIELD_NUMBER = 3;
    private volatile Object body_;
    /**
     * <pre>
     * 数据
     * </pre>
     *
     * <code>string body = 3;</code>
     * @return The body.
     */
    @Override
    public String getBody() {
      Object ref = body_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        body_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * 数据
     * </pre>
     *
     * <code>string body = 3;</code>
     * @return The bytes for body.
     */
    @Override
    public com.google.protobuf.ByteString
        getBodyBytes() {
      Object ref = body_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        body_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getMachineIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, machineId_);
      }
      if (command_ != CommandEnum.FC_SUBSCRIPTION.getNumber()) {
        output.writeEnum(2, command_);
      }
      if (!getBodyBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, body_);
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getMachineIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, machineId_);
      }
      if (command_ != CommandEnum.FC_SUBSCRIPTION.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, command_);
      }
      if (!getBodyBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, body_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Payload)) {
        return super.equals(obj);
      }
      Payload other = (Payload) obj;

      if (!getMachineId()
          .equals(other.getMachineId())) return false;
      if (command_ != other.command_) return false;
      if (!getBody()
          .equals(other.getBody())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + MACHINEID_FIELD_NUMBER;
      hash = (53 * hash) + getMachineId().hashCode();
      hash = (37 * hash) + COMMAND_FIELD_NUMBER;
      hash = (53 * hash) + command_;
      hash = (37 * hash) + BODY_FIELD_NUMBER;
      hash = (53 * hash) + getBody().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Payload parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Payload parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Payload parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Payload parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Payload parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Payload parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Payload parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Payload parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Payload parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Payload parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Payload parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Payload parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Payload prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 云盒编号(33字节) | 指令编号(1字节) | 动作编号(1字节) | 指令任务编码(2) | 数据(N字节)
     * </pre>
     *
     * Protobuf type {@code Payload}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Payload)
        PayloadOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MdsdProtoBuf.internal_static_Payload_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MdsdProtoBuf.internal_static_Payload_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Payload.class, Builder.class);
      }

      // Construct using MdsdProtoBuf.Payload.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        machineId_ = "";

        command_ = 0;

        body_ = "";

        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MdsdProtoBuf.internal_static_Payload_descriptor;
      }

      @Override
      public Payload getDefaultInstanceForType() {
        return Payload.getDefaultInstance();
      }

      @Override
      public Payload build() {
        Payload result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Payload buildPartial() {
        Payload result = new Payload(this);
        result.machineId_ = machineId_;
        result.command_ = command_;
        result.body_ = body_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Payload) {
          return mergeFrom((Payload)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Payload other) {
        if (other == Payload.getDefaultInstance()) return this;
        if (!other.getMachineId().isEmpty()) {
          machineId_ = other.machineId_;
          onChanged();
        }
        if (other.command_ != 0) {
          setCommandValue(other.getCommandValue());
        }
        if (!other.getBody().isEmpty()) {
          body_ = other.body_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Payload parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Payload) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private Object machineId_ = "";
      /**
       * <pre>
       * 硬件编码
       * </pre>
       *
       * <code>string machineId = 1;</code>
       * @return The machineId.
       */
      public String getMachineId() {
        Object ref = machineId_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          machineId_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * 硬件编码
       * </pre>
       *
       * <code>string machineId = 1;</code>
       * @return The bytes for machineId.
       */
      public com.google.protobuf.ByteString
          getMachineIdBytes() {
        Object ref = machineId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          machineId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 硬件编码
       * </pre>
       *
       * <code>string machineId = 1;</code>
       * @param value The machineId to set.
       * @return This builder for chaining.
       */
      public Builder setMachineId(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        machineId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 硬件编码
       * </pre>
       *
       * <code>string machineId = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearMachineId() {
        
        machineId_ = getDefaultInstance().getMachineId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 硬件编码
       * </pre>
       *
       * <code>string machineId = 1;</code>
       * @param value The bytes for machineId to set.
       * @return This builder for chaining.
       */
      public Builder setMachineIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        machineId_ = value;
        onChanged();
        return this;
      }

      private int command_ = 0;
      /**
       * <pre>
       * 指令编号
       * </pre>
       *
       * <code>.CommandEnum command = 2;</code>
       * @return The enum numeric value on the wire for command.
       */
      @Override public int getCommandValue() {
        return command_;
      }
      /**
       * <pre>
       * 指令编号
       * </pre>
       *
       * <code>.CommandEnum command = 2;</code>
       * @param value The enum numeric value on the wire for command to set.
       * @return This builder for chaining.
       */
      public Builder setCommandValue(int value) {
        
        command_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 指令编号
       * </pre>
       *
       * <code>.CommandEnum command = 2;</code>
       * @return The command.
       */
      @Override
      public CommandEnum getCommand() {
        @SuppressWarnings("deprecation")
        CommandEnum result = CommandEnum.valueOf(command_);
        return result == null ? CommandEnum.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * 指令编号
       * </pre>
       *
       * <code>.CommandEnum command = 2;</code>
       * @param value The command to set.
       * @return This builder for chaining.
       */
      public Builder setCommand(CommandEnum value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        command_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 指令编号
       * </pre>
       *
       * <code>.CommandEnum command = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCommand() {
        
        command_ = 0;
        onChanged();
        return this;
      }

      private Object body_ = "";
      /**
       * <pre>
       * 数据
       * </pre>
       *
       * <code>string body = 3;</code>
       * @return The body.
       */
      public String getBody() {
        Object ref = body_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          body_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * 数据
       * </pre>
       *
       * <code>string body = 3;</code>
       * @return The bytes for body.
       */
      public com.google.protobuf.ByteString
          getBodyBytes() {
        Object ref = body_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          body_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 数据
       * </pre>
       *
       * <code>string body = 3;</code>
       * @param value The body to set.
       * @return This builder for chaining.
       */
      public Builder setBody(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        body_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 数据
       * </pre>
       *
       * <code>string body = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearBody() {
        
        body_ = getDefaultInstance().getBody();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 数据
       * </pre>
       *
       * <code>string body = 3;</code>
       * @param value The bytes for body to set.
       * @return This builder for chaining.
       */
      public Builder setBodyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        body_ = value;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Payload)
    }

    // @@protoc_insertion_point(class_scope:Payload)
    private static final Payload DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Payload();
    }

    public static Payload getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Payload>
        PARSER = new com.google.protobuf.AbstractParser<Payload>() {
      @Override
      public Payload parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Payload(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Payload> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Payload> getParserForType() {
      return PARSER;
    }

    @Override
    public Payload getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Payload_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Payload_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\nmdsd.proto\"I\n\007Payload\022\021\n\tmachineId\030\001 \001" +
      "(\t\022\035\n\007command\030\002 \001(\0162\014.CommandEnum\022\014\n\004bod" +
      "y\030\003 \001(\t*\334\001\n\013CommandEnum\022\023\n\017FC_SUBSCRIPTI" +
      "ON\020\000\022\022\n\016CAMERA_MANAGER\020\001\022\022\n\016GIMBAL_MANAG" +
      "ER\020\002\022\024\n\020POWER_MANAGEMENT\020\003\022\025\n\021FLIGHT_CON" +
      "TROLLER\020\004\022\007\n\003HMS\020\005\022\r\n\tTIME_SYNC\020\006\022\r\n\tLIV" +
      "E_VIEW\020\007\022\021\n\rLOCAL_UPGRADE\020\010\022\017\n\013POSITIONI" +
      "NG\020\t\022\014\n\010WAYPOINT\020\n\022\n\n\006WIDGET\020\013*\354\007\n\027FcSub" +
      "scriptionTopicEnum\022\016\n\nQUATERNION\020\000\022\027\n\023AC" +
      "CELERATION_GROUND\020\001\022\025\n\021ACCELERATION_BODY" +
      "\020\002\022\024\n\020ACCELERATION_RAW\020\003\022\014\n\010VELOCITY\020\004\022\031" +
      "\n\025ANGULAR_RATE_FUSIONED\020\005\022\024\n\020ANGULAR_RAT" +
      "E_RAW\020\006\022\022\n\016ALTITUDE_FUSED\020\007\022\026\n\022ALTITUDE_" +
      "BAROMETER\020\010\022\031\n\025ALTITUDE_OF_HOMEPOINT\020\t\022\021" +
      "\n\rHEIGHT_FUSION\020\n\022\023\n\017HEIGHT_RELATIVE\020\013\022\022" +
      "\n\016POSITION_FUSED\020\014\022\014\n\010GPS_DATE\020\r\022\014\n\010GPS_" +
      "TIME\020\016\022\020\n\014GPS_POSITION\020\017\022\020\n\014GPS_VELOCITY" +
      "\020\020\022\017\n\013GPS_DETAILS\020\021\022\024\n\020GPS_SIGNAL_LEVEL\020" +
      "\022\022\020\n\014RTK_POSITION\020\023\022\020\n\014RTK_VELOCITY\020\024\022\013\n" +
      "\007RTK_YAW\020\025\022\025\n\021RTK_POSITION_INFO\020\026\022\020\n\014RTK" +
      "_YAW_INFO\020\027\022\013\n\007COMPASS\020\030\022\006\n\002RC\020\031\022\021\n\rGIMB" +
      "AL_ANGLES\020\032\022\021\n\rGIMBAL_STATUS\020\033\022\021\n\rSTATUS" +
      "_FLIGHT\020\034\022\026\n\022STATUS_DISPLAYMODE\020\035\022\026\n\022STA" +
      "TUS_LANDINGGEAR\020\036\022\034\n\030STATUS_MOTOR_START_" +
      "ERROR\020\037\022\020\n\014BATTERY_INFO\020 \022\022\n\016CONTROL_DEV" +
      "ICE\020!\022\r\n\tHARD_SYNC\020\"\022\025\n\021GPS_CONTROL_LEVE" +
      "L\020#\022\025\n\021RC_WITH_FLAG_DATA\020$\022\014\n\010ESC_DATA\020%" +
      "\022\026\n\022RTK_CONNECT_STATUS\020&\022\027\n\023GIMBAL_CONTR" +
      "OL_MODE\020\'\022\022\n\016FLIGHT_ANOMALY\020(\022\017\n\013POSITIO" +
      "N_VO\020)\022\016\n\nAVOID_DATA\020*\022\031\n\025HOME_POINT_SET" +
      "_STATUS\020+\022\023\n\017HOME_POINT_INFO\020,\022\025\n\021THREE_" +
      "GIMBAL_DATA\020-\022\036\n\032BATTERY_SINGLE_INFO_IND" +
      "EX1\020.\022\036\n\032BATTERY_SINGLE_INFO_INDEX2\020?*p\n" +
      "\024SubscriptionFreqEnum\022\010\n\004HZ_0\020\000\022\010\n\004HZ_1\020" +
      "\001\022\010\n\004HZ_5\020\005\022\t\n\005HZ_10\020\n\022\t\n\005HZ_50\0202\022\n\n\006HZ_" +
      "100\020d\022\013\n\006HZ_200\020\310\001\022\013\n\006HZ_400\020\220\003B\016B\014MdsdP" +
      "rotoBufb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_Payload_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Payload_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Payload_descriptor,
        new String[] { "MachineId", "Command", "Body", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
