package com.mdsd.cloud.controller.transfer.enums;

import lombok.Getter;

/**
 * @author WangYunwei [2024-07-16]
 */
@Getter
public enum InstructEnum {

    请求帧头(0x7479,0),
    回复帧头(0x6A77,0),
    注册(0x01, 0),
    心跳(0x02, 0),
    图片上传完成通知(0x09, 0),
    云盒开关机通知(0x0A, 0),
    信道质量(0x0C, 0),
    状态数据(0xA8, 0),
    遥测数据(0xA9, 0),

    云台转动_基于角度_回中(0xD1, 0x00),
    云台转动_基于角度_上(0xD1, 0x01),
    云台转动_基于角度_右上(0xD1, 0x02),
    云台转动_基于角度_右(0xD1, 0x03),
    云台转动_基于角度_右下(0xD1, 0x04),
    云台转动_基于角度_下(0xD1, 0x05),
    云台转动_基于角度_左下(0xD1, 0x06),
    云台转动_基于角度_左(0xD1, 0x07),
    云台转动_基于角度_左上(0xD1, 0x08),
    云台转动_基于角度_绝对值控制(0xD1, 0x09),
    变倍加(0xD1, 0x0A),
    变倍减(0xD1, 0x0B),
    变倍到指定倍数(0xD1, 0x0D),
    变倍复位(0xD1, 0x0F),
    航线规划(0xD1, 0x10),
    起飞(0xD1, 0x11),
    返航(0xD1, 0x12),
    取消返航(0xD1, 0x13),
    降落(0xD1, 0x14),
    取消降落(0xD1, 0x15),
    开始航线(0xD1, 0x17),
    暂停航线(0xD1, 0x18),
    恢复航线(0xD1, 0x19),
    实时激光测距(0xD1, 0x1A),
    手动激光测距(0xD1, 0x1B),
    对焦(0xD1, 0x1B),
    云台设置跟随模式(0xD1, 0x1C),
    云台设置姿态(0xD1, 0x1D),
    结束航线(0xD1, 0x20),
    设置返航高度(0xD1, 0x21),
    设置相机模式(0xD1, 0x22),
    拍照(0xD1, 0x23),
    开始录像(0xD1, 0x24),
    停止录像(0xD1, 0x25),
    切换视频源(0xD1, 0x26),
    切换摄像头(0xD1, 0x27),
    方向控制(0xD1, 0x28),
    强制降落(0xD1, 0x29),
    打开单点测温(0xD1, 0x2A),
    关闭单点测温(0xD1, 0x2B),
    打开区域测温(0xD1, 0x2C),
    关闭区域测温(0xD1, 0x2D),
    航线结束通知(0xD1, 0x2E),
    切换无人机控制权(0xD1, 0x30),
    设置返航点(0xD1, 0x31),
    紧急制动(0xD1, 0x32),
    水平避障设置(0xD1, 0x35),
    上避障设置(0xD1, 0x36),
    下避障设置(0xD1, 0x37),
    自动拍照(0xD1, 0x38),
    指点飞行(0xD1, 0x39),
    停止指点飞行(0xD1, 0x3A),
    无人机准备完成通知(0xD1, 0x3D),
    返航到指定机场(0xD1, 0x3E),
    格式化存储卡(0xD1, 0x40),
    打开或关闭照片回传(0xD1, 0x43),
    云台转动_基于速度(0xD1, 0xF4),
    云台转动_基于角度_停止(0xD1, 0xFE),
    变倍停止(0xD1, 0xFF),

    设置入网方式(0xD2, 0x01),
    设置视频码流(0xD2, 0x05),
    切换SIM卡(0xD2, 0x06),
    打开关闭AI识别(0xD2, 0x10),
    链路设置(0xD2, 0x1F),

    喊话模式切换(0xD3, 0x01),
    实时喊话(0xD3, 0x02),
    录音喊话(0xD3, 0x03),
    文字喊话(0xD3, 0x04),
    设置音量(0xD3, 0x05),
    设置循环播放(0xD3, 0x06),
    停止喊话(0xD3, 0xFF),

    机场任务完成通知(0xD5, 0xFE),

    开关灯(0xD6, 0x01),
    开关爆闪(0xD6, 0x02),
    功率限制开关(0xD6, 0x03),
    亮度设置(0xD6, 0x04),
    设置俯仰角(0xD6, 0x05),

    MOP数据透传(0xDC, 0),

    解锁开关(0xDD, 0x01),
    点火开关(0xDD, 0x02),
    喷火开关(0xDD, 0x03),
    燃料开关(0xDD, 0x04),
    其它开关(0xDD, 0x05),
    压力设置(0xDD, 0x06),
    档位设置(0xDD, 0x07),
    转动控制(0xDD, 0x08),
    设置喷火时间(0xDD, 0x09),
    避开喷火区开关(0xDD, 0xFE);

    private final int instruct;

    private final int action;

    InstructEnum(int instruct, int action) {

        this.instruct = instruct;
        this.action = action;
    }

    public static InstructEnum getEnum(final int instruct) {

        if (0 != instruct) {
            for (final InstructEnum item : InstructEnum.values()) {
                if (instruct == item.getInstruct()) {
                    return item;
                }
            }
        }
        return null;
    }

    public static InstructEnum getEnum(final int instruct, int action) {

        if (0 != instruct) {

            for (final InstructEnum item : InstructEnum.values()) {
                if (instruct == item.getInstruct() && action == item.getAction()) {
                    return item;
                }
            }
        }
        return null;
    }
}
