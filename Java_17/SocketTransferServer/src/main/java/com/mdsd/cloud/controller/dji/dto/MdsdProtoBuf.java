package com.mdsd.cloud.controller.dji.dto;// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mdsd.proto

public final class MdsdProtoBuf {
  private MdsdProtoBuf() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * 指令编号枚举
   * </pre>
   *
   * Protobuf enum {@code CommandEnum}
   */
  public enum CommandEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 日志
     * </pre>
     *
     * <code>LOGGER = 0;</code>
     */
    LOGGER(0),
    /**
     * <pre>
     * 飞控订阅
     * </pre>
     *
     * <code>FC_SUBSCRIPTION = 1;</code>
     */
    FC_SUBSCRIPTION(1),
    /**
     * <pre>
     * 相机管理
     * </pre>
     *
     * <code>CAMERA_MANAGER = 2;</code>
     */
    CAMERA_MANAGER(2),
    /**
     * <pre>
     * 云台管理
     * </pre>
     *
     * <code>GIMBAL_MANAGER = 3;</code>
     */
    GIMBAL_MANAGER(3),
    /**
     * <pre>
     * 电源管理
     * </pre>
     *
     * <code>POWER_MANAGEMENT = 4;</code>
     */
    POWER_MANAGEMENT(4),
    /**
     * <pre>
     * 飞行控制
     * </pre>
     *
     * <code>FLIGHT_CONTROLLER = 5;</code>
     */
    FLIGHT_CONTROLLER(5),
    /**
     * <pre>
     * HMS功能: 获取无人机的健康管理信息,有效监控无人机当前状态
     * </pre>
     *
     * <code>HMS = 6;</code>
     */
    HMS(6),
    /**
     * <pre>
     * 时间同步
     * </pre>
     *
     * <code>TIME_SYNC = 7;</code>
     */
    TIME_SYNC(7),
    /**
     * <pre>
     * 获取相机码流    
     * </pre>
     *
     * <code>LIVE_VIEW = 8;</code>
     */
    LIVE_VIEW(8),
    /**
     * <pre>
     * 本地升级
     * </pre>
     *
     * <code>LOCAL_UPGRADE = 9;</code>
     */
    LOCAL_UPGRADE(9),
    /**
     * <pre>
     * 精准定位
     * </pre>
     *
     * <code>POSITIONING = 10;</code>
     */
    POSITIONING(10),
    /**
     * <pre>
     * 运动规划
     * </pre>
     *
     * <code>WAYPOINT = 11;</code>
     */
    WAYPOINT(11),
    /**
     * <pre>
     * 喊话器控件
     * </pre>
     *
     * <code>WIDGET = 12;</code>
     */
    WIDGET(12),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 日志
     * </pre>
     *
     * <code>LOGGER = 0;</code>
     */
    public static final int LOGGER_VALUE = 0;
    /**
     * <pre>
     * 飞控订阅
     * </pre>
     *
     * <code>FC_SUBSCRIPTION = 1;</code>
     */
    public static final int FC_SUBSCRIPTION_VALUE = 1;
    /**
     * <pre>
     * 相机管理
     * </pre>
     *
     * <code>CAMERA_MANAGER = 2;</code>
     */
    public static final int CAMERA_MANAGER_VALUE = 2;
    /**
     * <pre>
     * 云台管理
     * </pre>
     *
     * <code>GIMBAL_MANAGER = 3;</code>
     */
    public static final int GIMBAL_MANAGER_VALUE = 3;
    /**
     * <pre>
     * 电源管理
     * </pre>
     *
     * <code>POWER_MANAGEMENT = 4;</code>
     */
    public static final int POWER_MANAGEMENT_VALUE = 4;
    /**
     * <pre>
     * 飞行控制
     * </pre>
     *
     * <code>FLIGHT_CONTROLLER = 5;</code>
     */
    public static final int FLIGHT_CONTROLLER_VALUE = 5;
    /**
     * <pre>
     * HMS功能: 获取无人机的健康管理信息,有效监控无人机当前状态
     * </pre>
     *
     * <code>HMS = 6;</code>
     */
    public static final int HMS_VALUE = 6;
    /**
     * <pre>
     * 时间同步
     * </pre>
     *
     * <code>TIME_SYNC = 7;</code>
     */
    public static final int TIME_SYNC_VALUE = 7;
    /**
     * <pre>
     * 获取相机码流    
     * </pre>
     *
     * <code>LIVE_VIEW = 8;</code>
     */
    public static final int LIVE_VIEW_VALUE = 8;
    /**
     * <pre>
     * 本地升级
     * </pre>
     *
     * <code>LOCAL_UPGRADE = 9;</code>
     */
    public static final int LOCAL_UPGRADE_VALUE = 9;
    /**
     * <pre>
     * 精准定位
     * </pre>
     *
     * <code>POSITIONING = 10;</code>
     */
    public static final int POSITIONING_VALUE = 10;
    /**
     * <pre>
     * 运动规划
     * </pre>
     *
     * <code>WAYPOINT = 11;</code>
     */
    public static final int WAYPOINT_VALUE = 11;
    /**
     * <pre>
     * 喊话器控件
     * </pre>
     *
     * <code>WIDGET = 12;</code>
     */
    public static final int WIDGET_VALUE = 12;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static CommandEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CommandEnum forNumber(int value) {
      switch (value) {
        case 0: return LOGGER;
        case 1: return FC_SUBSCRIPTION;
        case 2: return CAMERA_MANAGER;
        case 3: return GIMBAL_MANAGER;
        case 4: return POWER_MANAGEMENT;
        case 5: return FLIGHT_CONTROLLER;
        case 6: return HMS;
        case 7: return TIME_SYNC;
        case 8: return LIVE_VIEW;
        case 9: return LOCAL_UPGRADE;
        case 10: return POSITIONING;
        case 11: return WAYPOINT;
        case 12: return WIDGET;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CommandEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CommandEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CommandEnum>() {
            public CommandEnum findValueByNumber(int number) {
              return CommandEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MdsdProtoBuf.getDescriptor().getEnumTypes().get(0);
    }

    private static final CommandEnum[] VALUES = values();

    public static CommandEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CommandEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:CommandEnum)
  }

  /**
   * <pre>
   * 订阅主题 - 动作枚举
   * </pre>
   *
   * Protobuf enum {@code FcSubscriptionTopicEnum}
   */
  public enum FcSubscriptionTopicEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>SUBSCRIPTION_TOPIC_UNKNOWN = 0;</code>
     */
    SUBSCRIPTION_TOPIC_UNKNOWN(0),
    /**
     * <pre>
     * 姿态四元数(最大 200Hz)
     * </pre>
     *
     * <code>QUATERNION = 256;</code>
     */
    QUATERNION(256),
    /**
     * <pre>
     * 相对地面加速度(最大 200Hz)
     * </pre>
     *
     * <code>ACCELERATION_GROUND = 258;</code>
     */
    ACCELERATION_GROUND(258),
    /**
     * <pre>
     * 相对机体加速度(最大 200Hz)
     * </pre>
     *
     * <code>ACCELERATION_BODY = 259;</code>
     */
    ACCELERATION_BODY(259),
    /**
     * <pre>
     * 原始加速度(最大 400Hz)
     * </pre>
     *
     * <code>ACCELERATION_RAW = 260;</code>
     */
    ACCELERATION_RAW(260),
    /**
     * <pre>
     * 速度(最大 200Hz)
     * </pre>
     *
     * <code>VELOCITY = 261;</code>
     */
    VELOCITY(261),
    /**
     * <pre>
     * 融合角速度(最大 200Hz)
     * </pre>
     *
     * <code>ANGULAR_RATE_FUSIONED = 262;</code>
     */
    ANGULAR_RATE_FUSIONED(262),
    /**
     * <pre>
     * 原始角速度(最大 400Hz)
     * </pre>
     *
     * <code>ANGULAR_RATE_RAW = 263;</code>
     */
    ANGULAR_RATE_RAW(263),
    /**
     * <pre>
     * 融合高度(最大 200Hz)
     * </pre>
     *
     * <code>ALTITUDE_FUSED = 264;</code>
     */
    ALTITUDE_FUSED(264),
    /**
     * <pre>
     * 气压计高度(最大 200Hz)
     * </pre>
     *
     * <code>ALTITUDE_BAROMETER = 265;</code>
     */
    ALTITUDE_BAROMETER(265),
    /**
     * <pre>
     * Home 点高度(最大 1Hz)
     * </pre>
     *
     * <code>ALTITUDE_OF_HOMEPOINT = 266;</code>
     */
    ALTITUDE_OF_HOMEPOINT(266),
    /**
     * <pre>
     * 融合相对地面高度(最大 100Hz)
     * </pre>
     *
     * <code>HEIGHT_FUSION = 267;</code>
     */
    HEIGHT_FUSION(267),
    /**
     * <pre>
     * 相对地面高度(最大 200Hz)
     * </pre>
     *
     * <code>HEIGHT_RELATIVE = 268;</code>
     */
    HEIGHT_RELATIVE(268),
    /**
     * <pre>
     * 融合位置坐标(最大 200Hz)
     * </pre>
     *
     * <code>POSITION_FUSED = 269;</code>
     */
    POSITION_FUSED(269),
    /**
     * <pre>
     * GPS 日期,年月日(最大 5Hz)
     * </pre>
     *
     * <code>GPS_DATE = 270;</code>
     */
    GPS_DATE(270),
    /**
     * <pre>
     * GPS 时间,时分秒(最大 5Hz)
     * </pre>
     *
     * <code>GPS_TIME = 271;</code>
     */
    GPS_TIME(271),
    /**
     * <pre>
     * GPS 位置(最大 5Hz)
     * </pre>
     *
     * <code>GPS_POSITION = 272;</code>
     */
    GPS_POSITION(272),
    /**
     * <pre>
     * GPS 速度(最大 5Hz)
     * </pre>
     *
     * <code>GPS_VELOCITY = 273;</code>
     */
    GPS_VELOCITY(273),
    /**
     * <pre>
     * GPS 信息(最大 5Hz)
     * </pre>
     *
     * <code>GPS_DETAILS = 274;</code>
     */
    GPS_DETAILS(274),
    /**
     * <pre>
     * GPS 信号强度(最大 50Hz)
     * </pre>
     *
     * <code>GPS_SIGNAL_LEVEL = 275;</code>
     */
    GPS_SIGNAL_LEVEL(275),
    /**
     * <pre>
     * RTK 位置(最大 5Hz)
     * </pre>
     *
     * <code>RTK_POSITION = 276;</code>
     */
    RTK_POSITION(276),
    /**
     * <pre>
     * RTK 速度(最大 5Hz)
     * </pre>
     *
     * <code>RTK_VELOCITY = 277;</code>
     */
    RTK_VELOCITY(277),
    /**
     * <pre>
     * RTK 航向角(最大 5Hz)
     * </pre>
     *
     * <code>RTK_YAW = 278;</code>
     */
    RTK_YAW(278),
    /**
     * <pre>
     * RTK 位置信息(最大 5Hz)
     * </pre>
     *
     * <code>RTK_POSITION_INFO = 279;</code>
     */
    RTK_POSITION_INFO(279),
    /**
     * <pre>
     * RTK 航向信息(最大 5Hz)
     * </pre>
     *
     * <code>RTK_YAW_INFO = 280;</code>
     */
    RTK_YAW_INFO(280),
    /**
     * <pre>
     * 指南针信息(最大 100Hz)
     * </pre>
     *
     * <code>COMPASS = 281;</code>
     */
    COMPASS(281),
    /**
     * <pre>
     * 遥控摇杆信息(最大 50Hz)
     * </pre>
     *
     * <code>RC = 282;</code>
     */
    RC(282),
    /**
     * <pre>
     * 云台角度(最大 50Hz)
     * </pre>
     *
     * <code>GIMBAL_ANGLES = 283;</code>
     */
    GIMBAL_ANGLES(283),
    /**
     * <pre>
     * 云台状态(最大 50Hz)
     * </pre>
     *
     * <code>GIMBAL_STATUS = 284;</code>
     */
    GIMBAL_STATUS(284),
    /**
     * <pre>
     * 飞行状态(最大 50Hz)
     * </pre>
     *
     * <code>STATUS_FLIGHT = 285;</code>
     */
    STATUS_FLIGHT(285),
    /**
     * <pre>
     * 飞行模式状态(最大 50Hz)
     * </pre>
     *
     * <code>STATUS_DISPLAYMODE = 286;</code>
     */
    STATUS_DISPLAYMODE(286),
    /**
     * <pre>
     * 起落架状态(最大 50Hz)
     * </pre>
     *
     * <code>STATUS_LANDINGGEAR = 287;</code>
     */
    STATUS_LANDINGGEAR(287),
    /**
     * <pre>
     * 电机启动错误码(最大 50Hz)
     * </pre>
     *
     * <code>STATUS_MOTOR_START_ERROR = 288;</code>
     */
    STATUS_MOTOR_START_ERROR(288),
    /**
     * <pre>
     * 电池信息(最大 50Hz)
     * </pre>
     *
     * <code>BATTERY_INFO = 289;</code>
     */
    BATTERY_INFO(289),
    /**
     * <pre>
     * 设备控制信息(最大 50Hz)
     * </pre>
     *
     * <code>CONTROL_DEVICE = 290;</code>
     */
    CONTROL_DEVICE(290),
    /**
     * <pre>
     * 硬件时钟同步(400Hz)
     * </pre>
     *
     * <code>HARD_SYNC = 291;</code>
     */
    HARD_SYNC(291),
    /**
     * <pre>
     * GPS 控制等级(最大 50Hz)
     * </pre>
     *
     * <code>GPS_CONTROL_LEVEL = 292;</code>
     */
    GPS_CONTROL_LEVEL(292),
    /**
     * <pre>
     * 带标记遥控遥感信息(最大 50Hz)
     * </pre>
     *
     * <code>RC_WITH_FLAG_DATA = 293;</code>
     */
    RC_WITH_FLAG_DATA(293),
    /**
     * <pre>
     * 电调数据(最大 50Hz)
     * </pre>
     *
     * <code>ESC_DATA = 294;</code>
     */
    ESC_DATA(294),
    /**
     * <pre>
     * RTK 连接状态(最大 50Hz)
     * </pre>
     *
     * <code>RTK_CONNECT_STATUS = 295;</code>
     */
    RTK_CONNECT_STATUS(295),
    /**
     * <pre>
     * 云台控制模式(最大 50Hz)
     * </pre>
     *
     * <code>GIMBAL_CONTROL_MODE = 296;</code>
     */
    GIMBAL_CONTROL_MODE(296),
    /**
     * <pre>
     * 飞行异常信息(最大 50Hz)
     * </pre>
     *
     * <code>FLIGHT_ANOMALY = 297;</code>
     */
    FLIGHT_ANOMALY(297),
    /**
     * <pre>
     * 笛卡尔坐标位置(200Hz)
     * </pre>
     *
     * <code>POSITION_VO = 298;</code>
     */
    POSITION_VO(298),
    /**
     * <pre>
     * 避障数据(最大 100Hz)
     * </pre>
     *
     * <code>AVOID_DATA = 299;</code>
     */
    AVOID_DATA(299),
    /**
     * <pre>
     * 返航点设置状态(最大 50Hz)
     * </pre>
     *
     * <code>HOME_POINT_SET_STATUS = 300;</code>
     */
    HOME_POINT_SET_STATUS(300),
    /**
     * <pre>
     * 返航点信息(最大 50Hz)
     * </pre>
     *
     * <code>HOME_POINT_INFO = 301;</code>
     */
    HOME_POINT_INFO(301),
    /**
     * <pre>
     * 三云台信息,适用M300 RTK与M350 RTK上下三个云台的信息(最大 50Hz)
     * </pre>
     *
     * <code>THREE_GIMBAL_DATA = 302;</code>
     */
    THREE_GIMBAL_DATA(302),
    /**
     * <pre>
     * 1号电池信息(最大 50Hz)
     * </pre>
     *
     * <code>BATTERY_SINGLE_INFO_INDEX1 = 303;</code>
     */
    BATTERY_SINGLE_INFO_INDEX1(303),
    /**
     * <pre>
     * 2号电池信息(最大 50Hz)
     * </pre>
     *
     * <code>BATTERY_SINGLE_INFO_INDEX2 = 304;</code>
     */
    BATTERY_SINGLE_INFO_INDEX2(304),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * 未知
     * </pre>
     *
     * <code>SUBSCRIPTION_TOPIC_UNKNOWN = 0;</code>
     */
    public static final int SUBSCRIPTION_TOPIC_UNKNOWN_VALUE = 0;
    /**
     * <pre>
     * 姿态四元数(最大 200Hz)
     * </pre>
     *
     * <code>QUATERNION = 256;</code>
     */
    public static final int QUATERNION_VALUE = 256;
    /**
     * <pre>
     * 相对地面加速度(最大 200Hz)
     * </pre>
     *
     * <code>ACCELERATION_GROUND = 258;</code>
     */
    public static final int ACCELERATION_GROUND_VALUE = 258;
    /**
     * <pre>
     * 相对机体加速度(最大 200Hz)
     * </pre>
     *
     * <code>ACCELERATION_BODY = 259;</code>
     */
    public static final int ACCELERATION_BODY_VALUE = 259;
    /**
     * <pre>
     * 原始加速度(最大 400Hz)
     * </pre>
     *
     * <code>ACCELERATION_RAW = 260;</code>
     */
    public static final int ACCELERATION_RAW_VALUE = 260;
    /**
     * <pre>
     * 速度(最大 200Hz)
     * </pre>
     *
     * <code>VELOCITY = 261;</code>
     */
    public static final int VELOCITY_VALUE = 261;
    /**
     * <pre>
     * 融合角速度(最大 200Hz)
     * </pre>
     *
     * <code>ANGULAR_RATE_FUSIONED = 262;</code>
     */
    public static final int ANGULAR_RATE_FUSIONED_VALUE = 262;
    /**
     * <pre>
     * 原始角速度(最大 400Hz)
     * </pre>
     *
     * <code>ANGULAR_RATE_RAW = 263;</code>
     */
    public static final int ANGULAR_RATE_RAW_VALUE = 263;
    /**
     * <pre>
     * 融合高度(最大 200Hz)
     * </pre>
     *
     * <code>ALTITUDE_FUSED = 264;</code>
     */
    public static final int ALTITUDE_FUSED_VALUE = 264;
    /**
     * <pre>
     * 气压计高度(最大 200Hz)
     * </pre>
     *
     * <code>ALTITUDE_BAROMETER = 265;</code>
     */
    public static final int ALTITUDE_BAROMETER_VALUE = 265;
    /**
     * <pre>
     * Home 点高度(最大 1Hz)
     * </pre>
     *
     * <code>ALTITUDE_OF_HOMEPOINT = 266;</code>
     */
    public static final int ALTITUDE_OF_HOMEPOINT_VALUE = 266;
    /**
     * <pre>
     * 融合相对地面高度(最大 100Hz)
     * </pre>
     *
     * <code>HEIGHT_FUSION = 267;</code>
     */
    public static final int HEIGHT_FUSION_VALUE = 267;
    /**
     * <pre>
     * 相对地面高度(最大 200Hz)
     * </pre>
     *
     * <code>HEIGHT_RELATIVE = 268;</code>
     */
    public static final int HEIGHT_RELATIVE_VALUE = 268;
    /**
     * <pre>
     * 融合位置坐标(最大 200Hz)
     * </pre>
     *
     * <code>POSITION_FUSED = 269;</code>
     */
    public static final int POSITION_FUSED_VALUE = 269;
    /**
     * <pre>
     * GPS 日期,年月日(最大 5Hz)
     * </pre>
     *
     * <code>GPS_DATE = 270;</code>
     */
    public static final int GPS_DATE_VALUE = 270;
    /**
     * <pre>
     * GPS 时间,时分秒(最大 5Hz)
     * </pre>
     *
     * <code>GPS_TIME = 271;</code>
     */
    public static final int GPS_TIME_VALUE = 271;
    /**
     * <pre>
     * GPS 位置(最大 5Hz)
     * </pre>
     *
     * <code>GPS_POSITION = 272;</code>
     */
    public static final int GPS_POSITION_VALUE = 272;
    /**
     * <pre>
     * GPS 速度(最大 5Hz)
     * </pre>
     *
     * <code>GPS_VELOCITY = 273;</code>
     */
    public static final int GPS_VELOCITY_VALUE = 273;
    /**
     * <pre>
     * GPS 信息(最大 5Hz)
     * </pre>
     *
     * <code>GPS_DETAILS = 274;</code>
     */
    public static final int GPS_DETAILS_VALUE = 274;
    /**
     * <pre>
     * GPS 信号强度(最大 50Hz)
     * </pre>
     *
     * <code>GPS_SIGNAL_LEVEL = 275;</code>
     */
    public static final int GPS_SIGNAL_LEVEL_VALUE = 275;
    /**
     * <pre>
     * RTK 位置(最大 5Hz)
     * </pre>
     *
     * <code>RTK_POSITION = 276;</code>
     */
    public static final int RTK_POSITION_VALUE = 276;
    /**
     * <pre>
     * RTK 速度(最大 5Hz)
     * </pre>
     *
     * <code>RTK_VELOCITY = 277;</code>
     */
    public static final int RTK_VELOCITY_VALUE = 277;
    /**
     * <pre>
     * RTK 航向角(最大 5Hz)
     * </pre>
     *
     * <code>RTK_YAW = 278;</code>
     */
    public static final int RTK_YAW_VALUE = 278;
    /**
     * <pre>
     * RTK 位置信息(最大 5Hz)
     * </pre>
     *
     * <code>RTK_POSITION_INFO = 279;</code>
     */
    public static final int RTK_POSITION_INFO_VALUE = 279;
    /**
     * <pre>
     * RTK 航向信息(最大 5Hz)
     * </pre>
     *
     * <code>RTK_YAW_INFO = 280;</code>
     */
    public static final int RTK_YAW_INFO_VALUE = 280;
    /**
     * <pre>
     * 指南针信息(最大 100Hz)
     * </pre>
     *
     * <code>COMPASS = 281;</code>
     */
    public static final int COMPASS_VALUE = 281;
    /**
     * <pre>
     * 遥控摇杆信息(最大 50Hz)
     * </pre>
     *
     * <code>RC = 282;</code>
     */
    public static final int RC_VALUE = 282;
    /**
     * <pre>
     * 云台角度(最大 50Hz)
     * </pre>
     *
     * <code>GIMBAL_ANGLES = 283;</code>
     */
    public static final int GIMBAL_ANGLES_VALUE = 283;
    /**
     * <pre>
     * 云台状态(最大 50Hz)
     * </pre>
     *
     * <code>GIMBAL_STATUS = 284;</code>
     */
    public static final int GIMBAL_STATUS_VALUE = 284;
    /**
     * <pre>
     * 飞行状态(最大 50Hz)
     * </pre>
     *
     * <code>STATUS_FLIGHT = 285;</code>
     */
    public static final int STATUS_FLIGHT_VALUE = 285;
    /**
     * <pre>
     * 飞行模式状态(最大 50Hz)
     * </pre>
     *
     * <code>STATUS_DISPLAYMODE = 286;</code>
     */
    public static final int STATUS_DISPLAYMODE_VALUE = 286;
    /**
     * <pre>
     * 起落架状态(最大 50Hz)
     * </pre>
     *
     * <code>STATUS_LANDINGGEAR = 287;</code>
     */
    public static final int STATUS_LANDINGGEAR_VALUE = 287;
    /**
     * <pre>
     * 电机启动错误码(最大 50Hz)
     * </pre>
     *
     * <code>STATUS_MOTOR_START_ERROR = 288;</code>
     */
    public static final int STATUS_MOTOR_START_ERROR_VALUE = 288;
    /**
     * <pre>
     * 电池信息(最大 50Hz)
     * </pre>
     *
     * <code>BATTERY_INFO = 289;</code>
     */
    public static final int BATTERY_INFO_VALUE = 289;
    /**
     * <pre>
     * 设备控制信息(最大 50Hz)
     * </pre>
     *
     * <code>CONTROL_DEVICE = 290;</code>
     */
    public static final int CONTROL_DEVICE_VALUE = 290;
    /**
     * <pre>
     * 硬件时钟同步(400Hz)
     * </pre>
     *
     * <code>HARD_SYNC = 291;</code>
     */
    public static final int HARD_SYNC_VALUE = 291;
    /**
     * <pre>
     * GPS 控制等级(最大 50Hz)
     * </pre>
     *
     * <code>GPS_CONTROL_LEVEL = 292;</code>
     */
    public static final int GPS_CONTROL_LEVEL_VALUE = 292;
    /**
     * <pre>
     * 带标记遥控遥感信息(最大 50Hz)
     * </pre>
     *
     * <code>RC_WITH_FLAG_DATA = 293;</code>
     */
    public static final int RC_WITH_FLAG_DATA_VALUE = 293;
    /**
     * <pre>
     * 电调数据(最大 50Hz)
     * </pre>
     *
     * <code>ESC_DATA = 294;</code>
     */
    public static final int ESC_DATA_VALUE = 294;
    /**
     * <pre>
     * RTK 连接状态(最大 50Hz)
     * </pre>
     *
     * <code>RTK_CONNECT_STATUS = 295;</code>
     */
    public static final int RTK_CONNECT_STATUS_VALUE = 295;
    /**
     * <pre>
     * 云台控制模式(最大 50Hz)
     * </pre>
     *
     * <code>GIMBAL_CONTROL_MODE = 296;</code>
     */
    public static final int GIMBAL_CONTROL_MODE_VALUE = 296;
    /**
     * <pre>
     * 飞行异常信息(最大 50Hz)
     * </pre>
     *
     * <code>FLIGHT_ANOMALY = 297;</code>
     */
    public static final int FLIGHT_ANOMALY_VALUE = 297;
    /**
     * <pre>
     * 笛卡尔坐标位置(200Hz)
     * </pre>
     *
     * <code>POSITION_VO = 298;</code>
     */
    public static final int POSITION_VO_VALUE = 298;
    /**
     * <pre>
     * 避障数据(最大 100Hz)
     * </pre>
     *
     * <code>AVOID_DATA = 299;</code>
     */
    public static final int AVOID_DATA_VALUE = 299;
    /**
     * <pre>
     * 返航点设置状态(最大 50Hz)
     * </pre>
     *
     * <code>HOME_POINT_SET_STATUS = 300;</code>
     */
    public static final int HOME_POINT_SET_STATUS_VALUE = 300;
    /**
     * <pre>
     * 返航点信息(最大 50Hz)
     * </pre>
     *
     * <code>HOME_POINT_INFO = 301;</code>
     */
    public static final int HOME_POINT_INFO_VALUE = 301;
    /**
     * <pre>
     * 三云台信息,适用M300 RTK与M350 RTK上下三个云台的信息(最大 50Hz)
     * </pre>
     *
     * <code>THREE_GIMBAL_DATA = 302;</code>
     */
    public static final int THREE_GIMBAL_DATA_VALUE = 302;
    /**
     * <pre>
     * 1号电池信息(最大 50Hz)
     * </pre>
     *
     * <code>BATTERY_SINGLE_INFO_INDEX1 = 303;</code>
     */
    public static final int BATTERY_SINGLE_INFO_INDEX1_VALUE = 303;
    /**
     * <pre>
     * 2号电池信息(最大 50Hz)
     * </pre>
     *
     * <code>BATTERY_SINGLE_INFO_INDEX2 = 304;</code>
     */
    public static final int BATTERY_SINGLE_INFO_INDEX2_VALUE = 304;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static FcSubscriptionTopicEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static FcSubscriptionTopicEnum forNumber(int value) {
      switch (value) {
        case 0: return SUBSCRIPTION_TOPIC_UNKNOWN;
        case 256: return QUATERNION;
        case 258: return ACCELERATION_GROUND;
        case 259: return ACCELERATION_BODY;
        case 260: return ACCELERATION_RAW;
        case 261: return VELOCITY;
        case 262: return ANGULAR_RATE_FUSIONED;
        case 263: return ANGULAR_RATE_RAW;
        case 264: return ALTITUDE_FUSED;
        case 265: return ALTITUDE_BAROMETER;
        case 266: return ALTITUDE_OF_HOMEPOINT;
        case 267: return HEIGHT_FUSION;
        case 268: return HEIGHT_RELATIVE;
        case 269: return POSITION_FUSED;
        case 270: return GPS_DATE;
        case 271: return GPS_TIME;
        case 272: return GPS_POSITION;
        case 273: return GPS_VELOCITY;
        case 274: return GPS_DETAILS;
        case 275: return GPS_SIGNAL_LEVEL;
        case 276: return RTK_POSITION;
        case 277: return RTK_VELOCITY;
        case 278: return RTK_YAW;
        case 279: return RTK_POSITION_INFO;
        case 280: return RTK_YAW_INFO;
        case 281: return COMPASS;
        case 282: return RC;
        case 283: return GIMBAL_ANGLES;
        case 284: return GIMBAL_STATUS;
        case 285: return STATUS_FLIGHT;
        case 286: return STATUS_DISPLAYMODE;
        case 287: return STATUS_LANDINGGEAR;
        case 288: return STATUS_MOTOR_START_ERROR;
        case 289: return BATTERY_INFO;
        case 290: return CONTROL_DEVICE;
        case 291: return HARD_SYNC;
        case 292: return GPS_CONTROL_LEVEL;
        case 293: return RC_WITH_FLAG_DATA;
        case 294: return ESC_DATA;
        case 295: return RTK_CONNECT_STATUS;
        case 296: return GIMBAL_CONTROL_MODE;
        case 297: return FLIGHT_ANOMALY;
        case 298: return POSITION_VO;
        case 299: return AVOID_DATA;
        case 300: return HOME_POINT_SET_STATUS;
        case 301: return HOME_POINT_INFO;
        case 302: return THREE_GIMBAL_DATA;
        case 303: return BATTERY_SINGLE_INFO_INDEX1;
        case 304: return BATTERY_SINGLE_INFO_INDEX2;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FcSubscriptionTopicEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        FcSubscriptionTopicEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FcSubscriptionTopicEnum>() {
            public FcSubscriptionTopicEnum findValueByNumber(int number) {
              return FcSubscriptionTopicEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MdsdProtoBuf.getDescriptor().getEnumTypes().get(1);
    }

    private static final FcSubscriptionTopicEnum[] VALUES = values();

    public static FcSubscriptionTopicEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private FcSubscriptionTopicEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:FcSubscriptionTopicEnum)
  }

  /**
   * <pre>
   * 数据订阅频率 - 枚举
   * </pre>
   *
   * Protobuf enum {@code SubscriptionFreqEnum}
   */
  public enum SubscriptionFreqEnum
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>HZ_0 = 0;</code>
     */
    HZ_0(0),
    /**
     * <code>HZ_1 = 1;</code>
     */
    HZ_1(1),
    /**
     * <code>HZ_5 = 5;</code>
     */
    HZ_5(5),
    /**
     * <code>HZ_10 = 10;</code>
     */
    HZ_10(10),
    /**
     * <code>HZ_50 = 50;</code>
     */
    HZ_50(50),
    /**
     * <code>HZ_100 = 100;</code>
     */
    HZ_100(100),
    /**
     * <code>HZ_200 = 200;</code>
     */
    HZ_200(200),
    /**
     * <code>HZ_400 = 400;</code>
     */
    HZ_400(400),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>HZ_0 = 0;</code>
     */
    public static final int HZ_0_VALUE = 0;
    /**
     * <code>HZ_1 = 1;</code>
     */
    public static final int HZ_1_VALUE = 1;
    /**
     * <code>HZ_5 = 5;</code>
     */
    public static final int HZ_5_VALUE = 5;
    /**
     * <code>HZ_10 = 10;</code>
     */
    public static final int HZ_10_VALUE = 10;
    /**
     * <code>HZ_50 = 50;</code>
     */
    public static final int HZ_50_VALUE = 50;
    /**
     * <code>HZ_100 = 100;</code>
     */
    public static final int HZ_100_VALUE = 100;
    /**
     * <code>HZ_200 = 200;</code>
     */
    public static final int HZ_200_VALUE = 200;
    /**
     * <code>HZ_400 = 400;</code>
     */
    public static final int HZ_400_VALUE = 400;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static SubscriptionFreqEnum valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SubscriptionFreqEnum forNumber(int value) {
      switch (value) {
        case 0: return HZ_0;
        case 1: return HZ_1;
        case 5: return HZ_5;
        case 10: return HZ_10;
        case 50: return HZ_50;
        case 100: return HZ_100;
        case 200: return HZ_200;
        case 400: return HZ_400;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SubscriptionFreqEnum>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SubscriptionFreqEnum> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SubscriptionFreqEnum>() {
            public SubscriptionFreqEnum findValueByNumber(int number) {
              return SubscriptionFreqEnum.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return MdsdProtoBuf.getDescriptor().getEnumTypes().get(2);
    }

    private static final SubscriptionFreqEnum[] VALUES = values();

    public static SubscriptionFreqEnum valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SubscriptionFreqEnum(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SubscriptionFreqEnum)
  }

  public interface PayloadOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Payload)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 硬件编码
     * </pre>
     *
     * <code>string hardwareCode = 1;</code>
     * @return The hardwareCode.
     */
    String getHardwareCode();
    /**
     * <pre>
     * 硬件编码
     * </pre>
     *
     * <code>string hardwareCode = 1;</code>
     * @return The bytes for hardwareCode.
     */
    com.google.protobuf.ByteString
        getHardwareCodeBytes();

    /**
     * <pre>
     * 指令编号
     * </pre>
     *
     * <code>.CommandEnum command = 2;</code>
     * @return The enum numeric value on the wire for command.
     */
    int getCommandValue();
    /**
     * <pre>
     * 指令编号
     * </pre>
     *
     * <code>.CommandEnum command = 2;</code>
     * @return The command.
     */
    CommandEnum getCommand();

    /**
     * <pre>
     * 动作编码
     * </pre>
     *
     * <code>int32 action = 3;</code>
     * @return The action.
     */
    int getAction();

    /**
     * <pre>
     * 数据
     * </pre>
     *
     * <code>bytes body = 4;</code>
     * @return The body.
     */
    com.google.protobuf.ByteString getBody();
  }
  /**
   * <pre>
   * 云盒编号(33字节) | 指令编号(1字节) | 动作编号(1字节) |  | 数据(N字节)
   * </pre>
   *
   * Protobuf type {@code Payload}
   */
  public static final class Payload extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Payload)
      PayloadOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Payload.newBuilder() to construct.
    private Payload(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Payload() {
      hardwareCode_ = "";
      command_ = 0;
      body_ = com.google.protobuf.ByteString.EMPTY;
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new Payload();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Payload(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              String s = input.readStringRequireUtf8();

              hardwareCode_ = s;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              command_ = rawValue;
              break;
            }
            case 24: {

              action_ = input.readInt32();
              break;
            }
            case 34: {

              body_ = input.readBytes();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MdsdProtoBuf.internal_static_Payload_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MdsdProtoBuf.internal_static_Payload_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Payload.class, Builder.class);
    }

    public static final int HARDWARECODE_FIELD_NUMBER = 1;
    private volatile Object hardwareCode_;
    /**
     * <pre>
     * 硬件编码
     * </pre>
     *
     * <code>string hardwareCode = 1;</code>
     * @return The hardwareCode.
     */
    @Override
    public String getHardwareCode() {
      Object ref = hardwareCode_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        hardwareCode_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * 硬件编码
     * </pre>
     *
     * <code>string hardwareCode = 1;</code>
     * @return The bytes for hardwareCode.
     */
    @Override
    public com.google.protobuf.ByteString
        getHardwareCodeBytes() {
      Object ref = hardwareCode_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        hardwareCode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int COMMAND_FIELD_NUMBER = 2;
    private int command_;
    /**
     * <pre>
     * 指令编号
     * </pre>
     *
     * <code>.CommandEnum command = 2;</code>
     * @return The enum numeric value on the wire for command.
     */
    @Override public int getCommandValue() {
      return command_;
    }
    /**
     * <pre>
     * 指令编号
     * </pre>
     *
     * <code>.CommandEnum command = 2;</code>
     * @return The command.
     */
    @Override public CommandEnum getCommand() {
      @SuppressWarnings("deprecation")
      CommandEnum result = CommandEnum.valueOf(command_);
      return result == null ? CommandEnum.UNRECOGNIZED : result;
    }

    public static final int ACTION_FIELD_NUMBER = 3;
    private int action_;
    /**
     * <pre>
     * 动作编码
     * </pre>
     *
     * <code>int32 action = 3;</code>
     * @return The action.
     */
    @Override
    public int getAction() {
      return action_;
    }

    public static final int BODY_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString body_;
    /**
     * <pre>
     * 数据
     * </pre>
     *
     * <code>bytes body = 4;</code>
     * @return The body.
     */
    @Override
    public com.google.protobuf.ByteString getBody() {
      return body_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getHardwareCodeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, hardwareCode_);
      }
      if (command_ != CommandEnum.LOGGER.getNumber()) {
        output.writeEnum(2, command_);
      }
      if (action_ != 0) {
        output.writeInt32(3, action_);
      }
      if (!body_.isEmpty()) {
        output.writeBytes(4, body_);
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getHardwareCodeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, hardwareCode_);
      }
      if (command_ != CommandEnum.LOGGER.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, command_);
      }
      if (action_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, action_);
      }
      if (!body_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, body_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Payload)) {
        return super.equals(obj);
      }
      Payload other = (Payload) obj;

      if (!getHardwareCode()
          .equals(other.getHardwareCode())) return false;
      if (command_ != other.command_) return false;
      if (getAction()
          != other.getAction()) return false;
      if (!getBody()
          .equals(other.getBody())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + HARDWARECODE_FIELD_NUMBER;
      hash = (53 * hash) + getHardwareCode().hashCode();
      hash = (37 * hash) + COMMAND_FIELD_NUMBER;
      hash = (53 * hash) + command_;
      hash = (37 * hash) + ACTION_FIELD_NUMBER;
      hash = (53 * hash) + getAction();
      hash = (37 * hash) + BODY_FIELD_NUMBER;
      hash = (53 * hash) + getBody().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Payload parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Payload parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Payload parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Payload parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Payload parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Payload parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Payload parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Payload parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Payload parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Payload parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Payload parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Payload parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Payload prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * 云盒编号(33字节) | 指令编号(1字节) | 动作编号(1字节) |  | 数据(N字节)
     * </pre>
     *
     * Protobuf type {@code Payload}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Payload)
        PayloadOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MdsdProtoBuf.internal_static_Payload_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MdsdProtoBuf.internal_static_Payload_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Payload.class, Builder.class);
      }

      // Construct using MdsdProtoBuf.Payload.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        hardwareCode_ = "";

        command_ = 0;

        action_ = 0;

        body_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MdsdProtoBuf.internal_static_Payload_descriptor;
      }

      @Override
      public Payload getDefaultInstanceForType() {
        return Payload.getDefaultInstance();
      }

      @Override
      public Payload build() {
        Payload result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Payload buildPartial() {
        Payload result = new Payload(this);
        result.hardwareCode_ = hardwareCode_;
        result.command_ = command_;
        result.action_ = action_;
        result.body_ = body_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Payload) {
          return mergeFrom((Payload)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Payload other) {
        if (other == Payload.getDefaultInstance()) return this;
        if (!other.getHardwareCode().isEmpty()) {
          hardwareCode_ = other.hardwareCode_;
          onChanged();
        }
        if (other.command_ != 0) {
          setCommandValue(other.getCommandValue());
        }
        if (other.getAction() != 0) {
          setAction(other.getAction());
        }
        if (other.getBody() != com.google.protobuf.ByteString.EMPTY) {
          setBody(other.getBody());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Payload parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Payload) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private Object hardwareCode_ = "";
      /**
       * <pre>
       * 硬件编码
       * </pre>
       *
       * <code>string hardwareCode = 1;</code>
       * @return The hardwareCode.
       */
      public String getHardwareCode() {
        Object ref = hardwareCode_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          hardwareCode_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * 硬件编码
       * </pre>
       *
       * <code>string hardwareCode = 1;</code>
       * @return The bytes for hardwareCode.
       */
      public com.google.protobuf.ByteString
          getHardwareCodeBytes() {
        Object ref = hardwareCode_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          hardwareCode_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * 硬件编码
       * </pre>
       *
       * <code>string hardwareCode = 1;</code>
       * @param value The hardwareCode to set.
       * @return This builder for chaining.
       */
      public Builder setHardwareCode(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        hardwareCode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 硬件编码
       * </pre>
       *
       * <code>string hardwareCode = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearHardwareCode() {
        
        hardwareCode_ = getDefaultInstance().getHardwareCode();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 硬件编码
       * </pre>
       *
       * <code>string hardwareCode = 1;</code>
       * @param value The bytes for hardwareCode to set.
       * @return This builder for chaining.
       */
      public Builder setHardwareCodeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        hardwareCode_ = value;
        onChanged();
        return this;
      }

      private int command_ = 0;
      /**
       * <pre>
       * 指令编号
       * </pre>
       *
       * <code>.CommandEnum command = 2;</code>
       * @return The enum numeric value on the wire for command.
       */
      @Override public int getCommandValue() {
        return command_;
      }
      /**
       * <pre>
       * 指令编号
       * </pre>
       *
       * <code>.CommandEnum command = 2;</code>
       * @param value The enum numeric value on the wire for command to set.
       * @return This builder for chaining.
       */
      public Builder setCommandValue(int value) {
        
        command_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 指令编号
       * </pre>
       *
       * <code>.CommandEnum command = 2;</code>
       * @return The command.
       */
      @Override
      public CommandEnum getCommand() {
        @SuppressWarnings("deprecation")
        CommandEnum result = CommandEnum.valueOf(command_);
        return result == null ? CommandEnum.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * 指令编号
       * </pre>
       *
       * <code>.CommandEnum command = 2;</code>
       * @param value The command to set.
       * @return This builder for chaining.
       */
      public Builder setCommand(CommandEnum value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        command_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 指令编号
       * </pre>
       *
       * <code>.CommandEnum command = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCommand() {
        
        command_ = 0;
        onChanged();
        return this;
      }

      private int action_ ;
      /**
       * <pre>
       * 动作编码
       * </pre>
       *
       * <code>int32 action = 3;</code>
       * @return The action.
       */
      @Override
      public int getAction() {
        return action_;
      }
      /**
       * <pre>
       * 动作编码
       * </pre>
       *
       * <code>int32 action = 3;</code>
       * @param value The action to set.
       * @return This builder for chaining.
       */
      public Builder setAction(int value) {
        
        action_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 动作编码
       * </pre>
       *
       * <code>int32 action = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearAction() {
        
        action_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString body_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * 数据
       * </pre>
       *
       * <code>bytes body = 4;</code>
       * @return The body.
       */
      @Override
      public com.google.protobuf.ByteString getBody() {
        return body_;
      }
      /**
       * <pre>
       * 数据
       * </pre>
       *
       * <code>bytes body = 4;</code>
       * @param value The body to set.
       * @return This builder for chaining.
       */
      public Builder setBody(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        body_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 数据
       * </pre>
       *
       * <code>bytes body = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearBody() {
        
        body_ = getDefaultInstance().getBody();
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Payload)
    }

    // @@protoc_insertion_point(class_scope:Payload)
    private static final Payload DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Payload();
    }

    public static Payload getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Payload>
        PARSER = new com.google.protobuf.AbstractParser<Payload>() {
      @Override
      public Payload parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Payload(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Payload> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Payload> getParserForType() {
      return PARSER;
    }

    @Override
    public Payload getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SubscriptionTopicOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SubscriptionTopic)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 订阅主题
     * </pre>
     *
     * <code>.FcSubscriptionTopicEnum topic = 1;</code>
     * @return The enum numeric value on the wire for topic.
     */
    int getTopicValue();
    /**
     * <pre>
     * 订阅主题
     * </pre>
     *
     * <code>.FcSubscriptionTopicEnum topic = 1;</code>
     * @return The topic.
     */
    FcSubscriptionTopicEnum getTopic();

    /**
     * <pre>
     * 订阅频率
     * </pre>
     *
     * <code>.SubscriptionFreqEnum frequency = 2;</code>
     * @return The enum numeric value on the wire for frequency.
     */
    int getFrequencyValue();
    /**
     * <pre>
     * 订阅频率
     * </pre>
     *
     * <code>.SubscriptionFreqEnum frequency = 2;</code>
     * @return The frequency.
     */
    SubscriptionFreqEnum getFrequency();

    /**
     * <pre>
     * 详情数据
     * </pre>
     *
     * <code>map&lt;string, string&gt; details = 3;</code>
     */
    int getDetailsCount();
    /**
     * <pre>
     * 详情数据
     * </pre>
     *
     * <code>map&lt;string, string&gt; details = 3;</code>
     */
    boolean containsDetails(
        String key);
    /**
     * Use {@link #getDetailsMap()} instead.
     */
    @Deprecated
    java.util.Map<String, String>
    getDetails();
    /**
     * <pre>
     * 详情数据
     * </pre>
     *
     * <code>map&lt;string, string&gt; details = 3;</code>
     */
    java.util.Map<String, String>
    getDetailsMap();
    /**
     * <pre>
     * 详情数据
     * </pre>
     *
     * <code>map&lt;string, string&gt; details = 3;</code>
     */

    String getDetailsOrDefault(
        String key,
        String defaultValue);
    /**
     * <pre>
     * 详情数据
     * </pre>
     *
     * <code>map&lt;string, string&gt; details = 3;</code>
     */

    String getDetailsOrThrow(
        String key);

    /**
     * <pre>
     * 推送订阅数据频率, 单位: 毫秒
     * </pre>
     *
     * <code>int32 pushFrequency = 4;</code>
     * @return The pushFrequency.
     */
    int getPushFrequency();
  }
  /**
   * Protobuf type {@code SubscriptionTopic}
   */
  public static final class SubscriptionTopic extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SubscriptionTopic)
      SubscriptionTopicOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SubscriptionTopic.newBuilder() to construct.
    private SubscriptionTopic(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SubscriptionTopic() {
      topic_ = 0;
      frequency_ = 0;
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new SubscriptionTopic();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SubscriptionTopic(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              topic_ = rawValue;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              frequency_ = rawValue;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                details_ = com.google.protobuf.MapField.newMapField(
                    DetailsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<String, String>
              details__ = input.readMessage(
                  DetailsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              details_.getMutableMap().put(
                  details__.getKey(), details__.getValue());
              break;
            }
            case 32: {

              pushFrequency_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MdsdProtoBuf.internal_static_SubscriptionTopic_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetDetails();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MdsdProtoBuf.internal_static_SubscriptionTopic_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SubscriptionTopic.class, Builder.class);
    }

    public static final int TOPIC_FIELD_NUMBER = 1;
    private int topic_;
    /**
     * <pre>
     * 订阅主题
     * </pre>
     *
     * <code>.FcSubscriptionTopicEnum topic = 1;</code>
     * @return The enum numeric value on the wire for topic.
     */
    @Override public int getTopicValue() {
      return topic_;
    }
    /**
     * <pre>
     * 订阅主题
     * </pre>
     *
     * <code>.FcSubscriptionTopicEnum topic = 1;</code>
     * @return The topic.
     */
    @Override public FcSubscriptionTopicEnum getTopic() {
      @SuppressWarnings("deprecation")
      FcSubscriptionTopicEnum result = FcSubscriptionTopicEnum.valueOf(topic_);
      return result == null ? FcSubscriptionTopicEnum.UNRECOGNIZED : result;
    }

    public static final int FREQUENCY_FIELD_NUMBER = 2;
    private int frequency_;
    /**
     * <pre>
     * 订阅频率
     * </pre>
     *
     * <code>.SubscriptionFreqEnum frequency = 2;</code>
     * @return The enum numeric value on the wire for frequency.
     */
    @Override public int getFrequencyValue() {
      return frequency_;
    }
    /**
     * <pre>
     * 订阅频率
     * </pre>
     *
     * <code>.SubscriptionFreqEnum frequency = 2;</code>
     * @return The frequency.
     */
    @Override public SubscriptionFreqEnum getFrequency() {
      @SuppressWarnings("deprecation")
      SubscriptionFreqEnum result = SubscriptionFreqEnum.valueOf(frequency_);
      return result == null ? SubscriptionFreqEnum.UNRECOGNIZED : result;
    }

    public static final int DETAILS_FIELD_NUMBER = 3;
    private static final class DetailsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          String, String> defaultEntry =
              com.google.protobuf.MapEntry
              .<String, String>newDefaultInstance(
                  MdsdProtoBuf.internal_static_SubscriptionTopic_DetailsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        String, String> details_;
    private com.google.protobuf.MapField<String, String>
    internalGetDetails() {
      if (details_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            DetailsDefaultEntryHolder.defaultEntry);
      }
      return details_;
    }

    public int getDetailsCount() {
      return internalGetDetails().getMap().size();
    }
    /**
     * <pre>
     * 详情数据
     * </pre>
     *
     * <code>map&lt;string, string&gt; details = 3;</code>
     */

    @Override
    public boolean containsDetails(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      return internalGetDetails().getMap().containsKey(key);
    }
    /**
     * Use {@link #getDetailsMap()} instead.
     */
    @Override
    @Deprecated
    public java.util.Map<String, String> getDetails() {
      return getDetailsMap();
    }
    /**
     * <pre>
     * 详情数据
     * </pre>
     *
     * <code>map&lt;string, string&gt; details = 3;</code>
     */
    @Override

    public java.util.Map<String, String> getDetailsMap() {
      return internalGetDetails().getMap();
    }
    /**
     * <pre>
     * 详情数据
     * </pre>
     *
     * <code>map&lt;string, string&gt; details = 3;</code>
     */
    @Override

    public String getDetailsOrDefault(
        String key,
        String defaultValue) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, String> map =
          internalGetDetails().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * 详情数据
     * </pre>
     *
     * <code>map&lt;string, string&gt; details = 3;</code>
     */
    @Override

    public String getDetailsOrThrow(
        String key) {
      if (key == null) { throw new NullPointerException(); }
      java.util.Map<String, String> map =
          internalGetDetails().getMap();
      if (!map.containsKey(key)) {
        throw new IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int PUSHFREQUENCY_FIELD_NUMBER = 4;
    private int pushFrequency_;
    /**
     * <pre>
     * 推送订阅数据频率, 单位: 毫秒
     * </pre>
     *
     * <code>int32 pushFrequency = 4;</code>
     * @return The pushFrequency.
     */
    @Override
    public int getPushFrequency() {
      return pushFrequency_;
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (topic_ != FcSubscriptionTopicEnum.SUBSCRIPTION_TOPIC_UNKNOWN.getNumber()) {
        output.writeEnum(1, topic_);
      }
      if (frequency_ != SubscriptionFreqEnum.HZ_0.getNumber()) {
        output.writeEnum(2, frequency_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetDetails(),
          DetailsDefaultEntryHolder.defaultEntry,
          3);
      if (pushFrequency_ != 0) {
        output.writeInt32(4, pushFrequency_);
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (topic_ != FcSubscriptionTopicEnum.SUBSCRIPTION_TOPIC_UNKNOWN.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, topic_);
      }
      if (frequency_ != SubscriptionFreqEnum.HZ_0.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, frequency_);
      }
      for (java.util.Map.Entry<String, String> entry
           : internalGetDetails().getMap().entrySet()) {
        com.google.protobuf.MapEntry<String, String>
        details__ = DetailsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, details__);
      }
      if (pushFrequency_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, pushFrequency_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SubscriptionTopic)) {
        return super.equals(obj);
      }
      SubscriptionTopic other = (SubscriptionTopic) obj;

      if (topic_ != other.topic_) return false;
      if (frequency_ != other.frequency_) return false;
      if (!internalGetDetails().equals(
          other.internalGetDetails())) return false;
      if (getPushFrequency()
          != other.getPushFrequency()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TOPIC_FIELD_NUMBER;
      hash = (53 * hash) + topic_;
      hash = (37 * hash) + FREQUENCY_FIELD_NUMBER;
      hash = (53 * hash) + frequency_;
      if (!internalGetDetails().getMap().isEmpty()) {
        hash = (37 * hash) + DETAILS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetDetails().hashCode();
      }
      hash = (37 * hash) + PUSHFREQUENCY_FIELD_NUMBER;
      hash = (53 * hash) + getPushFrequency();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SubscriptionTopic parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SubscriptionTopic parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SubscriptionTopic parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SubscriptionTopic parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SubscriptionTopic parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SubscriptionTopic parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SubscriptionTopic parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SubscriptionTopic parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SubscriptionTopic parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SubscriptionTopic parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SubscriptionTopic parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SubscriptionTopic parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SubscriptionTopic prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SubscriptionTopic}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SubscriptionTopic)
        SubscriptionTopicOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MdsdProtoBuf.internal_static_SubscriptionTopic_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 3:
            return internalGetDetails();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 3:
            return internalGetMutableDetails();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MdsdProtoBuf.internal_static_SubscriptionTopic_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SubscriptionTopic.class, Builder.class);
      }

      // Construct using MdsdProtoBuf.SubscriptionTopic.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        topic_ = 0;

        frequency_ = 0;

        internalGetMutableDetails().clear();
        pushFrequency_ = 0;

        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MdsdProtoBuf.internal_static_SubscriptionTopic_descriptor;
      }

      @Override
      public SubscriptionTopic getDefaultInstanceForType() {
        return SubscriptionTopic.getDefaultInstance();
      }

      @Override
      public SubscriptionTopic build() {
        SubscriptionTopic result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public SubscriptionTopic buildPartial() {
        SubscriptionTopic result = new SubscriptionTopic(this);
        int from_bitField0_ = bitField0_;
        result.topic_ = topic_;
        result.frequency_ = frequency_;
        result.details_ = internalGetDetails();
        result.details_.makeImmutable();
        result.pushFrequency_ = pushFrequency_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SubscriptionTopic) {
          return mergeFrom((SubscriptionTopic)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SubscriptionTopic other) {
        if (other == SubscriptionTopic.getDefaultInstance()) return this;
        if (other.topic_ != 0) {
          setTopicValue(other.getTopicValue());
        }
        if (other.frequency_ != 0) {
          setFrequencyValue(other.getFrequencyValue());
        }
        internalGetMutableDetails().mergeFrom(
            other.internalGetDetails());
        if (other.getPushFrequency() != 0) {
          setPushFrequency(other.getPushFrequency());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SubscriptionTopic parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SubscriptionTopic) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int topic_ = 0;
      /**
       * <pre>
       * 订阅主题
       * </pre>
       *
       * <code>.FcSubscriptionTopicEnum topic = 1;</code>
       * @return The enum numeric value on the wire for topic.
       */
      @Override public int getTopicValue() {
        return topic_;
      }
      /**
       * <pre>
       * 订阅主题
       * </pre>
       *
       * <code>.FcSubscriptionTopicEnum topic = 1;</code>
       * @param value The enum numeric value on the wire for topic to set.
       * @return This builder for chaining.
       */
      public Builder setTopicValue(int value) {
        
        topic_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 订阅主题
       * </pre>
       *
       * <code>.FcSubscriptionTopicEnum topic = 1;</code>
       * @return The topic.
       */
      @Override
      public FcSubscriptionTopicEnum getTopic() {
        @SuppressWarnings("deprecation")
        FcSubscriptionTopicEnum result = FcSubscriptionTopicEnum.valueOf(topic_);
        return result == null ? FcSubscriptionTopicEnum.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * 订阅主题
       * </pre>
       *
       * <code>.FcSubscriptionTopicEnum topic = 1;</code>
       * @param value The topic to set.
       * @return This builder for chaining.
       */
      public Builder setTopic(FcSubscriptionTopicEnum value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        topic_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 订阅主题
       * </pre>
       *
       * <code>.FcSubscriptionTopicEnum topic = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTopic() {
        
        topic_ = 0;
        onChanged();
        return this;
      }

      private int frequency_ = 0;
      /**
       * <pre>
       * 订阅频率
       * </pre>
       *
       * <code>.SubscriptionFreqEnum frequency = 2;</code>
       * @return The enum numeric value on the wire for frequency.
       */
      @Override public int getFrequencyValue() {
        return frequency_;
      }
      /**
       * <pre>
       * 订阅频率
       * </pre>
       *
       * <code>.SubscriptionFreqEnum frequency = 2;</code>
       * @param value The enum numeric value on the wire for frequency to set.
       * @return This builder for chaining.
       */
      public Builder setFrequencyValue(int value) {
        
        frequency_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 订阅频率
       * </pre>
       *
       * <code>.SubscriptionFreqEnum frequency = 2;</code>
       * @return The frequency.
       */
      @Override
      public SubscriptionFreqEnum getFrequency() {
        @SuppressWarnings("deprecation")
        SubscriptionFreqEnum result = SubscriptionFreqEnum.valueOf(frequency_);
        return result == null ? SubscriptionFreqEnum.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * 订阅频率
       * </pre>
       *
       * <code>.SubscriptionFreqEnum frequency = 2;</code>
       * @param value The frequency to set.
       * @return This builder for chaining.
       */
      public Builder setFrequency(SubscriptionFreqEnum value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        frequency_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 订阅频率
       * </pre>
       *
       * <code>.SubscriptionFreqEnum frequency = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearFrequency() {
        
        frequency_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          String, String> details_;
      private com.google.protobuf.MapField<String, String>
      internalGetDetails() {
        if (details_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              DetailsDefaultEntryHolder.defaultEntry);
        }
        return details_;
      }
      private com.google.protobuf.MapField<String, String>
      internalGetMutableDetails() {
        onChanged();;
        if (details_ == null) {
          details_ = com.google.protobuf.MapField.newMapField(
              DetailsDefaultEntryHolder.defaultEntry);
        }
        if (!details_.isMutable()) {
          details_ = details_.copy();
        }
        return details_;
      }

      public int getDetailsCount() {
        return internalGetDetails().getMap().size();
      }
      /**
       * <pre>
       * 详情数据
       * </pre>
       *
       * <code>map&lt;string, string&gt; details = 3;</code>
       */

      @Override
      public boolean containsDetails(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        return internalGetDetails().getMap().containsKey(key);
      }
      /**
       * Use {@link #getDetailsMap()} instead.
       */
      @Override
      @Deprecated
      public java.util.Map<String, String> getDetails() {
        return getDetailsMap();
      }
      /**
       * <pre>
       * 详情数据
       * </pre>
       *
       * <code>map&lt;string, string&gt; details = 3;</code>
       */
      @Override

      public java.util.Map<String, String> getDetailsMap() {
        return internalGetDetails().getMap();
      }
      /**
       * <pre>
       * 详情数据
       * </pre>
       *
       * <code>map&lt;string, string&gt; details = 3;</code>
       */
      @Override

      public String getDetailsOrDefault(
          String key,
          String defaultValue) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, String> map =
            internalGetDetails().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * 详情数据
       * </pre>
       *
       * <code>map&lt;string, string&gt; details = 3;</code>
       */
      @Override

      public String getDetailsOrThrow(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        java.util.Map<String, String> map =
            internalGetDetails().getMap();
        if (!map.containsKey(key)) {
          throw new IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearDetails() {
        internalGetMutableDetails().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * 详情数据
       * </pre>
       *
       * <code>map&lt;string, string&gt; details = 3;</code>
       */

      public Builder removeDetails(
          String key) {
        if (key == null) { throw new NullPointerException(); }
        internalGetMutableDetails().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @Deprecated
      public java.util.Map<String, String>
      getMutableDetails() {
        return internalGetMutableDetails().getMutableMap();
      }
      /**
       * <pre>
       * 详情数据
       * </pre>
       *
       * <code>map&lt;string, string&gt; details = 3;</code>
       */
      public Builder putDetails(
          String key,
          String value) {
        if (key == null) { throw new NullPointerException(); }
        if (value == null) { throw new NullPointerException(); }
        internalGetMutableDetails().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * 详情数据
       * </pre>
       *
       * <code>map&lt;string, string&gt; details = 3;</code>
       */

      public Builder putAllDetails(
          java.util.Map<String, String> values) {
        internalGetMutableDetails().getMutableMap()
            .putAll(values);
        return this;
      }

      private int pushFrequency_ ;
      /**
       * <pre>
       * 推送订阅数据频率, 单位: 毫秒
       * </pre>
       *
       * <code>int32 pushFrequency = 4;</code>
       * @return The pushFrequency.
       */
      @Override
      public int getPushFrequency() {
        return pushFrequency_;
      }
      /**
       * <pre>
       * 推送订阅数据频率, 单位: 毫秒
       * </pre>
       *
       * <code>int32 pushFrequency = 4;</code>
       * @param value The pushFrequency to set.
       * @return This builder for chaining.
       */
      public Builder setPushFrequency(int value) {
        
        pushFrequency_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 推送订阅数据频率, 单位: 毫秒
       * </pre>
       *
       * <code>int32 pushFrequency = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearPushFrequency() {
        
        pushFrequency_ = 0;
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SubscriptionTopic)
    }

    // @@protoc_insertion_point(class_scope:SubscriptionTopic)
    private static final SubscriptionTopic DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SubscriptionTopic();
    }

    public static SubscriptionTopic getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SubscriptionTopic>
        PARSER = new com.google.protobuf.AbstractParser<SubscriptionTopic>() {
      @Override
      public SubscriptionTopic parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SubscriptionTopic(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SubscriptionTopic> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<SubscriptionTopic> getParserForType() {
      return PARSER;
    }

    @Override
    public SubscriptionTopic getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SubscriptionDtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SubscriptionDto)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 订阅主题列表
     * </pre>
     *
     * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
     */
    java.util.List<SubscriptionTopic>
        getSubscriptionTopicListList();
    /**
     * <pre>
     * 订阅主题列表
     * </pre>
     *
     * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
     */
    SubscriptionTopic getSubscriptionTopicList(int index);
    /**
     * <pre>
     * 订阅主题列表
     * </pre>
     *
     * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
     */
    int getSubscriptionTopicListCount();
    /**
     * <pre>
     * 订阅主题列表
     * </pre>
     *
     * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
     */
    java.util.List<? extends SubscriptionTopicOrBuilder>
        getSubscriptionTopicListOrBuilderList();
    /**
     * <pre>
     * 订阅主题列表
     * </pre>
     *
     * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
     */
    SubscriptionTopicOrBuilder getSubscriptionTopicListOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code SubscriptionDto}
   */
  public static final class SubscriptionDto extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SubscriptionDto)
      SubscriptionDtoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SubscriptionDto.newBuilder() to construct.
    private SubscriptionDto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SubscriptionDto() {
      subscriptionTopicList_ = java.util.Collections.emptyList();
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new SubscriptionDto();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SubscriptionDto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                subscriptionTopicList_ = new java.util.ArrayList<SubscriptionTopic>();
                mutable_bitField0_ |= 0x00000001;
              }
              subscriptionTopicList_.add(
                  input.readMessage(SubscriptionTopic.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          subscriptionTopicList_ = java.util.Collections.unmodifiableList(subscriptionTopicList_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MdsdProtoBuf.internal_static_SubscriptionDto_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MdsdProtoBuf.internal_static_SubscriptionDto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              SubscriptionDto.class, Builder.class);
    }

    public static final int SUBSCRIPTIONTOPICLIST_FIELD_NUMBER = 1;
    private java.util.List<SubscriptionTopic> subscriptionTopicList_;
    /**
     * <pre>
     * 订阅主题列表
     * </pre>
     *
     * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
     */
    @Override
    public java.util.List<SubscriptionTopic> getSubscriptionTopicListList() {
      return subscriptionTopicList_;
    }
    /**
     * <pre>
     * 订阅主题列表
     * </pre>
     *
     * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
     */
    @Override
    public java.util.List<? extends SubscriptionTopicOrBuilder>
        getSubscriptionTopicListOrBuilderList() {
      return subscriptionTopicList_;
    }
    /**
     * <pre>
     * 订阅主题列表
     * </pre>
     *
     * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
     */
    @Override
    public int getSubscriptionTopicListCount() {
      return subscriptionTopicList_.size();
    }
    /**
     * <pre>
     * 订阅主题列表
     * </pre>
     *
     * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
     */
    @Override
    public SubscriptionTopic getSubscriptionTopicList(int index) {
      return subscriptionTopicList_.get(index);
    }
    /**
     * <pre>
     * 订阅主题列表
     * </pre>
     *
     * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
     */
    @Override
    public SubscriptionTopicOrBuilder getSubscriptionTopicListOrBuilder(
        int index) {
      return subscriptionTopicList_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < subscriptionTopicList_.size(); i++) {
        output.writeMessage(1, subscriptionTopicList_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < subscriptionTopicList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, subscriptionTopicList_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof SubscriptionDto)) {
        return super.equals(obj);
      }
      SubscriptionDto other = (SubscriptionDto) obj;

      if (!getSubscriptionTopicListList()
          .equals(other.getSubscriptionTopicListList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getSubscriptionTopicListCount() > 0) {
        hash = (37 * hash) + SUBSCRIPTIONTOPICLIST_FIELD_NUMBER;
        hash = (53 * hash) + getSubscriptionTopicListList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static SubscriptionDto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SubscriptionDto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SubscriptionDto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SubscriptionDto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SubscriptionDto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static SubscriptionDto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static SubscriptionDto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SubscriptionDto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static SubscriptionDto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static SubscriptionDto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static SubscriptionDto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static SubscriptionDto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(SubscriptionDto prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SubscriptionDto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SubscriptionDto)
        SubscriptionDtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MdsdProtoBuf.internal_static_SubscriptionDto_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MdsdProtoBuf.internal_static_SubscriptionDto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                SubscriptionDto.class, Builder.class);
      }

      // Construct using MdsdProtoBuf.SubscriptionDto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSubscriptionTopicListFieldBuilder();
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        if (subscriptionTopicListBuilder_ == null) {
          subscriptionTopicList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          subscriptionTopicListBuilder_.clear();
        }
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MdsdProtoBuf.internal_static_SubscriptionDto_descriptor;
      }

      @Override
      public SubscriptionDto getDefaultInstanceForType() {
        return SubscriptionDto.getDefaultInstance();
      }

      @Override
      public SubscriptionDto build() {
        SubscriptionDto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public SubscriptionDto buildPartial() {
        SubscriptionDto result = new SubscriptionDto(this);
        int from_bitField0_ = bitField0_;
        if (subscriptionTopicListBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            subscriptionTopicList_ = java.util.Collections.unmodifiableList(subscriptionTopicList_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.subscriptionTopicList_ = subscriptionTopicList_;
        } else {
          result.subscriptionTopicList_ = subscriptionTopicListBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof SubscriptionDto) {
          return mergeFrom((SubscriptionDto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(SubscriptionDto other) {
        if (other == SubscriptionDto.getDefaultInstance()) return this;
        if (subscriptionTopicListBuilder_ == null) {
          if (!other.subscriptionTopicList_.isEmpty()) {
            if (subscriptionTopicList_.isEmpty()) {
              subscriptionTopicList_ = other.subscriptionTopicList_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureSubscriptionTopicListIsMutable();
              subscriptionTopicList_.addAll(other.subscriptionTopicList_);
            }
            onChanged();
          }
        } else {
          if (!other.subscriptionTopicList_.isEmpty()) {
            if (subscriptionTopicListBuilder_.isEmpty()) {
              subscriptionTopicListBuilder_.dispose();
              subscriptionTopicListBuilder_ = null;
              subscriptionTopicList_ = other.subscriptionTopicList_;
              bitField0_ = (bitField0_ & ~0x00000001);
              subscriptionTopicListBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSubscriptionTopicListFieldBuilder() : null;
            } else {
              subscriptionTopicListBuilder_.addAllMessages(other.subscriptionTopicList_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        SubscriptionDto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (SubscriptionDto) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<SubscriptionTopic> subscriptionTopicList_ =
        java.util.Collections.emptyList();
      private void ensureSubscriptionTopicListIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          subscriptionTopicList_ = new java.util.ArrayList<SubscriptionTopic>(subscriptionTopicList_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          SubscriptionTopic, SubscriptionTopic.Builder, SubscriptionTopicOrBuilder> subscriptionTopicListBuilder_;

      /**
       * <pre>
       * 订阅主题列表
       * </pre>
       *
       * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
       */
      public java.util.List<SubscriptionTopic> getSubscriptionTopicListList() {
        if (subscriptionTopicListBuilder_ == null) {
          return java.util.Collections.unmodifiableList(subscriptionTopicList_);
        } else {
          return subscriptionTopicListBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * 订阅主题列表
       * </pre>
       *
       * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
       */
      public int getSubscriptionTopicListCount() {
        if (subscriptionTopicListBuilder_ == null) {
          return subscriptionTopicList_.size();
        } else {
          return subscriptionTopicListBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * 订阅主题列表
       * </pre>
       *
       * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
       */
      public SubscriptionTopic getSubscriptionTopicList(int index) {
        if (subscriptionTopicListBuilder_ == null) {
          return subscriptionTopicList_.get(index);
        } else {
          return subscriptionTopicListBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * 订阅主题列表
       * </pre>
       *
       * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
       */
      public Builder setSubscriptionTopicList(
          int index, SubscriptionTopic value) {
        if (subscriptionTopicListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSubscriptionTopicListIsMutable();
          subscriptionTopicList_.set(index, value);
          onChanged();
        } else {
          subscriptionTopicListBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * 订阅主题列表
       * </pre>
       *
       * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
       */
      public Builder setSubscriptionTopicList(
          int index, SubscriptionTopic.Builder builderForValue) {
        if (subscriptionTopicListBuilder_ == null) {
          ensureSubscriptionTopicListIsMutable();
          subscriptionTopicList_.set(index, builderForValue.build());
          onChanged();
        } else {
          subscriptionTopicListBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 订阅主题列表
       * </pre>
       *
       * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
       */
      public Builder addSubscriptionTopicList(SubscriptionTopic value) {
        if (subscriptionTopicListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSubscriptionTopicListIsMutable();
          subscriptionTopicList_.add(value);
          onChanged();
        } else {
          subscriptionTopicListBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * 订阅主题列表
       * </pre>
       *
       * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
       */
      public Builder addSubscriptionTopicList(
          int index, SubscriptionTopic value) {
        if (subscriptionTopicListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSubscriptionTopicListIsMutable();
          subscriptionTopicList_.add(index, value);
          onChanged();
        } else {
          subscriptionTopicListBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * 订阅主题列表
       * </pre>
       *
       * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
       */
      public Builder addSubscriptionTopicList(
          SubscriptionTopic.Builder builderForValue) {
        if (subscriptionTopicListBuilder_ == null) {
          ensureSubscriptionTopicListIsMutable();
          subscriptionTopicList_.add(builderForValue.build());
          onChanged();
        } else {
          subscriptionTopicListBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 订阅主题列表
       * </pre>
       *
       * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
       */
      public Builder addSubscriptionTopicList(
          int index, SubscriptionTopic.Builder builderForValue) {
        if (subscriptionTopicListBuilder_ == null) {
          ensureSubscriptionTopicListIsMutable();
          subscriptionTopicList_.add(index, builderForValue.build());
          onChanged();
        } else {
          subscriptionTopicListBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 订阅主题列表
       * </pre>
       *
       * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
       */
      public Builder addAllSubscriptionTopicList(
          Iterable<? extends SubscriptionTopic> values) {
        if (subscriptionTopicListBuilder_ == null) {
          ensureSubscriptionTopicListIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, subscriptionTopicList_);
          onChanged();
        } else {
          subscriptionTopicListBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * 订阅主题列表
       * </pre>
       *
       * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
       */
      public Builder clearSubscriptionTopicList() {
        if (subscriptionTopicListBuilder_ == null) {
          subscriptionTopicList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          subscriptionTopicListBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * 订阅主题列表
       * </pre>
       *
       * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
       */
      public Builder removeSubscriptionTopicList(int index) {
        if (subscriptionTopicListBuilder_ == null) {
          ensureSubscriptionTopicListIsMutable();
          subscriptionTopicList_.remove(index);
          onChanged();
        } else {
          subscriptionTopicListBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * 订阅主题列表
       * </pre>
       *
       * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
       */
      public SubscriptionTopic.Builder getSubscriptionTopicListBuilder(
          int index) {
        return getSubscriptionTopicListFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * 订阅主题列表
       * </pre>
       *
       * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
       */
      public SubscriptionTopicOrBuilder getSubscriptionTopicListOrBuilder(
          int index) {
        if (subscriptionTopicListBuilder_ == null) {
          return subscriptionTopicList_.get(index);  } else {
          return subscriptionTopicListBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * 订阅主题列表
       * </pre>
       *
       * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
       */
      public java.util.List<? extends SubscriptionTopicOrBuilder>
           getSubscriptionTopicListOrBuilderList() {
        if (subscriptionTopicListBuilder_ != null) {
          return subscriptionTopicListBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(subscriptionTopicList_);
        }
      }
      /**
       * <pre>
       * 订阅主题列表
       * </pre>
       *
       * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
       */
      public SubscriptionTopic.Builder addSubscriptionTopicListBuilder() {
        return getSubscriptionTopicListFieldBuilder().addBuilder(
            SubscriptionTopic.getDefaultInstance());
      }
      /**
       * <pre>
       * 订阅主题列表
       * </pre>
       *
       * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
       */
      public SubscriptionTopic.Builder addSubscriptionTopicListBuilder(
          int index) {
        return getSubscriptionTopicListFieldBuilder().addBuilder(
            index, SubscriptionTopic.getDefaultInstance());
      }
      /**
       * <pre>
       * 订阅主题列表
       * </pre>
       *
       * <code>repeated .SubscriptionTopic subscriptionTopicList = 1;</code>
       */
      public java.util.List<SubscriptionTopic.Builder>
           getSubscriptionTopicListBuilderList() {
        return getSubscriptionTopicListFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          SubscriptionTopic, SubscriptionTopic.Builder, SubscriptionTopicOrBuilder>
          getSubscriptionTopicListFieldBuilder() {
        if (subscriptionTopicListBuilder_ == null) {
          subscriptionTopicListBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              SubscriptionTopic, SubscriptionTopic.Builder, SubscriptionTopicOrBuilder>(
                  subscriptionTopicList_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          subscriptionTopicList_ = null;
        }
        return subscriptionTopicListBuilder_;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SubscriptionDto)
    }

    // @@protoc_insertion_point(class_scope:SubscriptionDto)
    private static final SubscriptionDto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SubscriptionDto();
    }

    public static SubscriptionDto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SubscriptionDto>
        PARSER = new com.google.protobuf.AbstractParser<SubscriptionDto>() {
      @Override
      public SubscriptionDto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SubscriptionDto(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SubscriptionDto> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<SubscriptionDto> getParserForType() {
      return PARSER;
    }

    @Override
    public SubscriptionDto getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Payload_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Payload_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SubscriptionTopic_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SubscriptionTopic_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SubscriptionTopic_DetailsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SubscriptionTopic_DetailsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SubscriptionDto_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SubscriptionDto_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\nmdsd.proto\"\\\n\007Payload\022\024\n\014hardwareCode\030" +
      "\001 \001(\t\022\035\n\007command\030\002 \001(\0162\014.CommandEnum\022\016\n\006" +
      "action\030\003 \001(\005\022\014\n\004body\030\004 \001(\014\"\337\001\n\021Subscript" +
      "ionTopic\022\'\n\005topic\030\001 \001(\0162\030.FcSubscription" +
      "TopicEnum\022(\n\tfrequency\030\002 \001(\0162\025.Subscript" +
      "ionFreqEnum\0220\n\007details\030\003 \003(\0132\037.Subscript" +
      "ionTopic.DetailsEntry\022\025\n\rpushFrequency\030\004" +
      " \001(\005\032.\n\014DetailsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val" +
      "ue\030\002 \001(\t:\0028\001\"D\n\017SubscriptionDto\0221\n\025subsc" +
      "riptionTopicList\030\001 \003(\0132\022.SubscriptionTop" +
      "ic*\350\001\n\013CommandEnum\022\n\n\006LOGGER\020\000\022\023\n\017FC_SUB" +
      "SCRIPTION\020\001\022\022\n\016CAMERA_MANAGER\020\002\022\022\n\016GIMBA" +
      "L_MANAGER\020\003\022\024\n\020POWER_MANAGEMENT\020\004\022\025\n\021FLI" +
      "GHT_CONTROLLER\020\005\022\007\n\003HMS\020\006\022\r\n\tTIME_SYNC\020\007" +
      "\022\r\n\tLIVE_VIEW\020\010\022\021\n\rLOCAL_UPGRADE\020\t\022\017\n\013PO" +
      "SITIONING\020\n\022\014\n\010WAYPOINT\020\013\022\n\n\006WIDGET\020\014*\274\010" +
      "\n\027FcSubscriptionTopicEnum\022\036\n\032SUBSCRIPTIO" +
      "N_TOPIC_UNKNOWN\020\000\022\017\n\nQUATERNION\020\200\002\022\030\n\023AC" +
      "CELERATION_GROUND\020\202\002\022\026\n\021ACCELERATION_BOD" +
      "Y\020\203\002\022\025\n\020ACCELERATION_RAW\020\204\002\022\r\n\010VELOCITY\020" +
      "\205\002\022\032\n\025ANGULAR_RATE_FUSIONED\020\206\002\022\025\n\020ANGULA" +
      "R_RATE_RAW\020\207\002\022\023\n\016ALTITUDE_FUSED\020\210\002\022\027\n\022AL" +
      "TITUDE_BAROMETER\020\211\002\022\032\n\025ALTITUDE_OF_HOMEP" +
      "OINT\020\212\002\022\022\n\rHEIGHT_FUSION\020\213\002\022\024\n\017HEIGHT_RE" +
      "LATIVE\020\214\002\022\023\n\016POSITION_FUSED\020\215\002\022\r\n\010GPS_DA" +
      "TE\020\216\002\022\r\n\010GPS_TIME\020\217\002\022\021\n\014GPS_POSITION\020\220\002\022" +
      "\021\n\014GPS_VELOCITY\020\221\002\022\020\n\013GPS_DETAILS\020\222\002\022\025\n\020" +
      "GPS_SIGNAL_LEVEL\020\223\002\022\021\n\014RTK_POSITION\020\224\002\022\021" +
      "\n\014RTK_VELOCITY\020\225\002\022\014\n\007RTK_YAW\020\226\002\022\026\n\021RTK_P" +
      "OSITION_INFO\020\227\002\022\021\n\014RTK_YAW_INFO\020\230\002\022\014\n\007CO" +
      "MPASS\020\231\002\022\007\n\002RC\020\232\002\022\022\n\rGIMBAL_ANGLES\020\233\002\022\022\n" +
      "\rGIMBAL_STATUS\020\234\002\022\022\n\rSTATUS_FLIGHT\020\235\002\022\027\n" +
      "\022STATUS_DISPLAYMODE\020\236\002\022\027\n\022STATUS_LANDING" +
      "GEAR\020\237\002\022\035\n\030STATUS_MOTOR_START_ERROR\020\240\002\022\021" +
      "\n\014BATTERY_INFO\020\241\002\022\023\n\016CONTROL_DEVICE\020\242\002\022\016" +
      "\n\tHARD_SYNC\020\243\002\022\026\n\021GPS_CONTROL_LEVEL\020\244\002\022\026" +
      "\n\021RC_WITH_FLAG_DATA\020\245\002\022\r\n\010ESC_DATA\020\246\002\022\027\n" +
      "\022RTK_CONNECT_STATUS\020\247\002\022\030\n\023GIMBAL_CONTROL" +
      "_MODE\020\250\002\022\023\n\016FLIGHT_ANOMALY\020\251\002\022\020\n\013POSITIO" +
      "N_VO\020\252\002\022\017\n\nAVOID_DATA\020\253\002\022\032\n\025HOME_POINT_S" +
      "ET_STATUS\020\254\002\022\024\n\017HOME_POINT_INFO\020\255\002\022\026\n\021TH" +
      "REE_GIMBAL_DATA\020\256\002\022\037\n\032BATTERY_SINGLE_INF" +
      "O_INDEX1\020\257\002\022\037\n\032BATTERY_SINGLE_INFO_INDEX" +
      "2\020\260\002*p\n\024SubscriptionFreqEnum\022\010\n\004HZ_0\020\000\022\010" +
      "\n\004HZ_1\020\001\022\010\n\004HZ_5\020\005\022\t\n\005HZ_10\020\n\022\t\n\005HZ_50\0202" +
      "\022\n\n\006HZ_100\020d\022\013\n\006HZ_200\020\310\001\022\013\n\006HZ_400\020\220\003B\016" +
      "B\014MdsdProtoBufb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_Payload_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Payload_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Payload_descriptor,
        new String[] { "HardwareCode", "Command", "Action", "Body", });
    internal_static_SubscriptionTopic_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_SubscriptionTopic_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SubscriptionTopic_descriptor,
        new String[] { "Topic", "Frequency", "Details", "PushFrequency", });
    internal_static_SubscriptionTopic_DetailsEntry_descriptor =
      internal_static_SubscriptionTopic_descriptor.getNestedTypes().get(0);
    internal_static_SubscriptionTopic_DetailsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SubscriptionTopic_DetailsEntry_descriptor,
        new String[] { "Key", "Value", });
    internal_static_SubscriptionDto_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_SubscriptionDto_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SubscriptionDto_descriptor,
        new String[] { "SubscriptionTopicList", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
