server:
  port: 8080 #后端服务开启端口
logging:
  level: #日志打印级别
    '[com.example.demo]': debug
spring:
  servlet:
    multipart: #控制上传文件大小的配置
      file-size-threshold: 50MB
      max-file-size: 50MB
      max-request-size: 50MB
  datasource:
    driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
    url: jdbc:log4jdbc:mysql://1.117.209.57:3306/cpms_mrpi_mdsg?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&serverTimezone=Hongkong
    hikari: #springboot 2.0 整合了hikari ,据说这是目前性能最好的java数据库连接池
      username: root
      password: 'Wa_1322@%'
      #最小空闲连接数量
      minimum-idle: 1
      #空闲连接存活最大时间,默认600000（10分钟）
      idle-timeout: 180000
      #连接池最大连接数,默认是10
      maximum-pool-size: 2
      #此属性控制从池返回的连接的默认自动提交行为,默认值：true
      auto-commit: true
      pool-name: MyHikariCP # 连接池名称
      #此属性控制池中连接的最长生命周期,值0表示无限生命周期,默认1800000即30分钟
      max-lifetime: 1800000
      # 数据库连接超时时间,默认30秒,即30000
      connection-timeout: 30000
      #连接池每分配一条连接前执行的查询语句（如：SELECT 1）,以验证该连接是否是有效的,如果你的驱动程序支持 JDBC4,HikariCP 强烈建议我们不要设置此属性
      #connection-test-query: SELECT 1
      #jpa: #和datasource同级
      #hibernate:
      #ddl-auto: update  # 第一次建表create  后面用update,要不然每次重启都会新建表
      #show-sql: true #打印执行的sql语句
      #设置数据库方言  记住必须要使用 MySQL5InnoDBDialect 指定数据库类型对应InnoDB,如果使用MySQLDialect 则对应的是MyISA
      #database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
  redis:
    host: 10.152.9.18 # 连接IP
    port: 6379 # 端口
    database: 0
    password: 'GH%AkMvzT'
    jedis:
      pool:
        max-active: 10 # 连接池最大连接数,负值表示没有限制
        max-wait: 3s # 连接池最大阻塞等待时间,负值表示没有限制
        max-idle: 8 # 最大空闲连接数
        min-idle: 3 # 最小空闲连接数
mybatis-plus:
  mapper-locations: classpath:mapper/*.xml # 扫描mapper包中的所有 .xml 文件
  #  type-aliases-package: com.chinamobile.cmss.cpms.mdsg.entity # 实体扫描，多个package用逗号或者分号分隔
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl # 打印SQL日志
    map-underscore-to-camel-case: true # 开启驼峰功能,将下划线映射到驼峰大小写
    cache-enabled: false
    jdbc-type-for-null: null #配置JdbcTypeForNull, oracle数据库必须配置
  global-config:
    db-config:
      id-type: input # 主键类型
    #      table-prefix: MDSD_ #表名前缀
    #      logic-not-delete-value: 0 #逻辑未删除全局值（默认 0、表示未删除）
    #      logic-delete-value: 1 #逻辑删除全局值（默认 1、表示已删除
    #      logic-delete-field: delFlag# 逻辑删除全局字段 (默认无 设置会自动扫描实体字段)
resilience4j:
  circuitbreaker: # 短路器
    configs:
      default:
        registerHealthIndicator: true # 健康监测
        slidingWindowSize: 10 # 滑动窗口大小
        minimumNumberOfCalls: 5 # 最小调用数
        permittedNumberOfCallsInHalfOpenState: 3 # 半开状态下允许的调用数
        #        ringBufferSizelnCloseState: 5 # 熔断器关闭时的缓冲区大小
        #        ringBufferSizeInHalfOpenState: 2 # 熔断器半开时的缓冲区大小
        #        recordFailurePredicate: com.example.resilience4j.exceptions.RecordFailurePredicate # 谓词设置异常是否为失败
        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否自动从打开到半开,不需要触发
        waitDurationInOpenState: 10000 # 熔断器从打开到半开需要的时间
        failureRateThreshold: 60 # 熔断器打开的失败阈值
        eventConsumerBufferSize: 10 # 事件缓冲区大小
        recordExceptions: # 记录的异常
          - org.springframework.web.client.HttpServerErrorException
          - java.util.concurrent.TimeoutException
          - java.io.IOException
        ignoreExceptions: # 忽略的异常
          - com.example.demo.response.BusinessException
    instances: # 可以配置多个熔断器实例,使用不同配置或者覆盖配置
      service1:
        registerHealthIndicator: true # 健康监测
        slidingWindowSize: 10 # 滑动窗口大小
        minimumNumberOfCalls: 10 # 最小通过次数
        permittedNumberOfCallsInHalfOpenState: 3
        waitDurationInOpenState: 5s # 熔断器从打开到半开需要的时间
        failureRateThreshold: 50 # 熔断器打开的失败阈值
        eventConsumerBufferSize: 10 # 事件缓冲区大小
        recordFailurePredicate: com.example.demo.response.RecordFailurePredicate  # 谓词设置异常是否为失败
      service2:
        baseConfig: default
  retry: # 重试
    configs:
      default:
        maxAttempts: 3 # 最大重试次数
        waitDuration: 100 # 等待时间
        retryExceptions: # 记录的异常
          - org.springframework.web.client.HttpServerErrorException
          - java.util.concurrent.TimeoutException
          - java.io.IOException
        ignoreExceptions: # 忽略的异常
          - com.example.demo.response.BusinessException
    instances:
      service1:
        baseConfig: default
      service2:
        baseConfig: default
  bulkhead: # 隔离
    configs:
      default:
        maxConcurrentCalls: 100 # 最大并发调用数
    instances:
      service1:
        maxConcurrentCalls: 10 # 最大并发调用数
      service2:
        maxWaitDuration: 10ms # 最大等待时间
        maxConcurrentCalls: 20 # 最大并发调用数
  thread-pool-bulkhead: # 线程池隔离
    configs:
      default:
        maxThreadPoolSize: 4 # 最大线程池大小
        coreThreadPoolSize: 2 # 核心线程池大小
        queueCapacity: 2 # 队列容量
    instances:
      service1:
        baseConfig: default
      service2:
        maxThreadPoolSize: 1 # 最大线程池大小
        coreThreadPoolSize: 1 # 核心线程池大小
        queueCapacity: 1 # 队列容量
  ratelimiter: # 比率
    configs:
      default:
        registerHealthIndicator: false #注册健康指示器
        limitForPeriod: 10 # 期限
        limitRefreshPeriod: 15 # 限制刷新周期
        timeoutDuration: 0 # 超时持续时间
        eventConsumerBufferSize: 100 # 事件使用者缓冲区大小
    instances:
      service1:
        baseConfig: default
      service2:
        limitForPeriod: 6
        limitRefreshPeriod: 500ms
        timeoutDuration: 3s
